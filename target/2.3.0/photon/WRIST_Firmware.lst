
/Users/Edward/Desktop/WRIST_Firmware/target/2.3.0/photon/WRIST_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c94  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2cb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  20000000  080a2cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000065c  20000094  20000094  00030094  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2d48  080a2d48  00022d48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2d70  080a2d70  00022d70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013efba  00000000  00000000  00022d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001682b  00000000  00000000  00161d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a599  00000000  00000000  00178559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023f0  00000000  00000000  00192af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051c0  00000000  00000000  00194ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b7ef  00000000  00000000  0019a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031918  00000000  00000000  001c5891  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4c4e  00000000  00000000  001f71a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005d0c  00000000  00000000  002abdf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 faf1 	bl	80a2614 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 faf9 	bl	80a2630 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2cb4 	.word	0x080a2cb4
 80a004c:	20000094 	.word	0x20000094
 80a0050:	20000094 	.word	0x20000094
 80a0054:	200006ed 	.word	0x200006ed
 80a0058:	200006ed 	.word	0x200006ed

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8c9 	bl	80a21f4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2c84 	.word	0x080a2c84
 80a0080:	080a2ca4 	.word	0x080a2ca4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 bbec 	b.w	80a0860 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fc7f 	bl	80a098c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b867 	b.w	80a2164 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bfd1 	b.w	80a103c <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bfcf 	b.w	80a103c <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bfd5 	b.w	80a104c <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 ff22 	bl	80a0ef4 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0bfd 	.word	0x080a0bfd

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a00c8:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a00ca:	2200      	movs	r2, #0
 80a00cc:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a00ce:	2220      	movs	r2, #32
  _addr = addr;
 80a00d0:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a00d2:	60c2      	str	r2, [r0, #12]
#endif
}
 80a00d4:	4770      	bx	lr

080a00d6 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a00d6:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a00d8:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a00da:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a00dc:	b153      	cbz	r3, 80a00f4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a00de:	7821      	ldrb	r1, [r4, #0]
 80a00e0:	6860      	ldr	r0, [r4, #4]
 80a00e2:	f001 f847 	bl	80a1174 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a00e6:	6860      	ldr	r0, [r4, #4]
 80a00e8:	f001 f84f 	bl	80a118a <_ZN7TwoWire15endTransmissionEv>
 80a00ec:	fab0 f080 	clz	r0, r0
 80a00f0:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a00f2:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a00f4:	2101      	movs	r1, #1
 80a00f6:	f000 f803 	bl	80a0100 <_ZN18Adafruit_I2CDevice5beginEb>
 80a00fa:	2800      	cmp	r0, #0
 80a00fc:	d1ef      	bne.n	80a00de <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a00fe:	e7f8      	b.n	80a00f2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a0100 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a0100:	b538      	push	{r3, r4, r5, lr}
 80a0102:	4604      	mov	r4, r0
  _wire->begin();
 80a0104:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a0106:	460d      	mov	r5, r1
  _wire->begin();
 80a0108:	f001 f802 	bl	80a1110 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a010c:	2001      	movs	r0, #1
 80a010e:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a0110:	b125      	cbz	r5, 80a011c <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a0112:	4620      	mov	r0, r4
}
 80a0114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a0118:	f7ff bfdd 	b.w	80a00d6 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a011c:	bd38      	pop	{r3, r4, r5, pc}

080a011e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a011e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0122:	461f      	mov	r7, r3
 80a0124:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a0128:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a012a:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a012c:	4432      	add	r2, r6
 80a012e:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a0130:	4604      	mov	r4, r0
 80a0132:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a0134:	d902      	bls.n	80a013c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0136:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 80a0138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a013c:	7801      	ldrb	r1, [r0, #0]
 80a013e:	6840      	ldr	r0, [r0, #4]
 80a0140:	f001 f818 	bl	80a1174 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0144:	b97e      	cbnz	r6, 80a0166 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a0146:	6860      	ldr	r0, [r4, #4]
 80a0148:	462a      	mov	r2, r5
 80a014a:	6803      	ldr	r3, [r0, #0]
 80a014c:	4641      	mov	r1, r8
 80a014e:	68db      	ldr	r3, [r3, #12]
 80a0150:	4798      	blx	r3
 80a0152:	4285      	cmp	r5, r0
 80a0154:	d1ef      	bne.n	80a0136 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a0156:	4639      	mov	r1, r7
 80a0158:	6860      	ldr	r0, [r4, #4]
 80a015a:	f001 f812 	bl	80a1182 <_ZN7TwoWire15endTransmissionEh>
 80a015e:	fab0 f080 	clz	r0, r0
 80a0162:	0940      	lsrs	r0, r0, #5
 80a0164:	e7e8      	b.n	80a0138 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0166:	f1b9 0f00 	cmp.w	r9, #0
 80a016a:	d0ec      	beq.n	80a0146 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a016c:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a016e:	4632      	mov	r2, r6
 80a0170:	6803      	ldr	r3, [r0, #0]
 80a0172:	4649      	mov	r1, r9
 80a0174:	68db      	ldr	r3, [r3, #12]
 80a0176:	4798      	blx	r3
 80a0178:	42b0      	cmp	r0, r6
 80a017a:	d1dc      	bne.n	80a0136 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a017c:	e7e3      	b.n	80a0146 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a017e <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a017e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0182:	4615      	mov	r5, r2
 80a0184:	4604      	mov	r4, r0
 80a0186:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a0188:	b2d2      	uxtb	r2, r2
 80a018a:	7801      	ldrb	r1, [r0, #0]
 80a018c:	6840      	ldr	r0, [r0, #4]
 80a018e:	f000 ffdc 	bl	80a114a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a0192:	4285      	cmp	r5, r0
 80a0194:	d10d      	bne.n	80a01b2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a0196:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a0198:	fa1f f887 	uxth.w	r8, r7
 80a019c:	45a8      	cmp	r8, r5
 80a019e:	f107 0701 	add.w	r7, r7, #1
 80a01a2:	d209      	bcs.n	80a01b8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a01a4:	6860      	ldr	r0, [r4, #4]
 80a01a6:	6803      	ldr	r3, [r0, #0]
 80a01a8:	695b      	ldr	r3, [r3, #20]
 80a01aa:	4798      	blx	r3
 80a01ac:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a01b0:	e7f2      	b.n	80a0198 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a01b2:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a01b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01b8:	2001      	movs	r0, #1
 80a01ba:	e7fb      	b.n	80a01b4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a01bc <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a01bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01c0:	4607      	mov	r7, r0
 80a01c2:	4688      	mov	r8, r1
 80a01c4:	4616      	mov	r6, r2
 80a01c6:	4699      	mov	r9, r3
  size_t pos = 0;
 80a01c8:	2500      	movs	r5, #0
  while (pos < len) {
 80a01ca:	42b5      	cmp	r5, r6
 80a01cc:	d212      	bcs.n	80a01f4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a01ce:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a01d0:	1b74      	subs	r4, r6, r5
 80a01d2:	4294      	cmp	r4, r2
 80a01d4:	bf28      	it	cs
 80a01d6:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a01d8:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a01da:	42ab      	cmp	r3, r5
 80a01dc:	bf94      	ite	ls
 80a01de:	464b      	movls	r3, r9
 80a01e0:	2300      	movhi	r3, #0
 80a01e2:	4622      	mov	r2, r4
 80a01e4:	4638      	mov	r0, r7
 80a01e6:	eb08 0105 	add.w	r1, r8, r5
 80a01ea:	f7ff ffc8 	bl	80a017e <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a01ee:	b110      	cbz	r0, 80a01f6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a01f0:	4425      	add	r5, r4
  while (pos < len) {
 80a01f2:	e7ea      	b.n	80a01ca <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a01f4:	2001      	movs	r0, #1
}
 80a01f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a01fa <_ZN16Adafruit_VL6180XC1Eh>:
    @brief  Instantiates a new VL6180X class
    @param  i2caddr Optional initial i2c address of the chip,
   VL6180X_DEFAULT_I2C_ADDR is used by default
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(uint8_t i2caddr) : _i2caddr(i2caddr) {}
 80a01fa:	2200      	movs	r2, #0
 80a01fc:	7201      	strb	r1, [r0, #8]
 80a01fe:	6002      	str	r2, [r0, #0]
 80a0200:	4770      	bx	lr

080a0202 <_ZN16Adafruit_VL6180X5read8Et>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a0202:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  i2c_dev->write(buffer, 2);
 80a0204:	2300      	movs	r3, #0
 80a0206:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a020a:	ba49      	rev16	r1, r1
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a020c:	4604      	mov	r4, r0
  buffer[0] = uint8_t(address >> 8);
 80a020e:	f8ad 100c 	strh.w	r1, [sp, #12]
  i2c_dev->write(buffer, 2);
 80a0212:	2301      	movs	r3, #1
 80a0214:	a903      	add	r1, sp, #12
 80a0216:	2202      	movs	r2, #2
 80a0218:	6800      	ldr	r0, [r0, #0]
 80a021a:	f7ff ff80 	bl	80a011e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 80a021e:	2301      	movs	r3, #1
 80a0220:	6820      	ldr	r0, [r4, #0]
 80a0222:	461a      	mov	r2, r3
 80a0224:	a903      	add	r1, sp, #12
 80a0226:	f7ff ffc9 	bl	80a01bc <_ZN18Adafruit_I2CDevice4readEPhjb>
  return buffer[0];
}
 80a022a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a022e:	b004      	add	sp, #16
 80a0230:	bd10      	pop	{r4, pc}

080a0232 <_ZN16Adafruit_VL6180X15readRangeStatusEv>:
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0232:	214d      	movs	r1, #77	; 0x4d
uint8_t Adafruit_VL6180X::readRangeStatus(void) {
 80a0234:	b508      	push	{r3, lr}
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0236:	f7ff ffe4 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
}
 80a023a:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80a023e:	bd08      	pop	{r3, pc}

080a0240 <_ZN16Adafruit_VL6180X6write8Eth>:
  i2c_dev->read(buffer, 2);
  return uint16_t(buffer[0]) << 8 | uint16_t(buffer[1]);
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data) {
 80a0240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[3];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  buffer[2] = data;
  i2c_dev->write(buffer, 3);
 80a0242:	2300      	movs	r3, #0
 80a0244:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a0248:	ba49      	rev16	r1, r1
 80a024a:	f8ad 100c 	strh.w	r1, [sp, #12]
  buffer[2] = data;
 80a024e:	f88d 200e 	strb.w	r2, [sp, #14]
  i2c_dev->write(buffer, 3);
 80a0252:	2301      	movs	r3, #1
 80a0254:	2203      	movs	r2, #3
 80a0256:	a903      	add	r1, sp, #12
 80a0258:	6800      	ldr	r0, [r0, #0]
 80a025a:	f7ff ff60 	bl	80a011e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a025e:	b005      	add	sp, #20
 80a0260:	f85d fb04 	ldr.w	pc, [sp], #4

080a0264 <_ZN16Adafruit_VL6180X10setAddressEh>:
boolean Adafruit_VL6180X::setAddress(uint8_t newAddr) {
 80a0264:	b538      	push	{r3, r4, r5, lr}
 80a0266:	4604      	mov	r4, r0
 80a0268:	460d      	mov	r5, r1
  write8(VL6180X_REG_SLAVE_DEVICE_ADDRESS, newAddr & 0x7F);
 80a026a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a026e:	f240 2112 	movw	r1, #530	; 0x212
 80a0272:	f7ff ffe5 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  if (i2c_dev)
 80a0276:	6820      	ldr	r0, [r4, #0]
  _i2caddr = newAddr;
 80a0278:	7225      	strb	r5, [r4, #8]
  if (i2c_dev)
 80a027a:	b110      	cbz	r0, 80a0282 <_ZN16Adafruit_VL6180X10setAddressEh+0x1e>
    delete i2c_dev;
 80a027c:	2110      	movs	r1, #16
 80a027e:	f002 f8ab 	bl	80a23d8 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0282:	2010      	movs	r0, #16
 80a0284:	f7ff ff07 	bl	80a0096 <_Znwj>
 80a0288:	4605      	mov	r5, r0
 80a028a:	b118      	cbz	r0, 80a0294 <_ZN16Adafruit_VL6180X10setAddressEh+0x30>
 80a028c:	6862      	ldr	r2, [r4, #4]
 80a028e:	7a21      	ldrb	r1, [r4, #8]
 80a0290:	f7ff ff1a 	bl	80a00c8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return i2c_dev->begin();
 80a0294:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0296:	6025      	str	r5, [r4, #0]
  return i2c_dev->begin();
 80a0298:	2101      	movs	r1, #1
}
 80a029a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return i2c_dev->begin();
 80a029e:	f7ff bf2f 	b.w	80a0100 <_ZN18Adafruit_I2CDevice5beginEb>

080a02a2 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
 80a02a2:	b510      	push	{r4, lr}
 80a02a4:	4604      	mov	r4, r0
  write8(0x0207, 0x01);
 80a02a6:	2201      	movs	r2, #1
 80a02a8:	f240 2107 	movw	r1, #519	; 0x207
 80a02ac:	f7ff ffc8 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0208, 0x01);
 80a02b0:	4620      	mov	r0, r4
 80a02b2:	2201      	movs	r2, #1
 80a02b4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80a02b8:	f7ff ffc2 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0096, 0x00);
 80a02bc:	4620      	mov	r0, r4
 80a02be:	2200      	movs	r2, #0
 80a02c0:	2196      	movs	r1, #150	; 0x96
 80a02c2:	f7ff ffbd 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0097, 0xfd);
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	22fd      	movs	r2, #253	; 0xfd
 80a02ca:	2197      	movs	r1, #151	; 0x97
 80a02cc:	f7ff ffb8 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e3, 0x00);
 80a02d0:	4620      	mov	r0, r4
 80a02d2:	2200      	movs	r2, #0
 80a02d4:	21e3      	movs	r1, #227	; 0xe3
 80a02d6:	f7ff ffb3 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e4, 0x04);
 80a02da:	4620      	mov	r0, r4
 80a02dc:	2204      	movs	r2, #4
 80a02de:	21e4      	movs	r1, #228	; 0xe4
 80a02e0:	f7ff ffae 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e5, 0x02);
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	2202      	movs	r2, #2
 80a02e8:	21e5      	movs	r1, #229	; 0xe5
 80a02ea:	f7ff ffa9 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e6, 0x01);
 80a02ee:	4620      	mov	r0, r4
 80a02f0:	2201      	movs	r2, #1
 80a02f2:	21e6      	movs	r1, #230	; 0xe6
 80a02f4:	f7ff ffa4 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e7, 0x03);
 80a02f8:	4620      	mov	r0, r4
 80a02fa:	2203      	movs	r2, #3
 80a02fc:	21e7      	movs	r1, #231	; 0xe7
 80a02fe:	f7ff ff9f 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00f5, 0x02);
 80a0302:	4620      	mov	r0, r4
 80a0304:	2202      	movs	r2, #2
 80a0306:	21f5      	movs	r1, #245	; 0xf5
 80a0308:	f7ff ff9a 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00d9, 0x05);
 80a030c:	4620      	mov	r0, r4
 80a030e:	2205      	movs	r2, #5
 80a0310:	21d9      	movs	r1, #217	; 0xd9
 80a0312:	f7ff ff95 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00db, 0xce);
 80a0316:	4620      	mov	r0, r4
 80a0318:	22ce      	movs	r2, #206	; 0xce
 80a031a:	21db      	movs	r1, #219	; 0xdb
 80a031c:	f7ff ff90 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dc, 0x03);
 80a0320:	4620      	mov	r0, r4
 80a0322:	2203      	movs	r2, #3
 80a0324:	21dc      	movs	r1, #220	; 0xdc
 80a0326:	f7ff ff8b 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dd, 0xf8);
 80a032a:	4620      	mov	r0, r4
 80a032c:	22f8      	movs	r2, #248	; 0xf8
 80a032e:	21dd      	movs	r1, #221	; 0xdd
 80a0330:	f7ff ff86 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x009f, 0x00);
 80a0334:	4620      	mov	r0, r4
 80a0336:	2200      	movs	r2, #0
 80a0338:	219f      	movs	r1, #159	; 0x9f
 80a033a:	f7ff ff81 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00a3, 0x3c);
 80a033e:	4620      	mov	r0, r4
 80a0340:	223c      	movs	r2, #60	; 0x3c
 80a0342:	21a3      	movs	r1, #163	; 0xa3
 80a0344:	f7ff ff7c 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b7, 0x00);
 80a0348:	4620      	mov	r0, r4
 80a034a:	2200      	movs	r2, #0
 80a034c:	21b7      	movs	r1, #183	; 0xb7
 80a034e:	f7ff ff77 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00bb, 0x3c);
 80a0352:	4620      	mov	r0, r4
 80a0354:	223c      	movs	r2, #60	; 0x3c
 80a0356:	21bb      	movs	r1, #187	; 0xbb
 80a0358:	f7ff ff72 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b2, 0x09);
 80a035c:	4620      	mov	r0, r4
 80a035e:	2209      	movs	r2, #9
 80a0360:	21b2      	movs	r1, #178	; 0xb2
 80a0362:	f7ff ff6d 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ca, 0x09);
 80a0366:	4620      	mov	r0, r4
 80a0368:	2209      	movs	r2, #9
 80a036a:	21ca      	movs	r1, #202	; 0xca
 80a036c:	f7ff ff68 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0198, 0x01);
 80a0370:	4620      	mov	r0, r4
 80a0372:	2201      	movs	r2, #1
 80a0374:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80a0378:	f7ff ff62 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01b0, 0x17);
 80a037c:	4620      	mov	r0, r4
 80a037e:	2217      	movs	r2, #23
 80a0380:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80a0384:	f7ff ff5c 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ad, 0x00);
 80a0388:	4620      	mov	r0, r4
 80a038a:	2200      	movs	r2, #0
 80a038c:	f240 11ad 	movw	r1, #429	; 0x1ad
 80a0390:	f7ff ff56 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ff, 0x05);
 80a0394:	4620      	mov	r0, r4
 80a0396:	2205      	movs	r2, #5
 80a0398:	21ff      	movs	r1, #255	; 0xff
 80a039a:	f7ff ff51 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0100, 0x05);
 80a039e:	4620      	mov	r0, r4
 80a03a0:	2205      	movs	r2, #5
 80a03a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a03a6:	f7ff ff4b 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0199, 0x05);
 80a03aa:	4620      	mov	r0, r4
 80a03ac:	2205      	movs	r2, #5
 80a03ae:	f240 1199 	movw	r1, #409	; 0x199
 80a03b2:	f7ff ff45 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a6, 0x1b);
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	221b      	movs	r2, #27
 80a03ba:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80a03be:	f7ff ff3f 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ac, 0x3e);
 80a03c2:	4620      	mov	r0, r4
 80a03c4:	223e      	movs	r2, #62	; 0x3e
 80a03c6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80a03ca:	f7ff ff39 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a7, 0x1f);
 80a03ce:	4620      	mov	r0, r4
 80a03d0:	221f      	movs	r2, #31
 80a03d2:	f240 11a7 	movw	r1, #423	; 0x1a7
 80a03d6:	f7ff ff33 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0030, 0x00);
 80a03da:	4620      	mov	r0, r4
 80a03dc:	2200      	movs	r2, #0
 80a03de:	2130      	movs	r1, #48	; 0x30
 80a03e0:	f7ff ff2e 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0011, 0x10); // Enables polling for 'New Sample ready'
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	2210      	movs	r2, #16
 80a03e8:	2111      	movs	r1, #17
 80a03ea:	f7ff ff29 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x010a, 0x30); // Set the averaging sample period
 80a03ee:	4620      	mov	r0, r4
 80a03f0:	2230      	movs	r2, #48	; 0x30
 80a03f2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80a03f6:	f7ff ff23 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003f, 0x46); // Sets the light and dark gain (upper
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	2246      	movs	r2, #70	; 0x46
 80a03fe:	213f      	movs	r1, #63	; 0x3f
 80a0400:	f7ff ff1e 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0031, 0xFF); // sets the # of range measurements after
 80a0404:	4620      	mov	r0, r4
 80a0406:	22ff      	movs	r2, #255	; 0xff
 80a0408:	2131      	movs	r1, #49	; 0x31
 80a040a:	f7ff ff19 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0041, 0x63); // Set ALS integration time to 100ms
 80a040e:	4620      	mov	r0, r4
 80a0410:	2263      	movs	r2, #99	; 0x63
 80a0412:	2141      	movs	r1, #65	; 0x41
 80a0414:	f7ff ff14 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x002e, 0x01); // perform a single temperature calibration
 80a0418:	4620      	mov	r0, r4
 80a041a:	2201      	movs	r2, #1
 80a041c:	212e      	movs	r1, #46	; 0x2e
 80a041e:	f7ff ff0f 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD,
 80a0422:	4620      	mov	r0, r4
 80a0424:	2209      	movs	r2, #9
 80a0426:	211b      	movs	r1, #27
 80a0428:	f7ff ff0a 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003e, 0x31); // Set default ALS inter-measurement period
 80a042c:	4620      	mov	r0, r4
 80a042e:	2231      	movs	r2, #49	; 0x31
 80a0430:	213e      	movs	r1, #62	; 0x3e
 80a0432:	f7ff ff05 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a0436:	4620      	mov	r0, r4
}
 80a0438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a043c:	2224      	movs	r2, #36	; 0x24
 80a043e:	2114      	movs	r1, #20
 80a0440:	f7ff befe 	b.w	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>

080a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
 80a0444:	b538      	push	{r3, r4, r5, lr}
 80a0446:	4604      	mov	r4, r0
  _i2c = theWire;
 80a0448:	6041      	str	r1, [r0, #4]
  if (i2c_dev)
 80a044a:	6800      	ldr	r0, [r0, #0]
 80a044c:	b110      	cbz	r0, 80a0454 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    delete i2c_dev;
 80a044e:	2110      	movs	r1, #16
 80a0450:	f001 ffc2 	bl	80a23d8 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0454:	2010      	movs	r0, #16
 80a0456:	f7ff fe1e 	bl	80a0096 <_Znwj>
 80a045a:	4605      	mov	r5, r0
 80a045c:	b118      	cbz	r0, 80a0466 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x22>
 80a045e:	6862      	ldr	r2, [r4, #4]
 80a0460:	7a21      	ldrb	r1, [r4, #8]
 80a0462:	f7ff fe31 	bl	80a00c8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 80a0466:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0468:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin())
 80a046a:	2101      	movs	r1, #1
 80a046c:	f7ff fe48 	bl	80a0100 <_ZN18Adafruit_I2CDevice5beginEb>
 80a0470:	4605      	mov	r5, r0
 80a0472:	b910      	cbnz	r0, 80a047a <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    return false;
 80a0474:	2500      	movs	r5, #0
}
 80a0476:	4628      	mov	r0, r5
 80a0478:	bd38      	pop	{r3, r4, r5, pc}
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 80a047a:	2100      	movs	r1, #0
 80a047c:	4620      	mov	r0, r4
 80a047e:	f7ff fec0 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
 80a0482:	28b4      	cmp	r0, #180	; 0xb4
 80a0484:	d1f6      	bne.n	80a0474 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x30>
  if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 80a0486:	2116      	movs	r1, #22
 80a0488:	4620      	mov	r0, r4
 80a048a:	f7ff feba 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
 80a048e:	07c3      	lsls	r3, r0, #31
 80a0490:	d5f1      	bpl.n	80a0476 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>
    loadSettings();
 80a0492:	4620      	mov	r0, r4
 80a0494:	f7ff ff05 	bl	80a02a2 <_ZN16Adafruit_VL6180X12loadSettingsEv>
    write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80a0498:	2200      	movs	r2, #0
 80a049a:	2116      	movs	r1, #22
 80a049c:	4620      	mov	r0, r4
 80a049e:	f7ff fecf 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
 80a04a2:	e7e8      	b.n	80a0476 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>

080a04a4 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
 80a04a4:	b538      	push	{r3, r4, r5, lr}
 80a04a6:	4604      	mov	r4, r0
  while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80a04a8:	214d      	movs	r1, #77	; 0x4d
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	f7ff fea9 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
 80a04b0:	07c2      	lsls	r2, r0, #31
 80a04b2:	d5f9      	bpl.n	80a04a8 <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80a04b4:	2201      	movs	r2, #1
 80a04b6:	2118      	movs	r1, #24
 80a04b8:	4620      	mov	r0, r4
 80a04ba:	f7ff fec1 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
  while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80a04be:	214f      	movs	r1, #79	; 0x4f
 80a04c0:	4620      	mov	r0, r4
 80a04c2:	f7ff fe9e 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
 80a04c6:	0743      	lsls	r3, r0, #29
 80a04c8:	d5f9      	bpl.n	80a04be <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 80a04ca:	2162      	movs	r1, #98	; 0x62
 80a04cc:	4620      	mov	r0, r4
 80a04ce:	f7ff fe98 	bl	80a0202 <_ZN16Adafruit_VL6180X5read8Et>
 80a04d2:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 80a04d4:	2207      	movs	r2, #7
 80a04d6:	4620      	mov	r0, r4
 80a04d8:	2115      	movs	r1, #21
 80a04da:	f7ff feb1 	bl	80a0240 <_ZN16Adafruit_VL6180X6write8Eth>
}
 80a04de:	4628      	mov	r0, r5
 80a04e0:	bd38      	pop	{r3, r4, r5, pc}

080a04e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a04e2:	b510      	push	{r4, lr}
 80a04e4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a04e6:	6803      	ldr	r3, [r0, #0]
 80a04e8:	689b      	ldr	r3, [r3, #8]
 80a04ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a04ec:	68a3      	ldr	r3, [r4, #8]
 80a04ee:	3b01      	subs	r3, #1
 80a04f0:	60a3      	str	r3, [r4, #8]
 80a04f2:	b92b      	cbnz	r3, 80a0500 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a04f4:	6823      	ldr	r3, [r4, #0]
 80a04f6:	4620      	mov	r0, r4
        }
    }
 80a04f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a04fc:	68db      	ldr	r3, [r3, #12]
 80a04fe:	4718      	bx	r3
    }
 80a0500:	bd10      	pop	{r4, pc}

080a0502 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0502:	b40e      	push	{r1, r2, r3}
 80a0504:	b503      	push	{r0, r1, lr}
 80a0506:	ab03      	add	r3, sp, #12
 80a0508:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a050c:	2100      	movs	r1, #0
        va_start(args, format);
 80a050e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a0510:	f000 ff82 	bl	80a1418 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0514:	b002      	add	sp, #8
 80a0516:	f85d eb04 	ldr.w	lr, [sp], #4
 80a051a:	b003      	add	sp, #12
 80a051c:	4770      	bx	lr

080a051e <_Z12set_sht_pinsh>:
        //     client.publish(BATT_TOPIC, batt_data);
        // }
    }
}

void set_sht_pins(byte state) {
 80a051e:	b510      	push	{r4, lr}
 80a0520:	4604      	mov	r4, r0
    digitalWrite(SHT_LOX1, state);
 80a0522:	4601      	mov	r1, r0
 80a0524:	2002      	movs	r0, #2
 80a0526:	f001 fef2 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX2, state);
 80a052a:	4621      	mov	r1, r4
 80a052c:	2003      	movs	r0, #3
 80a052e:	f001 feee 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX3, state);
 80a0532:	4621      	mov	r1, r4
 80a0534:	2004      	movs	r0, #4
 80a0536:	f001 feea 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX4, state);
 80a053a:	4621      	mov	r1, r4
 80a053c:	2005      	movs	r0, #5
 80a053e:	f001 fee6 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX5, state);
 80a0542:	4621      	mov	r1, r4
 80a0544:	2006      	movs	r0, #6
 80a0546:	f001 fee2 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX6, state);
 80a054a:	4621      	mov	r1, r4
 80a054c:	200a      	movs	r0, #10
 80a054e:	f001 fede 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX7, state);
 80a0552:	4621      	mov	r1, r4
 80a0554:	200c      	movs	r0, #12
 80a0556:	f001 feda 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX8, state);
 80a055a:	4621      	mov	r1, r4
 80a055c:	200f      	movs	r0, #15
 80a055e:	f001 fed6 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX9, state);
 80a0562:	4621      	mov	r1, r4
 80a0564:	200d      	movs	r0, #13
 80a0566:	f001 fed2 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX10, state);
 80a056a:	4621      	mov	r1, r4
}
 80a056c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(SHT_LOX10, state);
 80a0570:	200e      	movs	r0, #14
 80a0572:	f001 becc 	b.w	80a230e <digitalWrite>
	...

080a0578 <_Z13start_sensorsv>:

void start_sensors() {
 80a0578:	b508      	push	{r3, lr}
    // all reset
    set_sht_pins(LOW);
 80a057a:	2000      	movs	r0, #0
 80a057c:	f7ff ffcf 	bl	80a051e <_Z12set_sht_pinsh>
    delay(10);
 80a0580:	200a      	movs	r0, #10
 80a0582:	f000 fd83 	bl	80a108c <delay>

    // all unreset
    set_sht_pins(HIGH);
 80a0586:	2001      	movs	r0, #1
 80a0588:	f7ff ffc9 	bl	80a051e <_Z12set_sht_pinsh>
    delay(10);
 80a058c:	200a      	movs	r0, #10
 80a058e:	f000 fd7d 	bl	80a108c <delay>

    // activating LOX1
    digitalWrite(SHT_LOX1, HIGH);
 80a0592:	2101      	movs	r1, #1
 80a0594:	2002      	movs	r0, #2
 80a0596:	f001 feba 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a059a:	2100      	movs	r1, #0
 80a059c:	2003      	movs	r0, #3
 80a059e:	f001 feb6 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a05a2:	2100      	movs	r1, #0
 80a05a4:	2004      	movs	r0, #4
 80a05a6:	f001 feb2 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX4, LOW);
 80a05aa:	2100      	movs	r1, #0
 80a05ac:	2005      	movs	r0, #5
 80a05ae:	f001 feae 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX5, LOW);
 80a05b2:	2100      	movs	r1, #0
 80a05b4:	2006      	movs	r0, #6
 80a05b6:	f001 feaa 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX6, LOW);
 80a05ba:	2100      	movs	r1, #0
 80a05bc:	200a      	movs	r0, #10
 80a05be:	f001 fea6 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX7, LOW);
 80a05c2:	2100      	movs	r1, #0
 80a05c4:	200c      	movs	r0, #12
 80a05c6:	f001 fea2 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX8, LOW);
 80a05ca:	2100      	movs	r1, #0
 80a05cc:	200f      	movs	r0, #15
 80a05ce:	f001 fe9e 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX9, LOW);
 80a05d2:	2100      	movs	r1, #0
 80a05d4:	200d      	movs	r0, #13
 80a05d6:	f001 fe9a 	bl	80a230e <digitalWrite>
    digitalWrite(SHT_LOX10, LOW);
 80a05da:	2100      	movs	r1, #0
 80a05dc:	200e      	movs	r0, #14
 80a05de:	f001 fe96 	bl	80a230e <digitalWrite>

    // initing LOX1
    if (!lox1.begin()) {
 80a05e2:	f001 fec7 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a05e6:	4601      	mov	r1, r0
 80a05e8:	4875      	ldr	r0, [pc, #468]	; (80a07c0 <_Z13start_sensorsv+0x248>)
 80a05ea:	f7ff ff2b 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a05ee:	b928      	cbnz	r0, 80a05fc <_Z13start_sensorsv+0x84>
        Serial.println(F("Failed to boot first VL6180X"));
 80a05f0:	f001 fcc4 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a05f4:	4973      	ldr	r1, [pc, #460]	; (80a07c4 <_Z13start_sensorsv+0x24c>)
 80a05f6:	f000 fef0 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a05fa:	e7fe      	b.n	80a05fa <_Z13start_sensorsv+0x82>
    }
    lox1.setAddress(LOX1_ADDRESS);
 80a05fc:	2130      	movs	r1, #48	; 0x30
 80a05fe:	4870      	ldr	r0, [pc, #448]	; (80a07c0 <_Z13start_sensorsv+0x248>)
 80a0600:	f7ff fe30 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>
    delay(10);
 80a0604:	200a      	movs	r0, #10
 80a0606:	f000 fd41 	bl	80a108c <delay>

    // activating LOX2
    digitalWrite(SHT_LOX2, HIGH);
 80a060a:	2101      	movs	r1, #1
 80a060c:	2003      	movs	r0, #3
 80a060e:	f001 fe7e 	bl	80a230e <digitalWrite>
    delay(10);
 80a0612:	200a      	movs	r0, #10
 80a0614:	f000 fd3a 	bl	80a108c <delay>

    // initing LOX2
    if (!lox2.begin()) {
 80a0618:	f001 feac 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a061c:	4601      	mov	r1, r0
 80a061e:	486a      	ldr	r0, [pc, #424]	; (80a07c8 <_Z13start_sensorsv+0x250>)
 80a0620:	f7ff ff10 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0624:	b928      	cbnz	r0, 80a0632 <_Z13start_sensorsv+0xba>
        Serial.println(F("Failed to boot second VL6180X"));
 80a0626:	f001 fca9 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a062a:	4968      	ldr	r1, [pc, #416]	; (80a07cc <_Z13start_sensorsv+0x254>)
 80a062c:	f000 fed5 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0630:	e7fe      	b.n	80a0630 <_Z13start_sensorsv+0xb8>
    }
    lox2.setAddress(LOX2_ADDRESS);
 80a0632:	2131      	movs	r1, #49	; 0x31
 80a0634:	4864      	ldr	r0, [pc, #400]	; (80a07c8 <_Z13start_sensorsv+0x250>)
 80a0636:	f7ff fe15 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX3
    digitalWrite(SHT_LOX3, HIGH);
 80a063a:	2101      	movs	r1, #1
 80a063c:	2004      	movs	r0, #4
 80a063e:	f001 fe66 	bl	80a230e <digitalWrite>
    delay(10);
 80a0642:	200a      	movs	r0, #10
 80a0644:	f000 fd22 	bl	80a108c <delay>

    // initing LOX3
    if (!lox3.begin()) {
 80a0648:	f001 fe94 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a064c:	4601      	mov	r1, r0
 80a064e:	4860      	ldr	r0, [pc, #384]	; (80a07d0 <_Z13start_sensorsv+0x258>)
 80a0650:	f7ff fef8 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0654:	b928      	cbnz	r0, 80a0662 <_Z13start_sensorsv+0xea>
        Serial.println(F("Failed to boot third VL6180X"));
 80a0656:	f001 fc91 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a065a:	495e      	ldr	r1, [pc, #376]	; (80a07d4 <_Z13start_sensorsv+0x25c>)
 80a065c:	f000 febd 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0660:	e7fe      	b.n	80a0660 <_Z13start_sensorsv+0xe8>
    }
    lox3.setAddress(LOX3_ADDRESS);
 80a0662:	2132      	movs	r1, #50	; 0x32
 80a0664:	485a      	ldr	r0, [pc, #360]	; (80a07d0 <_Z13start_sensorsv+0x258>)
 80a0666:	f7ff fdfd 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX4
    digitalWrite(SHT_LOX4, HIGH);
 80a066a:	2101      	movs	r1, #1
 80a066c:	2005      	movs	r0, #5
 80a066e:	f001 fe4e 	bl	80a230e <digitalWrite>
    delay(10);
 80a0672:	200a      	movs	r0, #10
 80a0674:	f000 fd0a 	bl	80a108c <delay>

    // initing LOX4
    if (!lox4.begin()) {
 80a0678:	f001 fe7c 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a067c:	4601      	mov	r1, r0
 80a067e:	4856      	ldr	r0, [pc, #344]	; (80a07d8 <_Z13start_sensorsv+0x260>)
 80a0680:	f7ff fee0 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0684:	b928      	cbnz	r0, 80a0692 <_Z13start_sensorsv+0x11a>
        Serial.println(F("Failed to boot fourth VL6180X"));
 80a0686:	f001 fc79 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a068a:	4954      	ldr	r1, [pc, #336]	; (80a07dc <_Z13start_sensorsv+0x264>)
 80a068c:	f000 fea5 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0690:	e7fe      	b.n	80a0690 <_Z13start_sensorsv+0x118>
    }
    lox4.setAddress(LOX4_ADDRESS);
 80a0692:	2133      	movs	r1, #51	; 0x33
 80a0694:	4850      	ldr	r0, [pc, #320]	; (80a07d8 <_Z13start_sensorsv+0x260>)
 80a0696:	f7ff fde5 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX5
    digitalWrite(SHT_LOX5, HIGH);
 80a069a:	2101      	movs	r1, #1
 80a069c:	2006      	movs	r0, #6
 80a069e:	f001 fe36 	bl	80a230e <digitalWrite>
    delay(10);
 80a06a2:	200a      	movs	r0, #10
 80a06a4:	f000 fcf2 	bl	80a108c <delay>

    // initing LOX5
    if (!lox5.begin()) {
 80a06a8:	f001 fe64 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a06ac:	4601      	mov	r1, r0
 80a06ae:	484c      	ldr	r0, [pc, #304]	; (80a07e0 <_Z13start_sensorsv+0x268>)
 80a06b0:	f7ff fec8 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06b4:	b928      	cbnz	r0, 80a06c2 <_Z13start_sensorsv+0x14a>
        Serial.println(F("Failed to boot fifth VL6180X"));
 80a06b6:	f001 fc61 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a06ba:	494a      	ldr	r1, [pc, #296]	; (80a07e4 <_Z13start_sensorsv+0x26c>)
 80a06bc:	f000 fe8d 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06c0:	e7fe      	b.n	80a06c0 <_Z13start_sensorsv+0x148>
    }
    lox5.setAddress(LOX5_ADDRESS);
 80a06c2:	2134      	movs	r1, #52	; 0x34
 80a06c4:	4846      	ldr	r0, [pc, #280]	; (80a07e0 <_Z13start_sensorsv+0x268>)
 80a06c6:	f7ff fdcd 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX6
    digitalWrite(SHT_LOX6, HIGH);
 80a06ca:	2101      	movs	r1, #1
 80a06cc:	200a      	movs	r0, #10
 80a06ce:	f001 fe1e 	bl	80a230e <digitalWrite>
    delay(10);
 80a06d2:	200a      	movs	r0, #10
 80a06d4:	f000 fcda 	bl	80a108c <delay>

    // initing LOX6
    if (!lox6.begin()) {
 80a06d8:	f001 fe4c 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a06dc:	4601      	mov	r1, r0
 80a06de:	4842      	ldr	r0, [pc, #264]	; (80a07e8 <_Z13start_sensorsv+0x270>)
 80a06e0:	f7ff feb0 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06e4:	b928      	cbnz	r0, 80a06f2 <_Z13start_sensorsv+0x17a>
        Serial.println(F("Failed to boot sixth VL6180X"));
 80a06e6:	f001 fc49 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a06ea:	4940      	ldr	r1, [pc, #256]	; (80a07ec <_Z13start_sensorsv+0x274>)
 80a06ec:	f000 fe75 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06f0:	e7fe      	b.n	80a06f0 <_Z13start_sensorsv+0x178>
    }
    lox6.setAddress(LOX6_ADDRESS);
 80a06f2:	2135      	movs	r1, #53	; 0x35
 80a06f4:	483c      	ldr	r0, [pc, #240]	; (80a07e8 <_Z13start_sensorsv+0x270>)
 80a06f6:	f7ff fdb5 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX7
    digitalWrite(SHT_LOX7, HIGH);
 80a06fa:	2101      	movs	r1, #1
 80a06fc:	200c      	movs	r0, #12
 80a06fe:	f001 fe06 	bl	80a230e <digitalWrite>
    delay(10);
 80a0702:	200a      	movs	r0, #10
 80a0704:	f000 fcc2 	bl	80a108c <delay>

    // initing LOX7
    if (!lox7.begin()) {
 80a0708:	f001 fe34 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a070c:	4601      	mov	r1, r0
 80a070e:	4838      	ldr	r0, [pc, #224]	; (80a07f0 <_Z13start_sensorsv+0x278>)
 80a0710:	f7ff fe98 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0714:	b928      	cbnz	r0, 80a0722 <_Z13start_sensorsv+0x1aa>
        Serial.println(F("Failed to boot seventh VL6180X"));
 80a0716:	f001 fc31 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a071a:	4936      	ldr	r1, [pc, #216]	; (80a07f4 <_Z13start_sensorsv+0x27c>)
 80a071c:	f000 fe5d 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0720:	e7fe      	b.n	80a0720 <_Z13start_sensorsv+0x1a8>
    }
    lox7.setAddress(LOX7_ADDRESS);
 80a0722:	2137      	movs	r1, #55	; 0x37
 80a0724:	4832      	ldr	r0, [pc, #200]	; (80a07f0 <_Z13start_sensorsv+0x278>)
 80a0726:	f7ff fd9d 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX8
    digitalWrite(SHT_LOX8, HIGH);
 80a072a:	2101      	movs	r1, #1
 80a072c:	200f      	movs	r0, #15
 80a072e:	f001 fdee 	bl	80a230e <digitalWrite>
    delay(10);
 80a0732:	200a      	movs	r0, #10
 80a0734:	f000 fcaa 	bl	80a108c <delay>

    // initing LOX8
    if (!lox8.begin()) {
 80a0738:	f001 fe1c 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a073c:	4601      	mov	r1, r0
 80a073e:	482e      	ldr	r0, [pc, #184]	; (80a07f8 <_Z13start_sensorsv+0x280>)
 80a0740:	f7ff fe80 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0744:	b928      	cbnz	r0, 80a0752 <_Z13start_sensorsv+0x1da>
        Serial.println(F("Failed to boot eigth VL6180X"));
 80a0746:	f001 fc19 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a074a:	492c      	ldr	r1, [pc, #176]	; (80a07fc <_Z13start_sensorsv+0x284>)
 80a074c:	f000 fe45 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0750:	e7fe      	b.n	80a0750 <_Z13start_sensorsv+0x1d8>
    }
    lox8.setAddress(LOX8_ADDRESS);
 80a0752:	2138      	movs	r1, #56	; 0x38
 80a0754:	4828      	ldr	r0, [pc, #160]	; (80a07f8 <_Z13start_sensorsv+0x280>)
 80a0756:	f7ff fd85 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX9
    digitalWrite(SHT_LOX9, HIGH);
 80a075a:	2101      	movs	r1, #1
 80a075c:	200d      	movs	r0, #13
 80a075e:	f001 fdd6 	bl	80a230e <digitalWrite>
    delay(10);
 80a0762:	200a      	movs	r0, #10
 80a0764:	f000 fc92 	bl	80a108c <delay>

    // initing LOX9
    if (!lox9.begin()) {
 80a0768:	f001 fe04 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a076c:	4601      	mov	r1, r0
 80a076e:	4824      	ldr	r0, [pc, #144]	; (80a0800 <_Z13start_sensorsv+0x288>)
 80a0770:	f7ff fe68 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0774:	b928      	cbnz	r0, 80a0782 <_Z13start_sensorsv+0x20a>
        Serial.println(F("Failed to boot ninth VL6180X"));
 80a0776:	f001 fc01 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a077a:	4922      	ldr	r1, [pc, #136]	; (80a0804 <_Z13start_sensorsv+0x28c>)
 80a077c:	f000 fe2d 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0780:	e7fe      	b.n	80a0780 <_Z13start_sensorsv+0x208>
    }
    lox9.setAddress(LOX9_ADDRESS);
 80a0782:	2139      	movs	r1, #57	; 0x39
 80a0784:	481e      	ldr	r0, [pc, #120]	; (80a0800 <_Z13start_sensorsv+0x288>)
 80a0786:	f7ff fd6d 	bl	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX10
    digitalWrite(SHT_LOX10, HIGH);
 80a078a:	2101      	movs	r1, #1
 80a078c:	200e      	movs	r0, #14
 80a078e:	f001 fdbe 	bl	80a230e <digitalWrite>
    delay(10);
 80a0792:	200a      	movs	r0, #10
 80a0794:	f000 fc7a 	bl	80a108c <delay>

    // initing LOX10
    if (!lox10.begin()) {
 80a0798:	f001 fdec 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a079c:	4601      	mov	r1, r0
 80a079e:	481a      	ldr	r0, [pc, #104]	; (80a0808 <_Z13start_sensorsv+0x290>)
 80a07a0:	f7ff fe50 	bl	80a0444 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a07a4:	b928      	cbnz	r0, 80a07b2 <_Z13start_sensorsv+0x23a>
        Serial.println(F("Failed to boot tenth VL6180X"));
 80a07a6:	f001 fbe9 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a07aa:	4918      	ldr	r1, [pc, #96]	; (80a080c <_Z13start_sensorsv+0x294>)
 80a07ac:	f000 fe15 	bl	80a13da <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a07b0:	e7fe      	b.n	80a07b0 <_Z13start_sensorsv+0x238>
    }
    lox10.setAddress(LOX10_ADDRESS);
 80a07b2:	213a      	movs	r1, #58	; 0x3a
}
 80a07b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lox10.setAddress(LOX10_ADDRESS);
 80a07b8:	4813      	ldr	r0, [pc, #76]	; (80a0808 <_Z13start_sensorsv+0x290>)
 80a07ba:	f7ff bd53 	b.w	80a0264 <_ZN16Adafruit_VL6180X10setAddressEh>
 80a07be:	bf00      	nop
 80a07c0:	200000bc 	.word	0x200000bc
 80a07c4:	080a27a0 	.word	0x080a27a0
 80a07c8:	200000d4 	.word	0x200000d4
 80a07cc:	080a27bd 	.word	0x080a27bd
 80a07d0:	200000e0 	.word	0x200000e0
 80a07d4:	080a27db 	.word	0x080a27db
 80a07d8:	200000ec 	.word	0x200000ec
 80a07dc:	080a27f8 	.word	0x080a27f8
 80a07e0:	200000f8 	.word	0x200000f8
 80a07e4:	080a2816 	.word	0x080a2816
 80a07e8:	20000104 	.word	0x20000104
 80a07ec:	080a2833 	.word	0x080a2833
 80a07f0:	20000110 	.word	0x20000110
 80a07f4:	080a2850 	.word	0x080a2850
 80a07f8:	2000011c 	.word	0x2000011c
 80a07fc:	080a286f 	.word	0x080a286f
 80a0800:	20000128 	.word	0x20000128
 80a0804:	080a288c 	.word	0x080a288c
 80a0808:	200000c8 	.word	0x200000c8
 80a080c:	080a28a9 	.word	0x080a28a9

080a0810 <_Z24round_robin_read_sensorsv>:

void round_robin_read_sensors() {
 80a0810:	b570      	push	{r4, r5, r6, lr}
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a0812:	4c0f      	ldr	r4, [pc, #60]	; (80a0850 <_Z24round_robin_read_sensorsv+0x40>)
 80a0814:	4e0f      	ldr	r6, [pc, #60]	; (80a0854 <_Z24round_robin_read_sensorsv+0x44>)
 80a0816:	7823      	ldrb	r3, [r4, #0]
 80a0818:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80a081c:	f7ff fe42 	bl	80a04a4 <_ZN16Adafruit_VL6180X9readRangeEv>
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a0820:	7823      	ldrb	r3, [r4, #0]
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a0822:	4605      	mov	r5, r0
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a0824:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80a0828:	f7ff fd03 	bl	80a0232 <_ZN16Adafruit_VL6180X15readRangeStatusEv>

    sensor_status[sensor_idx] = status_lox;
 80a082c:	7823      	ldrb	r3, [r4, #0]
 80a082e:	4a0a      	ldr	r2, [pc, #40]	; (80a0858 <_Z24round_robin_read_sensorsv+0x48>)
 80a0830:	54d0      	strb	r0, [r2, r3]
    if (status_lox == VL6180X_ERROR_NONE) {
 80a0832:	4a0a      	ldr	r2, [pc, #40]	; (80a085c <_Z24round_robin_read_sensorsv+0x4c>)
        data[1 + sensor_idx] = range_lox;
 80a0834:	441a      	add	r2, r3
    if (status_lox == VL6180X_ERROR_NONE) {
 80a0836:	b940      	cbnz	r0, 80a084a <_Z24round_robin_read_sensorsv+0x3a>
        data[1 + sensor_idx] = range_lox;
 80a0838:	7055      	strb	r5, [r2, #1]
    }
    else {
        data[1 + sensor_idx] = -1;
    }

    sensor_idx = (sensor_idx + 1) % COUNT_SENSORS;
 80a083a:	210a      	movs	r1, #10
 80a083c:	3301      	adds	r3, #1
 80a083e:	fbb3 f2f1 	udiv	r2, r3, r1
 80a0842:	fb01 3312 	mls	r3, r1, r2, r3
 80a0846:	7023      	strb	r3, [r4, #0]
}
 80a0848:	bd70      	pop	{r4, r5, r6, pc}
        data[1 + sensor_idx] = -1;
 80a084a:	21ff      	movs	r1, #255	; 0xff
 80a084c:	7051      	strb	r1, [r2, #1]
 80a084e:	e7f4      	b.n	80a083a <_Z24round_robin_read_sensorsv+0x2a>
 80a0850:	20000138 	.word	0x20000138
 80a0854:	20000000 	.word	0x20000000
 80a0858:	20000139 	.word	0x20000139
 80a085c:	200000b0 	.word	0x200000b0

080a0860 <setup>:

void setup() {
 80a0860:	b510      	push	{r4, lr}
 80a0862:	b08a      	sub	sp, #40	; 0x28
    Serial.begin(115200);
 80a0864:	f001 fb8a 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a0868:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a086c:	f001 fb66 	bl	80a1f3c <_ZN9USBSerial5beginEl>

    // wait until serial port opens for native USB devices
    while (!Serial) {
 80a0870:	f001 fb84 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a0874:	f001 fb69 	bl	80a1f4a <_ZN9USBSerialcvbEv>
 80a0878:	b918      	cbnz	r0, 80a0882 <setup+0x22>
        delay(1);
 80a087a:	2001      	movs	r0, #1
 80a087c:	f000 fc06 	bl	80a108c <delay>
    while (!Serial) {
 80a0880:	e7f6      	b.n	80a0870 <setup+0x10>
    }

    Serial.println("Listening to TCP clients...");
 80a0882:	f001 fb7b 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a0886:	4933      	ldr	r1, [pc, #204]	; (80a0954 <setup+0xf4>)
 80a0888:	f000 fd9d 	bl	80a13c6 <_ZN5Print7printlnEPKc>

    // start listening for clients
    server.begin();
 80a088c:	4832      	ldr	r0, [pc, #200]	; (80a0958 <setup+0xf8>)
 80a088e:	f001 f9ab 	bl	80a1be8 <_ZN9TCPServer5beginEv>

    Serial.printf("localIP = %s\n", WiFi.localIP().toString().c_str());
 80a0892:	f001 fb73 	bl	80a1f7c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0896:	2200      	movs	r2, #0
 80a0898:	4b30      	ldr	r3, [pc, #192]	; (80a095c <setup+0xfc>)
 80a089a:	4611      	mov	r1, r2
 80a089c:	4604      	mov	r4, r0
 80a089e:	6858      	ldr	r0, [r3, #4]
 80a08a0:	f000 fb64 	bl	80a0f6c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a08a4:	1c81      	adds	r1, r0, #2
 80a08a6:	a804      	add	r0, sp, #16
 80a08a8:	f000 fca2 	bl	80a11f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
 80a08ac:	a904      	add	r1, sp, #16
 80a08ae:	4668      	mov	r0, sp
 80a08b0:	f000 fe5c 	bl	80a156c <_ZN6StringC1ERK9Printable>
 80a08b4:	9a00      	ldr	r2, [sp, #0]
 80a08b6:	492a      	ldr	r1, [pc, #168]	; (80a0960 <setup+0x100>)
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	f7ff fe22 	bl	80a0502 <_ZN5Print6printfEPKcz>
 80a08be:	4668      	mov	r0, sp
 80a08c0:	f000 fdf9 	bl	80a14b6 <_ZN6StringD1Ev>

    pinMode(SHT_LOX1, OUTPUT);
 80a08c4:	2101      	movs	r1, #1
 80a08c6:	2002      	movs	r0, #2
 80a08c8:	f001 fd10 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX2, OUTPUT);
 80a08cc:	2101      	movs	r1, #1
 80a08ce:	2003      	movs	r0, #3
 80a08d0:	f001 fd0c 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX3, OUTPUT);
 80a08d4:	2101      	movs	r1, #1
 80a08d6:	2004      	movs	r0, #4
 80a08d8:	f001 fd08 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX4, OUTPUT);
 80a08dc:	2101      	movs	r1, #1
 80a08de:	2005      	movs	r0, #5
 80a08e0:	f001 fd04 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX5, OUTPUT);
 80a08e4:	2101      	movs	r1, #1
 80a08e6:	2006      	movs	r0, #6
 80a08e8:	f001 fd00 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX6, OUTPUT);
 80a08ec:	2101      	movs	r1, #1
 80a08ee:	200a      	movs	r0, #10
 80a08f0:	f001 fcfc 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX7, OUTPUT);
 80a08f4:	2101      	movs	r1, #1
 80a08f6:	200c      	movs	r0, #12
 80a08f8:	f001 fcf8 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX8, OUTPUT);
 80a08fc:	2101      	movs	r1, #1
 80a08fe:	200f      	movs	r0, #15
 80a0900:	f001 fcf4 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX9, OUTPUT);
 80a0904:	2101      	movs	r1, #1
 80a0906:	200d      	movs	r0, #13
 80a0908:	f001 fcf0 	bl	80a22ec <pinMode>
    pinMode(SHT_LOX10, OUTPUT);
 80a090c:	2101      	movs	r1, #1
 80a090e:	200e      	movs	r0, #14
 80a0910:	f001 fcec 	bl	80a22ec <pinMode>

    Serial.println("Shutdown pins inited...");
 80a0914:	f001 fb32 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a0918:	4912      	ldr	r1, [pc, #72]	; (80a0964 <setup+0x104>)
 80a091a:	f000 fd54 	bl	80a13c6 <_ZN5Print7printlnEPKc>

    set_sht_pins(LOW);
 80a091e:	2000      	movs	r0, #0
 80a0920:	f7ff fdfd 	bl	80a051e <_Z12set_sht_pinsh>
    Serial.println("Starting...");
 80a0924:	f001 fb2a 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a0928:	490f      	ldr	r1, [pc, #60]	; (80a0968 <setup+0x108>)
 80a092a:	f000 fd4c 	bl	80a13c6 <_ZN5Print7printlnEPKc>
    start_sensors();
 80a092e:	f7ff fe23 	bl	80a0578 <_Z13start_sensorsv>

    // initialize the MAX17043 LiPo fuel gauge
    lipo.begin();
 80a0932:	480e      	ldr	r0, [pc, #56]	; (80a096c <setup+0x10c>)
 80a0934:	f000 f8c8 	bl	80a0ac8 <_ZN8MAX170435beginEv>
    // quick start restarts the MAX17043 in hopes of getting a more accurate guess for the SOC.
    lipo.quickStart();
 80a0938:	480c      	ldr	r0, [pc, #48]	; (80a096c <setup+0x10c>)
 80a093a:	f000 f8ec 	bl	80a0b16 <_ZN8MAX1704310quickStartEv>
    // set alert threshold to 20%.
    lipo.setThreshold(20);
 80a093e:	2114      	movs	r1, #20
 80a0940:	480a      	ldr	r0, [pc, #40]	; (80a096c <setup+0x10c>)
 80a0942:	f000 f925 	bl	80a0b90 <_ZN8MAX1704312setThresholdEh>

    Serial.println("Ready!");
 80a0946:	f001 fb19 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a094a:	4909      	ldr	r1, [pc, #36]	; (80a0970 <setup+0x110>)
 80a094c:	f000 fd3b 	bl	80a13c6 <_ZN5Print7printlnEPKc>
}
 80a0950:	b00a      	add	sp, #40	; 0x28
 80a0952:	bd10      	pop	{r4, pc}
 80a0954:	080a28c6 	.word	0x080a28c6
 80a0958:	20000144 	.word	0x20000144
 80a095c:	20000600 	.word	0x20000600
 80a0960:	080a28e2 	.word	0x080a28e2
 80a0964:	080a28f0 	.word	0x080a28f0
 80a0968:	080a2908 	.word	0x080a2908
 80a096c:	20000174 	.word	0x20000174
 80a0970:	080a2914 	.word	0x080a2914

080a0974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0974:	b510      	push	{r4, lr}
 80a0976:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 80a0978:	6800      	ldr	r0, [r0, #0]
 80a097a:	b128      	cbz	r0, 80a0988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
 80a097c:	6843      	ldr	r3, [r0, #4]
 80a097e:	3b01      	subs	r3, #1
 80a0980:	6043      	str	r3, [r0, #4]
 80a0982:	b90b      	cbnz	r3, 80a0988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
 80a0984:	f7ff fdad 	bl	80a04e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	  _M_pi->_M_release();
      }
 80a0988:	4620      	mov	r0, r4
 80a098a:	bd10      	pop	{r4, pc}

080a098c <loop>:

void loop() {
 80a098c:	b570      	push	{r4, r5, r6, lr}
 80a098e:	b088      	sub	sp, #32
    round_robin_read_sensors();
 80a0990:	f7ff ff3e 	bl	80a0810 <_Z24round_robin_read_sensorsv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0994:	f000 f93a 	bl	80a0c0c <HAL_Timer_Get_Milli_Seconds>

    uint32_t currTime = millis();
    // if (currTime - prevTime >= 100) {
    if (client.connected()) {
 80a0998:	4c1f      	ldr	r4, [pc, #124]	; (80a0a18 <loop+0x8c>)
 80a099a:	4605      	mov	r5, r0
 80a099c:	4620      	mov	r0, r4
 80a099e:	f000 ffea 	bl	80a1976 <_ZN9TCPClient9connectedEv>
 80a09a2:	b198      	cbz	r0, 80a09cc <loop+0x40>
        if (sensor_idx == COUNT_SENSORS - 1) {
 80a09a4:	4b1d      	ldr	r3, [pc, #116]	; (80a0a1c <loop+0x90>)
 80a09a6:	781b      	ldrb	r3, [r3, #0]
 80a09a8:	2b09      	cmp	r3, #9
 80a09aa:	d10d      	bne.n	80a09c8 <loop+0x3c>

                if (i != COUNT_SENSORS-1) Serial.print(" : ");
            }
            Serial.println();
#endif
            data[0] = (uint8_t)(currTime - prevTime);
 80a09ac:	4e1c      	ldr	r6, [pc, #112]	; (80a0a20 <loop+0x94>)
 80a09ae:	4c1d      	ldr	r4, [pc, #116]	; (80a0a24 <loop+0x98>)
 80a09b0:	6833      	ldr	r3, [r6, #0]
      return write((const uint8_t *)str, strlen(str));
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	1aeb      	subs	r3, r5, r3
 80a09b6:	7023      	strb	r3, [r4, #0]
 80a09b8:	f001 fe78 	bl	80a26ac <strlen>
 80a09bc:	4621      	mov	r1, r4
 80a09be:	4602      	mov	r2, r0
 80a09c0:	4819      	ldr	r0, [pc, #100]	; (80a0a28 <loop+0x9c>)
 80a09c2:	f001 f897 	bl	80a1af4 <_ZN9TCPServer5writeEPKhj>

            server.write(data);

            prevTime = currTime;
 80a09c6:	6035      	str	r5, [r6, #0]
        }
    }
    else {
        client = server.available();
    }
}
 80a09c8:	b008      	add	sp, #32
 80a09ca:	bd70      	pop	{r4, r5, r6, pc}
        client = server.available();
 80a09cc:	4916      	ldr	r1, [pc, #88]	; (80a0a28 <loop+0x9c>)
 80a09ce:	a801      	add	r0, sp, #4
 80a09d0:	f001 f97a 	bl	80a1cc8 <_ZN9TCPServer9availableEv>
class Print
 80a09d4:	9b02      	ldr	r3, [sp, #8]
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a09d6:	9d07      	ldr	r5, [sp, #28]
 80a09d8:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a09da:	9b03      	ldr	r3, [sp, #12]
 80a09dc:	60a3      	str	r3, [r4, #8]
 80a09de:	9b04      	ldr	r3, [sp, #16]
 80a09e0:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a09e2:	9b05      	ldr	r3, [sp, #20]
 80a09e4:	6123      	str	r3, [r4, #16]
 80a09e6:	9b06      	ldr	r3, [sp, #24]
 80a09e8:	6163      	str	r3, [r4, #20]
	if (__tmp != _M_pi)
 80a09ea:	69a3      	ldr	r3, [r4, #24]
 80a09ec:	429d      	cmp	r5, r3
 80a09ee:	d00c      	beq.n	80a0a0a <loop+0x7e>
	    if (__tmp != 0)
 80a09f0:	b115      	cbz	r5, 80a09f8 <loop+0x6c>
    { ++_M_use_count; }
 80a09f2:	686b      	ldr	r3, [r5, #4]
 80a09f4:	3301      	adds	r3, #1
 80a09f6:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a09f8:	69a0      	ldr	r0, [r4, #24]
 80a09fa:	b128      	cbz	r0, 80a0a08 <loop+0x7c>
      if (--_M_use_count == 0)
 80a09fc:	6843      	ldr	r3, [r0, #4]
 80a09fe:	3b01      	subs	r3, #1
 80a0a00:	6043      	str	r3, [r0, #4]
 80a0a02:	b90b      	cbnz	r3, 80a0a08 <loop+0x7c>
 80a0a04:	f7ff fd6d 	bl	80a04e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a0a08:	61a5      	str	r5, [r4, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0a0a:	4b08      	ldr	r3, [pc, #32]	; (80a0a2c <loop+0xa0>)
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0a0c:	a807      	add	r0, sp, #28
 80a0a0e:	9301      	str	r3, [sp, #4]
 80a0a10:	f7ff ffb0 	bl	80a0974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0a14:	e7d8      	b.n	80a09c8 <loop+0x3c>
 80a0a16:	bf00      	nop
 80a0a18:	20000094 	.word	0x20000094
 80a0a1c:	20000138 	.word	0x20000138
 80a0a20:	20000134 	.word	0x20000134
 80a0a24:	200000b0 	.word	0x200000b0
 80a0a28:	20000144 	.word	0x20000144
 80a0a2c:	080a29f8 	.word	0x080a29f8

080a0a30 <_GLOBAL__sub_I_lox1>:
 80a0a30:	b508      	push	{r3, lr}
Adafruit_VL6180X lox1  = Adafruit_VL6180X();
 80a0a32:	2129      	movs	r1, #41	; 0x29
 80a0a34:	4818      	ldr	r0, [pc, #96]	; (80a0a98 <_GLOBAL__sub_I_lox1+0x68>)
 80a0a36:	f7ff fbe0 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox2  = Adafruit_VL6180X();
 80a0a3a:	2129      	movs	r1, #41	; 0x29
 80a0a3c:	4817      	ldr	r0, [pc, #92]	; (80a0a9c <_GLOBAL__sub_I_lox1+0x6c>)
 80a0a3e:	f7ff fbdc 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox3  = Adafruit_VL6180X();
 80a0a42:	2129      	movs	r1, #41	; 0x29
 80a0a44:	4816      	ldr	r0, [pc, #88]	; (80a0aa0 <_GLOBAL__sub_I_lox1+0x70>)
 80a0a46:	f7ff fbd8 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox4  = Adafruit_VL6180X();
 80a0a4a:	2129      	movs	r1, #41	; 0x29
 80a0a4c:	4815      	ldr	r0, [pc, #84]	; (80a0aa4 <_GLOBAL__sub_I_lox1+0x74>)
 80a0a4e:	f7ff fbd4 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox5  = Adafruit_VL6180X();
 80a0a52:	2129      	movs	r1, #41	; 0x29
 80a0a54:	4814      	ldr	r0, [pc, #80]	; (80a0aa8 <_GLOBAL__sub_I_lox1+0x78>)
 80a0a56:	f7ff fbd0 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox6  = Adafruit_VL6180X();
 80a0a5a:	2129      	movs	r1, #41	; 0x29
 80a0a5c:	4813      	ldr	r0, [pc, #76]	; (80a0aac <_GLOBAL__sub_I_lox1+0x7c>)
 80a0a5e:	f7ff fbcc 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox7  = Adafruit_VL6180X();
 80a0a62:	2129      	movs	r1, #41	; 0x29
 80a0a64:	4812      	ldr	r0, [pc, #72]	; (80a0ab0 <_GLOBAL__sub_I_lox1+0x80>)
 80a0a66:	f7ff fbc8 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox8  = Adafruit_VL6180X();
 80a0a6a:	2129      	movs	r1, #41	; 0x29
 80a0a6c:	4811      	ldr	r0, [pc, #68]	; (80a0ab4 <_GLOBAL__sub_I_lox1+0x84>)
 80a0a6e:	f7ff fbc4 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox9  = Adafruit_VL6180X();
 80a0a72:	2129      	movs	r1, #41	; 0x29
 80a0a74:	4810      	ldr	r0, [pc, #64]	; (80a0ab8 <_GLOBAL__sub_I_lox1+0x88>)
 80a0a76:	f7ff fbc0 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox10 = Adafruit_VL6180X();
 80a0a7a:	2129      	movs	r1, #41	; 0x29
 80a0a7c:	480f      	ldr	r0, [pc, #60]	; (80a0abc <_GLOBAL__sub_I_lox1+0x8c>)
 80a0a7e:	f7ff fbbc 	bl	80a01fa <_ZN16Adafruit_VL6180XC1Eh>
TCPServer server = TCPServer(23);
 80a0a82:	2200      	movs	r2, #0
 80a0a84:	2117      	movs	r1, #23
 80a0a86:	480e      	ldr	r0, [pc, #56]	; (80a0ac0 <_GLOBAL__sub_I_lox1+0x90>)
 80a0a88:	f001 f872 	bl	80a1b70 <_ZN9TCPServerC1Etm>
}
 80a0a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
TCPClient client;
 80a0a90:	480c      	ldr	r0, [pc, #48]	; (80a0ac4 <_GLOBAL__sub_I_lox1+0x94>)
 80a0a92:	f000 bfc9 	b.w	80a1a28 <_ZN9TCPClientC1Ev>
 80a0a96:	bf00      	nop
 80a0a98:	200000bc 	.word	0x200000bc
 80a0a9c:	200000d4 	.word	0x200000d4
 80a0aa0:	200000e0 	.word	0x200000e0
 80a0aa4:	200000ec 	.word	0x200000ec
 80a0aa8:	200000f8 	.word	0x200000f8
 80a0aac:	20000104 	.word	0x20000104
 80a0ab0:	20000110 	.word	0x20000110
 80a0ab4:	2000011c 	.word	0x2000011c
 80a0ab8:	20000128 	.word	0x20000128
 80a0abc:	200000c8 	.word	0x200000c8
 80a0ac0:	20000144 	.word	0x20000144
 80a0ac4:	20000094 	.word	0x20000094

080a0ac8 <_ZN8MAX170435beginEv>:
{

}

uint8_t MAX17043::begin()
{
 80a0ac8:	b508      	push	{r3, lr}
  Wire.begin();
 80a0aca:	f001 fc53 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0ace:	f000 fb1f 	bl	80a1110 <_ZN7TwoWire5beginEv>
  return 1;
}
 80a0ad2:	2001      	movs	r0, #1
 80a0ad4:	bd08      	pop	{r3, pc}

080a0ad6 <_ZN8MAX170437write16Eth>:
  configReg |= ((uint16_t)newCompensation << 8) | configReg;
  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::write16(uint16_t data, uint8_t address)
{
 80a0ad6:	b538      	push	{r3, r4, r5, lr}
 80a0ad8:	4615      	mov	r5, r2
 80a0ada:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  msb = (data & 0xFF00) >> 8;
  lsb = (data & 0x00FF);
  Wire.beginTransmission(MAX17043_ADDRESS);
 80a0adc:	f001 fc4a 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0ae0:	2136      	movs	r1, #54	; 0x36
 80a0ae2:	f000 fb4b 	bl	80a117c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a0ae6:	f001 fc45 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0aea:	6803      	ldr	r3, [r0, #0]
 80a0aec:	4629      	mov	r1, r5
 80a0aee:	689b      	ldr	r3, [r3, #8]
 80a0af0:	4798      	blx	r3
  Wire.write(msb);
 80a0af2:	f001 fc3f 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0af6:	6803      	ldr	r3, [r0, #0]
 80a0af8:	0a21      	lsrs	r1, r4, #8
 80a0afa:	689b      	ldr	r3, [r3, #8]
 80a0afc:	4798      	blx	r3
  Wire.write(lsb);
 80a0afe:	f001 fc39 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b02:	6803      	ldr	r3, [r0, #0]
 80a0b04:	b2e1      	uxtb	r1, r4
 80a0b06:	689b      	ldr	r3, [r3, #8]
 80a0b08:	4798      	blx	r3
  return (Wire.endTransmission());
 80a0b0a:	f001 fc33 	bl	80a2374 <_Z19__fetch_global_Wirev>
}
 80a0b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (Wire.endTransmission());
 80a0b12:	f000 bb3a 	b.w	80a118a <_ZN7TwoWire15endTransmissionEv>

080a0b16 <_ZN8MAX1704310quickStartEv>:
  return write16(MAX17043_MODE_QUICKSTART, MAX17043_MODE);
 80a0b16:	2206      	movs	r2, #6
 80a0b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80a0b1c:	f7ff bfdb 	b.w	80a0ad6 <_ZN8MAX170437write16Eth>

080a0b20 <_ZN8MAX170436read16Eh>:

uint16_t MAX17043::read16(uint8_t address)
{
 80a0b20:	b510      	push	{r4, lr}
 80a0b22:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  int16_t timeout = 1000;

  Wire.beginTransmission(MAX17043_ADDRESS);
 80a0b24:	f001 fc26 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b28:	2136      	movs	r1, #54	; 0x36
 80a0b2a:	f000 fb27 	bl	80a117c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a0b2e:	f001 fc21 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b32:	6803      	ldr	r3, [r0, #0]
 80a0b34:	4621      	mov	r1, r4
 80a0b36:	689b      	ldr	r3, [r3, #8]
 80a0b38:	4798      	blx	r3
  Wire.endTransmission(false);
 80a0b3a:	f001 fc1b 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b3e:	2100      	movs	r1, #0
 80a0b40:	f000 fb1f 	bl	80a1182 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MAX17043_ADDRESS, 2);
 80a0b44:	f001 fc16 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b48:	2202      	movs	r2, #2
 80a0b4a:	2136      	movs	r1, #54	; 0x36
 80a0b4c:	f000 fb0f 	bl	80a116e <_ZN7TwoWire11requestFromEhj>
 80a0b50:	f240 34e9 	movw	r4, #1001	; 0x3e9
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a0b54:	f001 fc0e 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b58:	6803      	ldr	r3, [r0, #0]
 80a0b5a:	691b      	ldr	r3, [r3, #16]
 80a0b5c:	4798      	blx	r3
 80a0b5e:	2801      	cmp	r0, #1
 80a0b60:	dc06      	bgt.n	80a0b70 <_ZN8MAX170436read16Eh+0x50>
 80a0b62:	3c01      	subs	r4, #1
 80a0b64:	b2a4      	uxth	r4, r4
 80a0b66:	b11c      	cbz	r4, 80a0b70 <_ZN8MAX170436read16Eh+0x50>
    delay(1);
 80a0b68:	2001      	movs	r0, #1
 80a0b6a:	f000 fa8f 	bl	80a108c <delay>
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a0b6e:	e7f1      	b.n	80a0b54 <_ZN8MAX170436read16Eh+0x34>
  msb = Wire.read();
 80a0b70:	f001 fc00 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b74:	6803      	ldr	r3, [r0, #0]
 80a0b76:	695b      	ldr	r3, [r3, #20]
 80a0b78:	4798      	blx	r3
 80a0b7a:	4604      	mov	r4, r0
  lsb = Wire.read();
 80a0b7c:	f001 fbfa 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a0b80:	6803      	ldr	r3, [r0, #0]
 80a0b82:	695b      	ldr	r3, [r3, #20]
 80a0b84:	4798      	blx	r3

  return ((uint16_t) msb << 8) | lsb;
 80a0b86:	b2c3      	uxtb	r3, r0
 80a0b88:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
}
 80a0b8c:	b280      	uxth	r0, r0
 80a0b8e:	bd10      	pop	{r4, pc}

080a0b90 <_ZN8MAX1704312setThresholdEh>:
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a0b90:	2920      	cmp	r1, #32
 80a0b92:	bfa8      	it	ge
 80a0b94:	2120      	movge	r1, #32
{
 80a0b96:	b538      	push	{r3, r4, r5, lr}
 80a0b98:	460c      	mov	r4, r1
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a0b9a:	210c      	movs	r1, #12
{
 80a0b9c:	4605      	mov	r5, r0
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a0b9e:	f7ff ffbf 	bl	80a0b20 <_ZN8MAX170436read16Eh>
  percent = 32 - percent;
 80a0ba2:	f1c4 0420 	rsb	r4, r4, #32
  configReg &= 0xFFE0; // Mask out threshold bits
 80a0ba6:	f020 011f 	bic.w	r1, r0, #31
  configReg |= percent; // Add new threshold
 80a0baa:	b2e4      	uxtb	r4, r4
  configReg &= 0xFFE0; // Mask out threshold bits
 80a0bac:	b289      	uxth	r1, r1
  return write16(configReg, MAX17043_CONFIG);
 80a0bae:	4628      	mov	r0, r5
 80a0bb0:	4321      	orrs	r1, r4
 80a0bb2:	220c      	movs	r2, #12
}
 80a0bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write16(configReg, MAX17043_CONFIG);
 80a0bb8:	f7ff bf8d 	b.w	80a0ad6 <_ZN8MAX170437write16Eth>

080a0bbc <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <os_thread_scheduling+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	69db      	ldr	r3, [r3, #28]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601d0 	.word	0x080601d0

080a0bcc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <os_mutex_recursive_create+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601d0 	.word	0x080601d0

080a0bdc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <os_mutex_recursive_destroy+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601d0 	.word	0x080601d0

080a0bec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <HAL_RNG_GetRandomNumber+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	685b      	ldr	r3, [r3, #4]
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	0806019c 	.word	0x0806019c

080a0bfc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <HAL_Delay_Microseconds+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	68db      	ldr	r3, [r3, #12]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	0806019c 	.word	0x0806019c

080a0c0c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	695b      	ldr	r3, [r3, #20]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	0806019c 	.word	0x0806019c

080a0c1c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_Pin_Mode+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	689b      	ldr	r3, [r3, #8]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601b0 	.word	0x080601b0

080a0c2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <HAL_Get_Pin_Mode+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	68db      	ldr	r3, [r3, #12]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601b0 	.word	0x080601b0

080a0c3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <HAL_GPIO_Write+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	691b      	ldr	r3, [r3, #16]
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601b0 	.word	0x080601b0

080a0c4c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <hal_i2c_begin+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601ac 	.word	0x080601ac

080a0c5c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <hal_i2c_begin_transmission+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601ac 	.word	0x080601ac

080a0c6c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <hal_i2c_end_transmission+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601ac 	.word	0x080601ac

080a0c7c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <hal_i2c_write+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601ac 	.word	0x080601ac

080a0c8c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <hal_i2c_available+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601ac 	.word	0x080601ac

080a0c9c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <hal_i2c_read+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080601ac 	.word	0x080601ac

080a0cac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <hal_i2c_peek+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601ac 	.word	0x080601ac

080a0cbc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <hal_i2c_flush+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601ac 	.word	0x080601ac

080a0ccc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <hal_i2c_is_enabled+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601ac 	.word	0x080601ac

080a0cdc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b03      	ldr	r3, [pc, #12]	; (80a0cec <hal_i2c_init+0x10>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0ce6:	9301      	str	r3, [sp, #4]
 80a0ce8:	bd08      	pop	{r3, pc}
 80a0cea:	0000      	.short	0x0000
 80a0cec:	080601ac 	.word	0x080601ac

080a0cf0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b03      	ldr	r3, [pc, #12]	; (80a0d00 <hal_i2c_request_ex+0x10>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0cfa:	9301      	str	r3, [sp, #4]
 80a0cfc:	bd08      	pop	{r3, pc}
 80a0cfe:	0000      	.short	0x0000
 80a0d00:	080601ac 	.word	0x080601ac

080a0d04 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <socket_active_status+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	681b      	ldr	r3, [r3, #0]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601bc 	.word	0x080601bc

080a0d14 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <socket_handle_valid+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	685b      	ldr	r3, [r3, #4]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601bc 	.word	0x080601bc

080a0d24 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <socket_create+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	689b      	ldr	r3, [r3, #8]
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601bc 	.word	0x080601bc

080a0d34 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <socket_connect+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	68db      	ldr	r3, [r3, #12]
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601bc 	.word	0x080601bc

080a0d44 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <socket_receive+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	691b      	ldr	r3, [r3, #16]
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601bc 	.word	0x080601bc

080a0d54 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <socket_close+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	6a1b      	ldr	r3, [r3, #32]
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601bc 	.word	0x080601bc

080a0d64 <socket_create_tcp_server>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <socket_create_tcp_server+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601bc 	.word	0x080601bc

080a0d74 <socket_accept>:
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <socket_accept+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601bc 	.word	0x080601bc

080a0d84 <socket_handle_invalid>:
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <socket_handle_invalid+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601bc 	.word	0x080601bc

080a0d94 <socket_peer>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <socket_peer+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601bc 	.word	0x080601bc

080a0da4 <socket_send_ex>:
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <socket_send_ex+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601bc 	.word	0x080601bc

080a0db4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <hal_spi_init+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	69db      	ldr	r3, [r3, #28]
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601b4 	.word	0x080601b4

080a0dc4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0dc4:	b508      	push	{r3, lr}
 80a0dc6:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <hal_spi_is_enabled+0xc>)
 80a0dc8:	681b      	ldr	r3, [r3, #0]
 80a0dca:	6a1b      	ldr	r3, [r3, #32]
 80a0dcc:	9301      	str	r3, [sp, #4]
 80a0dce:	bd08      	pop	{r3, pc}
 80a0dd0:	080601b4 	.word	0x080601b4

080a0dd4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0dd4:	b508      	push	{r3, lr}
 80a0dd6:	4b02      	ldr	r3, [pc, #8]	; (80a0de0 <hal_usart_init+0xc>)
 80a0dd8:	681b      	ldr	r3, [r3, #0]
 80a0dda:	699b      	ldr	r3, [r3, #24]
 80a0ddc:	9301      	str	r3, [sp, #4]
 80a0dde:	bd08      	pop	{r3, pc}
 80a0de0:	080601c4 	.word	0x080601c4

080a0de4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <hal_usart_write+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601c4 	.word	0x080601c4

080a0df4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <hal_usart_available+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601c4 	.word	0x080601c4

080a0e04 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <hal_usart_read+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	080601c4 	.word	0x080601c4

080a0e14 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <hal_usart_peek+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	080601c4 	.word	0x080601c4

080a0e24 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <hal_usart_flush+0xc>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e2c:	9301      	str	r3, [sp, #4]
 80a0e2e:	bd08      	pop	{r3, pc}
 80a0e30:	080601c4 	.word	0x080601c4

080a0e34 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0e34:	b508      	push	{r3, lr}
 80a0e36:	4b02      	ldr	r3, [pc, #8]	; (80a0e40 <hal_usart_is_enabled+0xc>)
 80a0e38:	681b      	ldr	r3, [r3, #0]
 80a0e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0e3c:	9301      	str	r3, [sp, #4]
 80a0e3e:	bd08      	pop	{r3, pc}
 80a0e40:	080601c4 	.word	0x080601c4

080a0e44 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0e44:	b508      	push	{r3, lr}
 80a0e46:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <hal_usart_available_data_for_write+0xc>)
 80a0e48:	681b      	ldr	r3, [r3, #0]
 80a0e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e4c:	9301      	str	r3, [sp, #4]
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	080601c4 	.word	0x080601c4

080a0e54 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b02      	ldr	r3, [pc, #8]	; (80a0e60 <HAL_USB_USART_Init+0xc>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	681b      	ldr	r3, [r3, #0]
 80a0e5c:	9301      	str	r3, [sp, #4]
 80a0e5e:	bd08      	pop	{r3, pc}
 80a0e60:	080601d8 	.word	0x080601d8

080a0e64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0e64:	b508      	push	{r3, lr}
 80a0e66:	4b02      	ldr	r3, [pc, #8]	; (80a0e70 <HAL_USB_USART_Begin+0xc>)
 80a0e68:	681b      	ldr	r3, [r3, #0]
 80a0e6a:	685b      	ldr	r3, [r3, #4]
 80a0e6c:	9301      	str	r3, [sp, #4]
 80a0e6e:	bd08      	pop	{r3, pc}
 80a0e70:	080601d8 	.word	0x080601d8

080a0e74 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0e74:	b508      	push	{r3, lr}
 80a0e76:	4b02      	ldr	r3, [pc, #8]	; (80a0e80 <HAL_USB_USART_Available_Data+0xc>)
 80a0e78:	681b      	ldr	r3, [r3, #0]
 80a0e7a:	691b      	ldr	r3, [r3, #16]
 80a0e7c:	9301      	str	r3, [sp, #4]
 80a0e7e:	bd08      	pop	{r3, pc}
 80a0e80:	080601d8 	.word	0x080601d8

080a0e84 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0e84:	b508      	push	{r3, lr}
 80a0e86:	4b02      	ldr	r3, [pc, #8]	; (80a0e90 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0e88:	681b      	ldr	r3, [r3, #0]
 80a0e8a:	695b      	ldr	r3, [r3, #20]
 80a0e8c:	9301      	str	r3, [sp, #4]
 80a0e8e:	bd08      	pop	{r3, pc}
 80a0e90:	080601d8 	.word	0x080601d8

080a0e94 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e94:	b508      	push	{r3, lr}
 80a0e96:	4b02      	ldr	r3, [pc, #8]	; (80a0ea0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0e98:	681b      	ldr	r3, [r3, #0]
 80a0e9a:	699b      	ldr	r3, [r3, #24]
 80a0e9c:	9301      	str	r3, [sp, #4]
 80a0e9e:	bd08      	pop	{r3, pc}
 80a0ea0:	080601d8 	.word	0x080601d8

080a0ea4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0ea4:	b508      	push	{r3, lr}
 80a0ea6:	4b02      	ldr	r3, [pc, #8]	; (80a0eb0 <HAL_USB_USART_Send_Data+0xc>)
 80a0ea8:	681b      	ldr	r3, [r3, #0]
 80a0eaa:	69db      	ldr	r3, [r3, #28]
 80a0eac:	9301      	str	r3, [sp, #4]
 80a0eae:	bd08      	pop	{r3, pc}
 80a0eb0:	080601d8 	.word	0x080601d8

080a0eb4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0eb4:	b508      	push	{r3, lr}
 80a0eb6:	4b02      	ldr	r3, [pc, #8]	; (80a0ec0 <HAL_USB_USART_Flush_Data+0xc>)
 80a0eb8:	681b      	ldr	r3, [r3, #0]
 80a0eba:	6a1b      	ldr	r3, [r3, #32]
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	bd08      	pop	{r3, pc}
 80a0ec0:	080601d8 	.word	0x080601d8

080a0ec4 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a0ec4:	b508      	push	{r3, lr}
 80a0ec6:	4b02      	ldr	r3, [pc, #8]	; (80a0ed0 <HAL_USB_USART_Is_Enabled+0xc>)
 80a0ec8:	681b      	ldr	r3, [r3, #0]
 80a0eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ecc:	9301      	str	r3, [sp, #4]
 80a0ece:	bd08      	pop	{r3, pc}
 80a0ed0:	080601d8 	.word	0x080601d8

080a0ed4 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0ed4:	b508      	push	{r3, lr}
 80a0ed6:	4b02      	ldr	r3, [pc, #8]	; (80a0ee0 <HAL_NET_SetNetWatchDog+0xc>)
 80a0ed8:	681b      	ldr	r3, [r3, #0]
 80a0eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0edc:	9301      	str	r3, [sp, #4]
 80a0ede:	bd08      	pop	{r3, pc}
 80a0ee0:	080601c0 	.word	0x080601c0

080a0ee4 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	4b02      	ldr	r3, [pc, #8]	; (80a0ef0 <inet_gethostbyname+0xc>)
 80a0ee8:	681b      	ldr	r3, [r3, #0]
 80a0eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0eec:	9301      	str	r3, [sp, #4]
 80a0eee:	bd08      	pop	{r3, pc}
 80a0ef0:	080601c0 	.word	0x080601c0

080a0ef4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b02      	ldr	r3, [pc, #8]	; (80a0f00 <panic_+0xc>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0efc:	9301      	str	r3, [sp, #4]
 80a0efe:	bd08      	pop	{r3, pc}
 80a0f00:	080201a8 	.word	0x080201a8

080a0f04 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b02      	ldr	r3, [pc, #8]	; (80a0f10 <log_message+0xc>)
 80a0f08:	681b      	ldr	r3, [r3, #0]
 80a0f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0f0c:	9301      	str	r3, [sp, #4]
 80a0f0e:	bd08      	pop	{r3, pc}
 80a0f10:	080201a8 	.word	0x080201a8

080a0f14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0f14:	b508      	push	{r3, lr}
 80a0f16:	4b02      	ldr	r3, [pc, #8]	; (80a0f20 <set_system_mode+0xc>)
 80a0f18:	681b      	ldr	r3, [r3, #0]
 80a0f1a:	685b      	ldr	r3, [r3, #4]
 80a0f1c:	9301      	str	r3, [sp, #4]
 80a0f1e:	bd08      	pop	{r3, pc}
 80a0f20:	080601a4 	.word	0x080601a4

080a0f24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <system_delay_ms+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	695b      	ldr	r3, [r3, #20]
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601a4 	.word	0x080601a4

080a0f34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b03      	ldr	r3, [pc, #12]	; (80a0f44 <system_ctrl_set_app_request_handler+0x10>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f3e:	9301      	str	r3, [sp, #4]
 80a0f40:	bd08      	pop	{r3, pc}
 80a0f42:	0000      	.short	0x0000
 80a0f44:	080601a4 	.word	0x080601a4

080a0f48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b03      	ldr	r3, [pc, #12]	; (80a0f58 <system_ctrl_set_result+0x10>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f52:	9301      	str	r3, [sp, #4]
 80a0f54:	bd08      	pop	{r3, pc}
 80a0f56:	0000      	.short	0x0000
 80a0f58:	080601a4 	.word	0x080601a4

080a0f5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f5c:	b508      	push	{r3, lr}
 80a0f5e:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f60:	681b      	ldr	r3, [r3, #0]
 80a0f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0f64:	9301      	str	r3, [sp, #4]
 80a0f66:	bd08      	pop	{r3, pc}
 80a0f68:	080601cc 	.word	0x080601cc

080a0f6c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a0f6c:	b508      	push	{r3, lr}
 80a0f6e:	4b02      	ldr	r3, [pc, #8]	; (80a0f78 <network_config+0xc>)
 80a0f70:	681b      	ldr	r3, [r3, #0]
 80a0f72:	681b      	ldr	r3, [r3, #0]
 80a0f74:	9301      	str	r3, [sp, #4]
 80a0f76:	bd08      	pop	{r3, pc}
 80a0f78:	080601c8 	.word	0x080601c8

080a0f7c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f7c:	b508      	push	{r3, lr}
 80a0f7e:	4b02      	ldr	r3, [pc, #8]	; (80a0f88 <network_connect+0xc>)
 80a0f80:	681b      	ldr	r3, [r3, #0]
 80a0f82:	685b      	ldr	r3, [r3, #4]
 80a0f84:	9301      	str	r3, [sp, #4]
 80a0f86:	bd08      	pop	{r3, pc}
 80a0f88:	080601c8 	.word	0x080601c8

080a0f8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f8c:	b508      	push	{r3, lr}
 80a0f8e:	4b02      	ldr	r3, [pc, #8]	; (80a0f98 <network_connecting+0xc>)
 80a0f90:	681b      	ldr	r3, [r3, #0]
 80a0f92:	689b      	ldr	r3, [r3, #8]
 80a0f94:	9301      	str	r3, [sp, #4]
 80a0f96:	bd08      	pop	{r3, pc}
 80a0f98:	080601c8 	.word	0x080601c8

080a0f9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f9c:	b508      	push	{r3, lr}
 80a0f9e:	4b02      	ldr	r3, [pc, #8]	; (80a0fa8 <network_disconnect+0xc>)
 80a0fa0:	681b      	ldr	r3, [r3, #0]
 80a0fa2:	68db      	ldr	r3, [r3, #12]
 80a0fa4:	9301      	str	r3, [sp, #4]
 80a0fa6:	bd08      	pop	{r3, pc}
 80a0fa8:	080601c8 	.word	0x080601c8

080a0fac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0fac:	b508      	push	{r3, lr}
 80a0fae:	4b02      	ldr	r3, [pc, #8]	; (80a0fb8 <network_ready+0xc>)
 80a0fb0:	681b      	ldr	r3, [r3, #0]
 80a0fb2:	691b      	ldr	r3, [r3, #16]
 80a0fb4:	9301      	str	r3, [sp, #4]
 80a0fb6:	bd08      	pop	{r3, pc}
 80a0fb8:	080601c8 	.word	0x080601c8

080a0fbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fbc:	b508      	push	{r3, lr}
 80a0fbe:	4b02      	ldr	r3, [pc, #8]	; (80a0fc8 <network_on+0xc>)
 80a0fc0:	681b      	ldr	r3, [r3, #0]
 80a0fc2:	695b      	ldr	r3, [r3, #20]
 80a0fc4:	9301      	str	r3, [sp, #4]
 80a0fc6:	bd08      	pop	{r3, pc}
 80a0fc8:	080601c8 	.word	0x080601c8

080a0fcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fcc:	b508      	push	{r3, lr}
 80a0fce:	4b02      	ldr	r3, [pc, #8]	; (80a0fd8 <network_off+0xc>)
 80a0fd0:	681b      	ldr	r3, [r3, #0]
 80a0fd2:	699b      	ldr	r3, [r3, #24]
 80a0fd4:	9301      	str	r3, [sp, #4]
 80a0fd6:	bd08      	pop	{r3, pc}
 80a0fd8:	080601c8 	.word	0x080601c8

080a0fdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0fdc:	b508      	push	{r3, lr}
 80a0fde:	4b02      	ldr	r3, [pc, #8]	; (80a0fe8 <network_listen+0xc>)
 80a0fe0:	681b      	ldr	r3, [r3, #0]
 80a0fe2:	69db      	ldr	r3, [r3, #28]
 80a0fe4:	9301      	str	r3, [sp, #4]
 80a0fe6:	bd08      	pop	{r3, pc}
 80a0fe8:	080601c8 	.word	0x080601c8

080a0fec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0fec:	b508      	push	{r3, lr}
 80a0fee:	4b02      	ldr	r3, [pc, #8]	; (80a0ff8 <network_listening+0xc>)
 80a0ff0:	681b      	ldr	r3, [r3, #0]
 80a0ff2:	6a1b      	ldr	r3, [r3, #32]
 80a0ff4:	9301      	str	r3, [sp, #4]
 80a0ff6:	bd08      	pop	{r3, pc}
 80a0ff8:	080601c8 	.word	0x080601c8

080a0ffc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0ffc:	b508      	push	{r3, lr}
 80a0ffe:	4b02      	ldr	r3, [pc, #8]	; (80a1008 <network_set_listen_timeout+0xc>)
 80a1000:	681b      	ldr	r3, [r3, #0]
 80a1002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1004:	9301      	str	r3, [sp, #4]
 80a1006:	bd08      	pop	{r3, pc}
 80a1008:	080601c8 	.word	0x080601c8

080a100c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a100c:	b508      	push	{r3, lr}
 80a100e:	4b02      	ldr	r3, [pc, #8]	; (80a1018 <network_get_listen_timeout+0xc>)
 80a1010:	681b      	ldr	r3, [r3, #0]
 80a1012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1014:	9301      	str	r3, [sp, #4]
 80a1016:	bd08      	pop	{r3, pc}
 80a1018:	080601c8 	.word	0x080601c8

080a101c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a101c:	b508      	push	{r3, lr}
 80a101e:	4b02      	ldr	r3, [pc, #8]	; (80a1028 <network_is_on+0xc>)
 80a1020:	681b      	ldr	r3, [r3, #0]
 80a1022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1024:	9301      	str	r3, [sp, #4]
 80a1026:	bd08      	pop	{r3, pc}
 80a1028:	080601c8 	.word	0x080601c8

080a102c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a102c:	b508      	push	{r3, lr}
 80a102e:	4b02      	ldr	r3, [pc, #8]	; (80a1038 <network_is_off+0xc>)
 80a1030:	681b      	ldr	r3, [r3, #0]
 80a1032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1034:	9301      	str	r3, [sp, #4]
 80a1036:	bd08      	pop	{r3, pc}
 80a1038:	080601c8 	.word	0x080601c8

080a103c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <malloc+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	681b      	ldr	r3, [r3, #0]
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601a0 	.word	0x080601a0

080a104c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <free+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	685b      	ldr	r3, [r3, #4]
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	080601a0 	.word	0x080601a0

080a105c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <realloc+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	689b      	ldr	r3, [r3, #8]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	080601a0 	.word	0x080601a0

080a106c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <vsnprintf+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	080601a0 	.word	0x080601a0

080a107c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <newlib_impure_ptr_callback+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	080601a0 	.word	0x080601a0

080a108c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a108c:	2100      	movs	r1, #0
 80a108e:	f7ff bf49 	b.w	80a0f24 <system_delay_ms>

080a1092 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1092:	4770      	bx	lr

080a1094 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1096:	4606      	mov	r6, r0
 80a1098:	4615      	mov	r5, r2
 80a109a:	460c      	mov	r4, r1
 80a109c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a109e:	42bc      	cmp	r4, r7
 80a10a0:	d006      	beq.n	80a10b0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10a2:	6833      	ldr	r3, [r6, #0]
 80a10a4:	4630      	mov	r0, r6
 80a10a6:	689b      	ldr	r3, [r3, #8]
 80a10a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10ac:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a10ae:	e7f6      	b.n	80a109e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a10b0:	4628      	mov	r0, r5
 80a10b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10b4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a10b4:	2200      	movs	r2, #0
 80a10b6:	7c00      	ldrb	r0, [r0, #16]
 80a10b8:	f7ff bde0 	b.w	80a0c7c <hal_i2c_write>

080a10bc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a10bc:	2100      	movs	r1, #0
 80a10be:	7c00      	ldrb	r0, [r0, #16]
 80a10c0:	f7ff bde4 	b.w	80a0c8c <hal_i2c_available>

080a10c4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a10c4:	2100      	movs	r1, #0
 80a10c6:	7c00      	ldrb	r0, [r0, #16]
 80a10c8:	f7ff bde8 	b.w	80a0c9c <hal_i2c_read>

080a10cc <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a10cc:	2100      	movs	r1, #0
 80a10ce:	7c00      	ldrb	r0, [r0, #16]
 80a10d0:	f7ff bdec 	b.w	80a0cac <hal_i2c_peek>

080a10d4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a10d4:	2100      	movs	r1, #0
 80a10d6:	7c00      	ldrb	r0, [r0, #16]
 80a10d8:	f7ff bdf0 	b.w	80a0cbc <hal_i2c_flush>

080a10dc <_ZN7TwoWireD0Ev>:
 80a10dc:	b510      	push	{r4, lr}
 80a10de:	4604      	mov	r4, r0
 80a10e0:	2114      	movs	r1, #20
 80a10e2:	f001 f979 	bl	80a23d8 <_ZdlPvj>
 80a10e6:	4620      	mov	r0, r4
 80a10e8:	bd10      	pop	{r4, pc}
	...

080a10ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a10ec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a10ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10f2:	4604      	mov	r4, r0
 80a10f4:	4608      	mov	r0, r1
 80a10f6:	2100      	movs	r1, #0
 80a10f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a10fc:	4b03      	ldr	r3, [pc, #12]	; (80a110c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a10fe:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1100:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1102:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1104:	f7ff fdea 	bl	80a0cdc <hal_i2c_init>
}
 80a1108:	4620      	mov	r0, r4
 80a110a:	bd10      	pop	{r4, pc}
 80a110c:	080a2924 	.word	0x080a2924

080a1110 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1110:	2300      	movs	r3, #0
 80a1112:	7c00      	ldrb	r0, [r0, #16]
 80a1114:	461a      	mov	r2, r3
 80a1116:	4619      	mov	r1, r3
 80a1118:	f7ff bd98 	b.w	80a0c4c <hal_i2c_begin>

080a111c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a111c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a111e:	2200      	movs	r2, #0
 80a1120:	2314      	movs	r3, #20
 80a1122:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1126:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a112a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a112c:	7c00      	ldrb	r0, [r0, #16]
 80a112e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1132:	684b      	ldr	r3, [r1, #4]
 80a1134:	9303      	str	r3, [sp, #12]
 80a1136:	68cb      	ldr	r3, [r1, #12]
 80a1138:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a113a:	7a0b      	ldrb	r3, [r1, #8]
 80a113c:	a901      	add	r1, sp, #4
 80a113e:	9305      	str	r3, [sp, #20]
 80a1140:	f7ff fdd6 	bl	80a0cf0 <hal_i2c_request_ex>
}
 80a1144:	b007      	add	sp, #28
 80a1146:	f85d fb04 	ldr.w	pc, [sp], #4

080a114a <_ZN7TwoWire11requestFromEhjh>:
{
 80a114a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a114c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a114e:	f88d 1000 	strb.w	r1, [sp]
 80a1152:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1156:	bf18      	it	ne
 80a1158:	2301      	movne	r3, #1
 80a115a:	9103      	str	r1, [sp, #12]
 80a115c:	4669      	mov	r1, sp
    size_ = size;
 80a115e:	9201      	str	r2, [sp, #4]
 80a1160:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1164:	f7ff ffda 	bl	80a111c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1168:	b005      	add	sp, #20
 80a116a:	f85d fb04 	ldr.w	pc, [sp], #4

080a116e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a116e:	2301      	movs	r3, #1
 80a1170:	f7ff bfeb 	b.w	80a114a <_ZN7TwoWire11requestFromEhjh>

080a1174 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1174:	2200      	movs	r2, #0
 80a1176:	7c00      	ldrb	r0, [r0, #16]
 80a1178:	f7ff bd70 	b.w	80a0c5c <hal_i2c_begin_transmission>

080a117c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a117c:	b2c9      	uxtb	r1, r1
 80a117e:	f7ff bff9 	b.w	80a1174 <_ZN7TwoWire17beginTransmissionEh>

080a1182 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1182:	2200      	movs	r2, #0
 80a1184:	7c00      	ldrb	r0, [r0, #16]
 80a1186:	f7ff bd71 	b.w	80a0c6c <hal_i2c_end_transmission>

080a118a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a118a:	2101      	movs	r1, #1
 80a118c:	f7ff bff9 	b.w	80a1182 <_ZN7TwoWire15endTransmissionEh>

080a1190 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1190:	4770      	bx	lr

080a1192 <_ZN9IPAddressD0Ev>:
 80a1192:	b510      	push	{r4, lr}
 80a1194:	4604      	mov	r4, r0
 80a1196:	2118      	movs	r1, #24
 80a1198:	f001 f91e 	bl	80a23d8 <_ZdlPvj>
 80a119c:	4620      	mov	r0, r4
 80a119e:	bd10      	pop	{r4, pc}

080a11a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a11a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11a2:	460e      	mov	r6, r1
 80a11a4:	2400      	movs	r4, #0
 80a11a6:	f100 0708 	add.w	r7, r0, #8
 80a11aa:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a11ac:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a11b0:	220a      	movs	r2, #10
 80a11b2:	4630      	mov	r0, r6
 80a11b4:	f000 f913 	bl	80a13de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a11b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a11ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a11bc:	d101      	bne.n	80a11c2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a11be:	4620      	mov	r0, r4
 80a11c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a11c2:	2c00      	cmp	r4, #0
 80a11c4:	d0f2      	beq.n	80a11ac <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a11c6:	212e      	movs	r1, #46	; 0x2e
 80a11c8:	4630      	mov	r0, r6
 80a11ca:	f000 f8ed 	bl	80a13a8 <_ZN5Print5printEc>
 80a11ce:	4404      	add	r4, r0
 80a11d0:	e7ec      	b.n	80a11ac <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a11d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	4604      	mov	r4, r0
 80a11d8:	4b04      	ldr	r3, [pc, #16]	; (80a11ec <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a11da:	2211      	movs	r2, #17
 80a11dc:	2100      	movs	r1, #0
 80a11de:	f840 3b04 	str.w	r3, [r0], #4
 80a11e2:	f001 fa25 	bl	80a2630 <memset>
}
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	bd10      	pop	{r4, pc}
 80a11ea:	bf00      	nop
 80a11ec:	080a294c 	.word	0x080a294c

080a11f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a11f0:	4603      	mov	r3, r0
 80a11f2:	4a07      	ldr	r2, [pc, #28]	; (80a1210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a11f4:	b510      	push	{r4, lr}
 80a11f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a11fa:	f101 0210 	add.w	r2, r1, #16
 80a11fe:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1202:	4291      	cmp	r1, r2
 80a1204:	f843 4b04 	str.w	r4, [r3], #4
 80a1208:	d1f9      	bne.n	80a11fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a120a:	780a      	ldrb	r2, [r1, #0]
 80a120c:	701a      	strb	r2, [r3, #0]
}
 80a120e:	bd10      	pop	{r4, pc}
 80a1210:	080a294c 	.word	0x080a294c

080a1214 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1214:	4a02      	ldr	r2, [pc, #8]	; (80a1220 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1216:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a121a:	2204      	movs	r2, #4
 80a121c:	7502      	strb	r2, [r0, #20]
}
 80a121e:	4770      	bx	lr
 80a1220:	080a294c 	.word	0x080a294c

080a1224 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1224:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1226:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a122a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a122e:	2304      	movs	r3, #4
 80a1230:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1234:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1238:	6044      	str	r4, [r0, #4]
 80a123a:	7503      	strb	r3, [r0, #20]
}
 80a123c:	bd10      	pop	{r4, pc}
	...

080a1240 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1242:	4d04      	ldr	r5, [pc, #16]	; (80a1254 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1244:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1246:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a124a:	9500      	str	r5, [sp, #0]
 80a124c:	f7ff ffea 	bl	80a1224 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1250:	b003      	add	sp, #12
 80a1252:	bd30      	pop	{r4, r5, pc}
 80a1254:	080a294c 	.word	0x080a294c

080a1258 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1258:	4b01      	ldr	r3, [pc, #4]	; (80a1260 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a125a:	4a02      	ldr	r2, [pc, #8]	; (80a1264 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a125c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a125e:	4770      	bx	lr
 80a1260:	20000178 	.word	0x20000178
 80a1264:	080a2958 	.word	0x080a2958

080a1268 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1268:	2300      	movs	r3, #0
 80a126a:	6840      	ldr	r0, [r0, #4]
 80a126c:	461a      	mov	r2, r3
 80a126e:	f7ff be85 	b.w	80a0f7c <network_connect>

080a1272 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1272:	2200      	movs	r2, #0
 80a1274:	2102      	movs	r1, #2
 80a1276:	6840      	ldr	r0, [r0, #4]
 80a1278:	f7ff be90 	b.w	80a0f9c <network_disconnect>

080a127c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a127c:	2200      	movs	r2, #0
 80a127e:	6840      	ldr	r0, [r0, #4]
 80a1280:	4611      	mov	r1, r2
 80a1282:	f7ff be83 	b.w	80a0f8c <network_connecting>

080a1286 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1286:	2200      	movs	r2, #0
 80a1288:	6840      	ldr	r0, [r0, #4]
 80a128a:	4611      	mov	r1, r2
 80a128c:	f7ff be8e 	b.w	80a0fac <network_ready>

080a1290 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1290:	2300      	movs	r3, #0
 80a1292:	6840      	ldr	r0, [r0, #4]
 80a1294:	461a      	mov	r2, r3
 80a1296:	4619      	mov	r1, r3
 80a1298:	f7ff be90 	b.w	80a0fbc <network_on>

080a129c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a129c:	2300      	movs	r3, #0
 80a129e:	6840      	ldr	r0, [r0, #4]
 80a12a0:	461a      	mov	r2, r3
 80a12a2:	4619      	mov	r1, r3
 80a12a4:	f7ff be92 	b.w	80a0fcc <network_off>

080a12a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a12a8:	2100      	movs	r1, #0
 80a12aa:	6840      	ldr	r0, [r0, #4]
 80a12ac:	f7ff beb6 	b.w	80a101c <network_is_on>

080a12b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a12b0:	2100      	movs	r1, #0
 80a12b2:	6840      	ldr	r0, [r0, #4]
 80a12b4:	f7ff beba 	b.w	80a102c <network_is_off>

080a12b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a12b8:	2200      	movs	r2, #0
 80a12ba:	6840      	ldr	r0, [r0, #4]
 80a12bc:	f081 0101 	eor.w	r1, r1, #1
 80a12c0:	f7ff be8c 	b.w	80a0fdc <network_listen>

080a12c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a12c4:	2200      	movs	r2, #0
 80a12c6:	6840      	ldr	r0, [r0, #4]
 80a12c8:	f7ff be98 	b.w	80a0ffc <network_set_listen_timeout>

080a12cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	6840      	ldr	r0, [r0, #4]
 80a12d0:	4611      	mov	r1, r2
 80a12d2:	f7ff be9b 	b.w	80a100c <network_get_listen_timeout>

080a12d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a12d6:	2200      	movs	r2, #0
 80a12d8:	6840      	ldr	r0, [r0, #4]
 80a12da:	4611      	mov	r1, r2
 80a12dc:	f7ff be86 	b.w	80a0fec <network_listening>

080a12e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a12e0:	b570      	push	{r4, r5, r6, lr}
 80a12e2:	4615      	mov	r5, r2
 80a12e4:	b08e      	sub	sp, #56	; 0x38
 80a12e6:	4604      	mov	r4, r0
    IPAddress addr;
 80a12e8:	a808      	add	r0, sp, #32
 80a12ea:	f7ff ff73 	bl	80a11d4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a12ee:	2211      	movs	r2, #17
 80a12f0:	2100      	movs	r1, #0
 80a12f2:	a803      	add	r0, sp, #12
 80a12f4:	f001 f99c 	bl	80a2630 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12f8:	2600      	movs	r6, #0
 80a12fa:	4628      	mov	r0, r5
 80a12fc:	f001 f9d6 	bl	80a26ac <strlen>
 80a1300:	4b0a      	ldr	r3, [pc, #40]	; (80a132c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1302:	9600      	str	r6, [sp, #0]
 80a1304:	b281      	uxth	r1, r0
 80a1306:	685b      	ldr	r3, [r3, #4]
 80a1308:	4628      	mov	r0, r5
 80a130a:	aa03      	add	r2, sp, #12
 80a130c:	f7ff fdea 	bl	80a0ee4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1310:	b130      	cbz	r0, 80a1320 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1312:	4631      	mov	r1, r6
 80a1314:	4620      	mov	r0, r4
 80a1316:	f7ff ff7d 	bl	80a1214 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a131a:	4620      	mov	r0, r4
 80a131c:	b00e      	add	sp, #56	; 0x38
 80a131e:	bd70      	pop	{r4, r5, r6, pc}
 80a1320:	4620      	mov	r0, r4
 80a1322:	a903      	add	r1, sp, #12
 80a1324:	f7ff ff64 	bl	80a11f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1328:	e7f7      	b.n	80a131a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a132a:	bf00      	nop
 80a132c:	20000600 	.word	0x20000600

080a1330 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1330:	4a03      	ldr	r2, [pc, #12]	; (80a1340 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1332:	4b04      	ldr	r3, [pc, #16]	; (80a1344 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1334:	2804      	cmp	r0, #4
 80a1336:	bf14      	ite	ne
 80a1338:	4610      	movne	r0, r2
 80a133a:	4618      	moveq	r0, r3
 80a133c:	4770      	bx	lr
 80a133e:	bf00      	nop
 80a1340:	2000017c 	.word	0x2000017c
 80a1344:	20000600 	.word	0x20000600

080a1348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1348:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a134a:	4a03      	ldr	r2, [pc, #12]	; (80a1358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a134c:	601a      	str	r2, [r3, #0]
 80a134e:	2200      	movs	r2, #0
 80a1350:	605a      	str	r2, [r3, #4]

} // spark
 80a1352:	4770      	bx	lr
 80a1354:	2000017c 	.word	0x2000017c
 80a1358:	080a2964 	.word	0x080a2964

080a135c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a135e:	4606      	mov	r6, r0
 80a1360:	460d      	mov	r5, r1
  size_t n = 0;
 80a1362:	2400      	movs	r4, #0
 80a1364:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1366:	42bd      	cmp	r5, r7
 80a1368:	d00c      	beq.n	80a1384 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a136a:	6833      	ldr	r3, [r6, #0]
 80a136c:	4630      	mov	r0, r6
 80a136e:	689b      	ldr	r3, [r3, #8]
 80a1370:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1374:	4798      	blx	r3
     if (chunk>=0)
 80a1376:	1e03      	subs	r3, r0, #0
 80a1378:	db01      	blt.n	80a137e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a137a:	441c      	add	r4, r3
  while (size--) {
 80a137c:	e7f3      	b.n	80a1366 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a137e:	2c00      	cmp	r4, #0
 80a1380:	bf08      	it	eq
 80a1382:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1384:	4620      	mov	r0, r4
 80a1386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1388 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1388:	b570      	push	{r4, r5, r6, lr}
 80a138a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a138c:	460c      	mov	r4, r1
    }
 80a138e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1390:	b149      	cbz	r1, 80a13a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1392:	f001 f98b 	bl	80a26ac <strlen>
 80a1396:	682b      	ldr	r3, [r5, #0]
 80a1398:	4602      	mov	r2, r0
 80a139a:	4621      	mov	r1, r4
 80a139c:	4628      	mov	r0, r5
    }
 80a139e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a13a2:	68db      	ldr	r3, [r3, #12]
 80a13a4:	4718      	bx	r3
    }
 80a13a6:	bd70      	pop	{r4, r5, r6, pc}

080a13a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a13a8:	6803      	ldr	r3, [r0, #0]
 80a13aa:	689b      	ldr	r3, [r3, #8]
 80a13ac:	4718      	bx	r3

080a13ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a13ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a13b0:	210d      	movs	r1, #13
{
 80a13b2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a13b4:	f7ff fff8 	bl	80a13a8 <_ZN5Print5printEc>
  n += print('\n');
 80a13b8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a13ba:	4604      	mov	r4, r0
  n += print('\n');
 80a13bc:	4628      	mov	r0, r5
 80a13be:	f7ff fff3 	bl	80a13a8 <_ZN5Print5printEc>
  return n;
}
 80a13c2:	4420      	add	r0, r4
 80a13c4:	bd38      	pop	{r3, r4, r5, pc}

080a13c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a13c6:	b538      	push	{r3, r4, r5, lr}
 80a13c8:	4605      	mov	r5, r0
  return write(str);
 80a13ca:	f7ff ffdd 	bl	80a1388 <_ZN5Print5writeEPKc>
 80a13ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a13d0:	4628      	mov	r0, r5
 80a13d2:	f7ff ffec 	bl	80a13ae <_ZN5Print7printlnEv>
  return n;
}
 80a13d6:	4420      	add	r0, r4
 80a13d8:	bd38      	pop	{r3, r4, r5, pc}

080a13da <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a13da:	f7ff bff4 	b.w	80a13c6 <_ZN5Print7printlnEPKc>

080a13de <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a13de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a13e0:	2a01      	cmp	r2, #1
 80a13e2:	bf98      	it	ls
 80a13e4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a13e6:	b530      	push	{r4, r5, lr}
 80a13e8:	b08b      	sub	sp, #44	; 0x2c
 80a13ea:	460c      	mov	r4, r1
  *str = '\0';
 80a13ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a13f0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a13f2:	4625      	mov	r5, r4
 80a13f4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a13f8:	fb04 5312 	mls	r3, r4, r2, r5
 80a13fc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a13fe:	2b09      	cmp	r3, #9
 80a1400:	bf94      	ite	ls
 80a1402:	3330      	addls	r3, #48	; 0x30
 80a1404:	3337      	addhi	r3, #55	; 0x37
 80a1406:	b2db      	uxtb	r3, r3
  } while(n);
 80a1408:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a140a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a140e:	d9f0      	bls.n	80a13f2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1410:	f7ff ffba 	bl	80a1388 <_ZN5Print5writeEPKc>
}
 80a1414:	b00b      	add	sp, #44	; 0x2c
 80a1416:	bd30      	pop	{r4, r5, pc}

080a1418 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a141c:	b086      	sub	sp, #24
 80a141e:	af00      	add	r7, sp, #0
 80a1420:	4605      	mov	r5, r0
 80a1422:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1424:	1d38      	adds	r0, r7, #4
 80a1426:	2114      	movs	r1, #20
{
 80a1428:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a142a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a142c:	f7ff fe1e 	bl	80a106c <vsnprintf>

    if (n<bufsize)
 80a1430:	2813      	cmp	r0, #19
 80a1432:	d80e      	bhi.n	80a1452 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a1434:	4628      	mov	r0, r5
 80a1436:	1d39      	adds	r1, r7, #4
 80a1438:	f7ff ffa6 	bl	80a1388 <_ZN5Print5writeEPKc>
 80a143c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a143e:	b11e      	cbz	r6, 80a1448 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1440:	4628      	mov	r0, r5
 80a1442:	f7ff ffb4 	bl	80a13ae <_ZN5Print7printlnEv>
 80a1446:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1448:	4620      	mov	r0, r4
 80a144a:	3718      	adds	r7, #24
 80a144c:	46bd      	mov	sp, r7
 80a144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a1452:	f100 0308 	add.w	r3, r0, #8
 80a1456:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a145a:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a145c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1460:	4622      	mov	r2, r4
 80a1462:	1c41      	adds	r1, r0, #1
 80a1464:	683b      	ldr	r3, [r7, #0]
 80a1466:	4668      	mov	r0, sp
 80a1468:	f7ff fe00 	bl	80a106c <vsnprintf>
  return write(str);
 80a146c:	4669      	mov	r1, sp
 80a146e:	4628      	mov	r0, r5
 80a1470:	f7ff ff8a 	bl	80a1388 <_ZN5Print5writeEPKc>
 80a1474:	4604      	mov	r4, r0
 80a1476:	46c5      	mov	sp, r8
 80a1478:	e7e1      	b.n	80a143e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

080a147c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a147c:	2200      	movs	r2, #0
 80a147e:	4b01      	ldr	r3, [pc, #4]	; (80a1484 <_GLOBAL__sub_I_RGB+0x8>)
 80a1480:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1482:	4770      	bx	lr
 80a1484:	20000184 	.word	0x20000184

080a1488 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1488:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a148a:	2600      	movs	r6, #0
 80a148c:	4604      	mov	r4, r0
 80a148e:	460d      	mov	r5, r1
 80a1490:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1494:	f7ff fb9a 	bl	80a0bcc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1498:	4628      	mov	r0, r5
    _spi = spi;
 80a149a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a149c:	f7ff fc8a 	bl	80a0db4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a14a0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a14a2:	6066      	str	r6, [r4, #4]
}
 80a14a4:	bd70      	pop	{r4, r5, r6, pc}

080a14a6 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
 80a14a6:	4770      	bx	lr

080a14a8 <_ZN21StringPrintableHelperD0Ev>:
 80a14a8:	b510      	push	{r4, lr}
 80a14aa:	4604      	mov	r4, r0
 80a14ac:	210c      	movs	r1, #12
 80a14ae:	f000 ff93 	bl	80a23d8 <_ZdlPvj>
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	bd10      	pop	{r4, pc}

080a14b6 <_ZN6StringD1Ev>:
String::~String()
 80a14b6:	b510      	push	{r4, lr}
 80a14b8:	4604      	mov	r4, r0
	free(buffer);
 80a14ba:	6800      	ldr	r0, [r0, #0]
 80a14bc:	f7ff fdc6 	bl	80a104c <free>
}
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	bd10      	pop	{r4, pc}

080a14c4 <_ZN6String12changeBufferEj>:
{
 80a14c4:	b538      	push	{r3, r4, r5, lr}
 80a14c6:	4604      	mov	r4, r0
 80a14c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a14ca:	6800      	ldr	r0, [r0, #0]
 80a14cc:	3101      	adds	r1, #1
 80a14ce:	f7ff fdc5 	bl	80a105c <realloc>
	if (newbuffer) {
 80a14d2:	b110      	cbz	r0, 80a14da <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
 80a14d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a14d8:	2001      	movs	r0, #1
}
 80a14da:	bd38      	pop	{r3, r4, r5, pc}

080a14dc <_ZN6String7reserveEj>:
{
 80a14dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a14de:	6803      	ldr	r3, [r0, #0]
{
 80a14e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a14e2:	b123      	cbz	r3, 80a14ee <_ZN6String7reserveEj+0x12>
 80a14e4:	6843      	ldr	r3, [r0, #4]
 80a14e6:	428b      	cmp	r3, r1
 80a14e8:	d301      	bcc.n	80a14ee <_ZN6String7reserveEj+0x12>
 80a14ea:	2001      	movs	r0, #1
}
 80a14ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a14ee:	4620      	mov	r0, r4
 80a14f0:	f7ff ffe8 	bl	80a14c4 <_ZN6String12changeBufferEj>
 80a14f4:	2800      	cmp	r0, #0
 80a14f6:	d0f9      	beq.n	80a14ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a14f8:	68a3      	ldr	r3, [r4, #8]
 80a14fa:	2b00      	cmp	r3, #0
 80a14fc:	d1f5      	bne.n	80a14ea <_ZN6String7reserveEj+0xe>
 80a14fe:	6822      	ldr	r2, [r4, #0]
 80a1500:	7013      	strb	r3, [r2, #0]
 80a1502:	e7f2      	b.n	80a14ea <_ZN6String7reserveEj+0xe>

080a1504 <_ZN6String6concatEPKcj>:
{
 80a1504:	b570      	push	{r4, r5, r6, lr}
 80a1506:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a1508:	460e      	mov	r6, r1
 80a150a:	b909      	cbnz	r1, 80a1510 <_ZN6String6concatEPKcj+0xc>
 80a150c:	2000      	movs	r0, #0
}
 80a150e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1510:	b16a      	cbz	r2, 80a152e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1512:	6884      	ldr	r4, [r0, #8]
 80a1514:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1516:	4621      	mov	r1, r4
 80a1518:	f7ff ffe0 	bl	80a14dc <_ZN6String7reserveEj>
 80a151c:	2800      	cmp	r0, #0
 80a151e:	d0f5      	beq.n	80a150c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1520:	6828      	ldr	r0, [r5, #0]
 80a1522:	68ab      	ldr	r3, [r5, #8]
 80a1524:	4631      	mov	r1, r6
 80a1526:	4418      	add	r0, r3
 80a1528:	f001 f8b8 	bl	80a269c <strcpy>
	len = newlen;
 80a152c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a152e:	2001      	movs	r0, #1
 80a1530:	e7ed      	b.n	80a150e <_ZN6String6concatEPKcj+0xa>

080a1532 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
 80a1532:	b538      	push	{r3, r4, r5, lr}
 80a1534:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
 80a1536:	6880      	ldr	r0, [r0, #8]
 80a1538:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
 80a153a:	f7ff ffe3 	bl	80a1504 <_ZN6String6concatEPKcj>
        return s.length()-len;
 80a153e:	68a3      	ldr	r3, [r4, #8]
 80a1540:	6898      	ldr	r0, [r3, #8]
    }
 80a1542:	1b40      	subs	r0, r0, r5
 80a1544:	bd38      	pop	{r3, r4, r5, pc}

080a1546 <_ZN6String6concatEc>:
	buf[1] = 0;
 80a1546:	2300      	movs	r3, #0
{
 80a1548:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a154a:	2201      	movs	r2, #1
	buf[0] = c;
 80a154c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a1550:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a1552:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a1556:	f7ff ffd5 	bl	80a1504 <_ZN6String6concatEPKcj>
}
 80a155a:	b003      	add	sp, #12
 80a155c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1560 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
 80a1560:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
 80a1562:	6880      	ldr	r0, [r0, #8]
 80a1564:	f7ff ffef 	bl	80a1546 <_ZN6String6concatEc>
    }
 80a1568:	bd08      	pop	{r3, pc}
	...

080a156c <_ZN6StringC1ERK9Printable>:
	buffer = NULL;
 80a156c:	2300      	movs	r3, #0
};

String::String(const Printable& printable)
 80a156e:	b530      	push	{r4, r5, lr}
 80a1570:	460d      	mov	r5, r1
 80a1572:	4604      	mov	r4, r0
 80a1574:	b085      	sub	sp, #20
    Print() : write_error(0) {}
 80a1576:	9302      	str	r3, [sp, #8]
	capacity = 0;
 80a1578:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a157c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a157e:	7303      	strb	r3, [r0, #12]
    StringPrintableHelper(String& s_) : s(s_) {
 80a1580:	4b06      	ldr	r3, [pc, #24]	; (80a159c <_ZN6StringC1ERK9Printable+0x30>)
        s.reserve(20);
 80a1582:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	9003      	str	r0, [sp, #12]
        s.reserve(20);
 80a1588:	f7ff ffa8 	bl	80a14dc <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
 80a158c:	682b      	ldr	r3, [r5, #0]
 80a158e:	4628      	mov	r0, r5
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	a901      	add	r1, sp, #4
 80a1594:	4798      	blx	r3
}
 80a1596:	4620      	mov	r0, r4
 80a1598:	b005      	add	sp, #20
 80a159a:	bd30      	pop	{r4, r5, pc}
 80a159c:	080a29a0 	.word	0x080a29a0

080a15a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a15a0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a15a2:	2000      	movs	r0, #0
 80a15a4:	4b04      	ldr	r3, [pc, #16]	; (80a15b8 <_GLOBAL__sub_I_System+0x18>)
 80a15a6:	601a      	str	r2, [r3, #0]
 80a15a8:	4b04      	ldr	r3, [pc, #16]	; (80a15bc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a15aa:	4a05      	ldr	r2, [pc, #20]	; (80a15c0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a15ac:	6018      	str	r0, [r3, #0]
 80a15ae:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a15b0:	7198      	strb	r0, [r3, #6]
 80a15b2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a15b4:	f7ff bcae 	b.w	80a0f14 <set_system_mode>
 80a15b8:	200001a0 	.word	0x200001a0
 80a15bc:	20000194 	.word	0x20000194
 80a15c0:	ffff0000 	.word	0xffff0000

080a15c4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a15c4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a15c6:	6803      	ldr	r3, [r0, #0]
{
 80a15c8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a15cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a15ce:	2201      	movs	r2, #1
 80a15d0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a15d4:	f10d 0107 	add.w	r1, sp, #7
 80a15d8:	47a0      	blx	r4
}
 80a15da:	b002      	add	sp, #8
 80a15dc:	bd10      	pop	{r4, pc}

080a15de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a15de:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a15e0:	6803      	ldr	r3, [r0, #0]
 80a15e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a15e4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a15e8:	46a4      	mov	ip, r4
}
 80a15ea:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a15ec:	4760      	bx	ip

080a15ee <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a15ee:	b513      	push	{r0, r1, r4, lr}
 80a15f0:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a15f2:	6802      	ldr	r2, [r0, #0]
{
 80a15f4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a15f8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a15fa:	f10d 0107 	add.w	r1, sp, #7
 80a15fe:	2201      	movs	r2, #1
 80a1600:	47a0      	blx	r4
}
 80a1602:	b002      	add	sp, #8
 80a1604:	bd10      	pop	{r4, pc}

080a1606 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a1606:	4770      	bx	lr

080a1608 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1608:	4770      	bx	lr
	...

080a160c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a160c:	b510      	push	{r4, lr}
 80a160e:	4604      	mov	r4, r0
	    ||
 80a1610:	4b06      	ldr	r3, [pc, #24]	; (80a162c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1612:	4608      	mov	r0, r1
	    ||
 80a1614:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a1616:	f104 040c 	add.w	r4, r4, #12
 80a161a:	d004      	beq.n	80a1626 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a161c:	f000 fee0 	bl	80a23e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a1620:	2800      	cmp	r0, #0
	return nullptr;
 80a1622:	bf08      	it	eq
 80a1624:	2400      	moveq	r4, #0
      }
 80a1626:	4620      	mov	r0, r4
 80a1628:	bd10      	pop	{r4, pc}
 80a162a:	bf00      	nop
 80a162c:	080a29e8 	.word	0x080a29e8

080a1630 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1630:	b510      	push	{r4, lr}
 80a1632:	4604      	mov	r4, r0
 80a1634:	21ac      	movs	r1, #172	; 0xac
 80a1636:	f000 fecf 	bl	80a23d8 <_ZdlPvj>
 80a163a:	4620      	mov	r0, r4
 80a163c:	bd10      	pop	{r4, pc}

080a163e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a163e:	f7fe bd2e 	b.w	80a009e <_ZdlPv>
	...

080a1644 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a1644:	b538      	push	{r3, r4, r5, lr}
 80a1646:	4b0b      	ldr	r3, [pc, #44]	; (80a1674 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a1648:	6984      	ldr	r4, [r0, #24]
 80a164a:	4605      	mov	r5, r0
 80a164c:	6003      	str	r3, [r0, #0]
 80a164e:	b17c      	cbz	r4, 80a1670 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1650:	6863      	ldr	r3, [r4, #4]
 80a1652:	3b01      	subs	r3, #1
 80a1654:	6063      	str	r3, [r4, #4]
 80a1656:	b95b      	cbnz	r3, 80a1670 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a1658:	6823      	ldr	r3, [r4, #0]
 80a165a:	4620      	mov	r0, r4
 80a165c:	689b      	ldr	r3, [r3, #8]
 80a165e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1660:	68a3      	ldr	r3, [r4, #8]
 80a1662:	3b01      	subs	r3, #1
 80a1664:	60a3      	str	r3, [r4, #8]
 80a1666:	b91b      	cbnz	r3, 80a1670 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1668:	6823      	ldr	r3, [r4, #0]
 80a166a:	4620      	mov	r0, r4
 80a166c:	68db      	ldr	r3, [r3, #12]
 80a166e:	4798      	blx	r3
 80a1670:	4628      	mov	r0, r5
 80a1672:	bd38      	pop	{r3, r4, r5, pc}
 80a1674:	080a29f8 	.word	0x080a29f8

080a1678 <_ZN9TCPClientD0Ev>:
 80a1678:	b510      	push	{r4, lr}
 80a167a:	4604      	mov	r4, r0
 80a167c:	f7ff ffe2 	bl	80a1644 <_ZN9TCPClientD1Ev>
 80a1680:	4620      	mov	r0, r4
 80a1682:	211c      	movs	r1, #28
 80a1684:	f000 fea8 	bl	80a23d8 <_ZdlPvj>
 80a1688:	4620      	mov	r0, r4
 80a168a:	bd10      	pop	{r4, pc}

080a168c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a168c:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a168e:	4604      	mov	r4, r0
 80a1690:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1692:	694d      	ldr	r5, [r1, #20]
 80a1694:	4b04      	ldr	r3, [pc, #16]	; (80a16a8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1696:	358c      	adds	r5, #140	; 0x8c
 80a1698:	f844 3b04 	str.w	r3, [r4], #4
 80a169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a16a0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a16a2:	4630      	mov	r0, r6
 80a16a4:	7023      	strb	r3, [r4, #0]
 80a16a6:	bd70      	pop	{r4, r5, r6, pc}
 80a16a8:	080a294c 	.word	0x080a294c

080a16ac <_ZN9TCPClient4peekEv>:
{
 80a16ac:	b510      	push	{r4, lr}
 80a16ae:	6943      	ldr	r3, [r0, #20]
 80a16b0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a16b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a16b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a16ba:	429a      	cmp	r2, r3
 80a16bc:	d005      	beq.n	80a16ca <_ZN9TCPClient4peekEv+0x1e>
 80a16be:	6963      	ldr	r3, [r4, #20]
 80a16c0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a16c4:	4413      	add	r3, r2
 80a16c6:	7918      	ldrb	r0, [r3, #4]
}
 80a16c8:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a16ca:	6803      	ldr	r3, [r0, #0]
 80a16cc:	691b      	ldr	r3, [r3, #16]
 80a16ce:	4798      	blx	r3
 80a16d0:	2800      	cmp	r0, #0
 80a16d2:	d1f4      	bne.n	80a16be <_ZN9TCPClient4peekEv+0x12>
 80a16d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a16d8:	e7f6      	b.n	80a16c8 <_ZN9TCPClient4peekEv+0x1c>

080a16da <_ZN9TCPClient4readEv>:
{
 80a16da:	b510      	push	{r4, lr}
 80a16dc:	6943      	ldr	r3, [r0, #20]
 80a16de:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a16e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a16e4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a16e8:	429a      	cmp	r2, r3
 80a16ea:	d008      	beq.n	80a16fe <_ZN9TCPClient4readEv+0x24>
 80a16ec:	6963      	ldr	r3, [r4, #20]
 80a16ee:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a16f2:	1c51      	adds	r1, r2, #1
 80a16f4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a16f8:	4413      	add	r3, r2
 80a16fa:	7918      	ldrb	r0, [r3, #4]
}
 80a16fc:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a16fe:	6803      	ldr	r3, [r0, #0]
 80a1700:	691b      	ldr	r3, [r3, #16]
 80a1702:	4798      	blx	r3
 80a1704:	2800      	cmp	r0, #0
 80a1706:	d1f1      	bne.n	80a16ec <_ZN9TCPClient4readEv+0x12>
 80a1708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a170c:	e7f6      	b.n	80a16fc <_ZN9TCPClient4readEv+0x22>

080a170e <_ZN9TCPClient4readEPhj>:
{
 80a170e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1710:	6943      	ldr	r3, [r0, #20]
 80a1712:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a1714:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1718:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a171c:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a171e:	429a      	cmp	r2, r3
{
 80a1720:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a1722:	d016      	beq.n	80a1752 <_ZN9TCPClient4readEPhj+0x44>
 80a1724:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1726:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a1728:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a172c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a1730:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1732:	42bc      	cmp	r4, r7
 80a1734:	bf28      	it	cs
 80a1736:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1738:	3304      	adds	r3, #4
 80a173a:	4622      	mov	r2, r4
 80a173c:	4419      	add	r1, r3
 80a173e:	f000 ff69 	bl	80a2614 <memcpy>
 80a1742:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1744:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1748:	4423      	add	r3, r4
 80a174a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a174e:	4620      	mov	r0, r4
 80a1750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a1752:	6803      	ldr	r3, [r0, #0]
 80a1754:	691b      	ldr	r3, [r3, #16]
 80a1756:	4798      	blx	r3
 80a1758:	2800      	cmp	r0, #0
 80a175a:	d1e3      	bne.n	80a1724 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a175c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1760:	e7f5      	b.n	80a174e <_ZN9TCPClient4readEPhj+0x40>

080a1762 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a1762:	2300      	movs	r3, #0
 80a1764:	6942      	ldr	r2, [r0, #20]
 80a1766:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a176a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a176c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a1770:	4770      	bx	lr
	...

080a1774 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a1774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1778:	461f      	mov	r7, r3
    stop();
 80a177a:	6803      	ldr	r3, [r0, #0]
{
 80a177c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1780:	4605      	mov	r5, r0
 80a1782:	460c      	mov	r4, r1
 80a1784:	4616      	mov	r6, r2
    stop();
 80a1786:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a1788:	4638      	mov	r0, r7
 80a178a:	f7ff fdd1 	bl	80a1330 <_ZN5spark12NetworkClass4fromEm>
 80a178e:	6803      	ldr	r3, [r0, #0]
 80a1790:	68db      	ldr	r3, [r3, #12]
 80a1792:	4798      	blx	r3
 80a1794:	2800      	cmp	r0, #0
 80a1796:	d054      	beq.n	80a1842 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1798:	4633      	mov	r3, r6
 80a179a:	2206      	movs	r2, #6
 80a179c:	2101      	movs	r1, #1
 80a179e:	2002      	movs	r0, #2
 80a17a0:	9700      	str	r7, [sp, #0]
 80a17a2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a17a6:	f7ff fabd 	bl	80a0d24 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a17aa:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a17ac:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a17b0:	f04f 0800 	mov.w	r8, #0
 80a17b4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a17b8:	696b      	ldr	r3, [r5, #20]
 80a17ba:	2001      	movs	r0, #1
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	4923      	ldr	r1, [pc, #140]	; (80a184c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	4b23      	ldr	r3, [pc, #140]	; (80a1850 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a17c4:	aa02      	add	r2, sp, #8
 80a17c6:	9300      	str	r3, [sp, #0]
 80a17c8:	4643      	mov	r3, r8
 80a17ca:	f7ff fb9b 	bl	80a0f04 <log_message>
          if (socket_handle_valid(d_->sock))
 80a17ce:	696b      	ldr	r3, [r5, #20]
 80a17d0:	6818      	ldr	r0, [r3, #0]
 80a17d2:	f7ff fa9f 	bl	80a0d14 <socket_handle_valid>
 80a17d6:	2800      	cmp	r0, #0
 80a17d8:	d033      	beq.n	80a1842 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a17da:	4628      	mov	r0, r5
 80a17dc:	f7ff ffc1 	bl	80a1762 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a17e0:	2302      	movs	r3, #2
 80a17e2:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a17e6:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a17e8:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a17ea:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a17ee:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a17f0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a17f4:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a17f8:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a17fa:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a17fe:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1802:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1806:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a180a:	f7ff fb63 	bl	80a0ed4 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a180e:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1810:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1812:	2210      	movs	r2, #16
 80a1814:	6818      	ldr	r0, [r3, #0]
 80a1816:	a902      	add	r1, sp, #8
 80a1818:	f7ff fa8c 	bl	80a0d34 <socket_connect>
 80a181c:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a181e:	4630      	mov	r0, r6
 80a1820:	f7ff fb58 	bl	80a0ed4 <HAL_NET_SetNetWatchDog>
 80a1824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1826:	696e      	ldr	r6, [r5, #20]
 80a1828:	368c      	adds	r6, #140	; 0x8c
 80a182a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a182c:	6823      	ldr	r3, [r4, #0]
 80a182e:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a1830:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a1832:	f1b9 0f00 	cmp.w	r9, #0
 80a1836:	d007      	beq.n	80a1848 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a1838:	682b      	ldr	r3, [r5, #0]
 80a183a:	4628      	mov	r0, r5
 80a183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a183e:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1840:	4640      	mov	r0, r8
}
 80a1842:	b00b      	add	sp, #44	; 0x2c
 80a1844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1848:	2001      	movs	r0, #1
        return connected;
 80a184a:	e7fa      	b.n	80a1842 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a184c:	080a29b0 	.word	0x080a29b0
 80a1850:	080a29b7 	.word	0x080a29b7

080a1854 <_ZN9TCPClient9availableEv>:
{
 80a1854:	b538      	push	{r3, r4, r5, lr}
 80a1856:	6942      	ldr	r2, [r0, #20]
 80a1858:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a185a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a185e:	b12b      	cbz	r3, 80a186c <_ZN9TCPClient9availableEv+0x18>
 80a1860:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1864:	429a      	cmp	r2, r3
 80a1866:	d101      	bne.n	80a186c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a1868:	f7ff ff7b 	bl	80a1762 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a186c:	6920      	ldr	r0, [r4, #16]
 80a186e:	f7ff fd5f 	bl	80a1330 <_ZN5spark12NetworkClass4fromEm>
 80a1872:	6803      	ldr	r3, [r0, #0]
 80a1874:	68db      	ldr	r3, [r3, #12]
 80a1876:	4798      	blx	r3
 80a1878:	b1f8      	cbz	r0, 80a18ba <_ZN9TCPClient9availableEv+0x66>
 80a187a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a187c:	6818      	ldr	r0, [r3, #0]
 80a187e:	f7ff fa49 	bl	80a0d14 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1882:	b1d0      	cbz	r0, 80a18ba <_ZN9TCPClient9availableEv+0x66>
 80a1884:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a1886:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a188a:	297f      	cmp	r1, #127	; 0x7f
 80a188c:	d815      	bhi.n	80a18ba <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a188e:	1d05      	adds	r5, r0, #4
 80a1890:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1894:	2300      	movs	r3, #0
 80a1896:	6800      	ldr	r0, [r0, #0]
 80a1898:	4429      	add	r1, r5
 80a189a:	f7ff fa53 	bl	80a0d44 <socket_receive>
            if (ret > 0)
 80a189e:	2800      	cmp	r0, #0
 80a18a0:	dd0b      	ble.n	80a18ba <_ZN9TCPClient9availableEv+0x66>
 80a18a2:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a18a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a18a8:	b90a      	cbnz	r2, 80a18ae <_ZN9TCPClient9availableEv+0x5a>
 80a18aa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a18ae:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a18b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a18b4:	4410      	add	r0, r2
 80a18b6:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a18ba:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a18bc:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a18c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a18c4:	1ac0      	subs	r0, r0, r3
 80a18c6:	bd38      	pop	{r3, r4, r5, pc}

080a18c8 <_ZN9TCPClient4stopEv>:
{
 80a18c8:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a18ca:	6943      	ldr	r3, [r0, #20]
{
 80a18cc:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a18ce:	6818      	ldr	r0, [r3, #0]
 80a18d0:	f7ff fa20 	bl	80a0d14 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a18d4:	b118      	cbz	r0, 80a18de <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a18d6:	6963      	ldr	r3, [r4, #20]
 80a18d8:	6818      	ldr	r0, [r3, #0]
 80a18da:	f7ff fa3b 	bl	80a0d54 <socket_close>
 80a18de:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a18e0:	f7ff fa50 	bl	80a0d84 <socket_handle_invalid>
 80a18e4:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a18e6:	6960      	ldr	r0, [r4, #20]
 80a18e8:	2211      	movs	r2, #17
 80a18ea:	2100      	movs	r1, #0
 80a18ec:	308c      	adds	r0, #140	; 0x8c
 80a18ee:	f000 fe9f 	bl	80a2630 <memset>
  flush_buffer();
 80a18f2:	4620      	mov	r0, r4
}
 80a18f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a18f8:	f7ff bf33 	b.w	80a1762 <_ZN9TCPClient12flush_bufferEv>

080a18fc <_ZN9TCPClient6statusEv>:
{
 80a18fc:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a18fe:	6943      	ldr	r3, [r0, #20]
{
 80a1900:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a1902:	6818      	ldr	r0, [r3, #0]
 80a1904:	f7ff fa06 	bl	80a0d14 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1908:	b908      	cbnz	r0, 80a190e <_ZN9TCPClient6statusEv+0x12>
 80a190a:	2000      	movs	r0, #0
}
 80a190c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a190e:	6920      	ldr	r0, [r4, #16]
 80a1910:	f7ff fd0e 	bl	80a1330 <_ZN5spark12NetworkClass4fromEm>
 80a1914:	6803      	ldr	r3, [r0, #0]
 80a1916:	68db      	ldr	r3, [r3, #12]
 80a1918:	4798      	blx	r3
 80a191a:	2800      	cmp	r0, #0
 80a191c:	d0f5      	beq.n	80a190a <_ZN9TCPClient6statusEv+0xe>
 80a191e:	6963      	ldr	r3, [r4, #20]
 80a1920:	6818      	ldr	r0, [r3, #0]
 80a1922:	f7ff f9ef 	bl	80a0d04 <socket_active_status>
 80a1926:	fab0 f080 	clz	r0, r0
 80a192a:	0940      	lsrs	r0, r0, #5
 80a192c:	e7ee      	b.n	80a190c <_ZN9TCPClient6statusEv+0x10>

080a192e <_ZN9TCPClientcvbEv>:
{
 80a192e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1930:	f7ff ffe4 	bl	80a18fc <_ZN9TCPClient6statusEv>
}
 80a1934:	3800      	subs	r0, #0
 80a1936:	bf18      	it	ne
 80a1938:	2001      	movne	r0, #1
 80a193a:	bd08      	pop	{r3, pc}

080a193c <_ZN9TCPClient5writeEPKhjm>:
{
 80a193c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a1940:	2700      	movs	r7, #0
 80a1942:	6047      	str	r7, [r0, #4]
 80a1944:	4604      	mov	r4, r0
 80a1946:	460d      	mov	r5, r1
 80a1948:	4616      	mov	r6, r2
 80a194a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a194c:	f7ff ffd6 	bl	80a18fc <_ZN9TCPClient6statusEv>
 80a1950:	b170      	cbz	r0, 80a1970 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a1952:	e9cd 8700 	strd	r8, r7, [sp]
 80a1956:	6960      	ldr	r0, [r4, #20]
 80a1958:	463b      	mov	r3, r7
 80a195a:	4632      	mov	r2, r6
 80a195c:	4629      	mov	r1, r5
 80a195e:	6800      	ldr	r0, [r0, #0]
 80a1960:	f7ff fa20 	bl	80a0da4 <socket_send_ex>
    if (ret < 0) {
 80a1964:	2800      	cmp	r0, #0
 80a1966:	da00      	bge.n	80a196a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a1968:	6060      	str	r0, [r4, #4]
}
 80a196a:	b002      	add	sp, #8
 80a196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1974:	e7f8      	b.n	80a1968 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a1976 <_ZN9TCPClient9connectedEv>:
{
 80a1976:	b570      	push	{r4, r5, r6, lr}
 80a1978:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a197a:	f7ff ffbf 	bl	80a18fc <_ZN9TCPClient6statusEv>
 80a197e:	b9e8      	cbnz	r0, 80a19bc <_ZN9TCPClient9connectedEv+0x46>
 80a1980:	696b      	ldr	r3, [r5, #20]
 80a1982:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1986:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a198a:	4291      	cmp	r1, r2
 80a198c:	d116      	bne.n	80a19bc <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a198e:	6818      	ldr	r0, [r3, #0]
 80a1990:	f7ff f9c0 	bl	80a0d14 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1994:	b908      	cbnz	r0, 80a199a <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a1996:	2000      	movs	r0, #0
}
 80a1998:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a199a:	696b      	ldr	r3, [r5, #20]
 80a199c:	6818      	ldr	r0, [r3, #0]
 80a199e:	f7ff f9b1 	bl	80a0d04 <socket_active_status>
 80a19a2:	2801      	cmp	r0, #1
 80a19a4:	4604      	mov	r4, r0
 80a19a6:	d1f6      	bne.n	80a1996 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a19a8:	682b      	ldr	r3, [r5, #0]
 80a19aa:	4628      	mov	r0, r5
 80a19ac:	691b      	ldr	r3, [r3, #16]
 80a19ae:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a19b0:	b930      	cbnz	r0, 80a19c0 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a19b2:	682b      	ldr	r3, [r5, #0]
 80a19b4:	4628      	mov	r0, r5
 80a19b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a19b8:	4798      	blx	r3
 80a19ba:	e7ec      	b.n	80a1996 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a19bc:	2001      	movs	r0, #1
 80a19be:	e7eb      	b.n	80a1998 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a19c0:	4620      	mov	r0, r4
 80a19c2:	e7e9      	b.n	80a1998 <_ZN9TCPClient9connectedEv+0x22>

080a19c4 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a19c4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a19c6:	b510      	push	{r4, lr}
 80a19c8:	4604      	mov	r4, r0
          total(0) {
 80a19ca:	6001      	str	r1, [r0, #0]
 80a19cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a19d0:	3088      	adds	r0, #136	; 0x88
 80a19d2:	f7ff fbff 	bl	80a11d4 <_ZN9IPAddressC1Ev>
}
 80a19d6:	4620      	mov	r0, r4
 80a19d8:	bd10      	pop	{r4, pc}
	...

080a19dc <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a19dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a19e2:	2300      	movs	r3, #0
 80a19e4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a19e8:	4a0d      	ldr	r2, [pc, #52]	; (80a1a20 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a19ea:	6103      	str	r3, [r0, #16]
 80a19ec:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a19ee:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a19f0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a19f2:	20ac      	movs	r0, #172	; 0xac
 80a19f4:	460e      	mov	r6, r1
 80a19f6:	f7fe fb4e 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a19fa:	1e05      	subs	r5, r0, #0
 80a19fc:	f105 070c 	add.w	r7, r5, #12
 80a1a00:	d008      	beq.n	80a1a14 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1a02:	2301      	movs	r3, #1
 80a1a04:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a1a08:	4b06      	ldr	r3, [pc, #24]	; (80a1a24 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1a0a:	4631      	mov	r1, r6
 80a1a0c:	4638      	mov	r0, r7
 80a1a0e:	602b      	str	r3, [r5, #0]
 80a1a10:	f7ff ffd8 	bl	80a19c4 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a1a14:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a1a16:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a1a1a:	f7ff fea2 	bl	80a1762 <_ZN9TCPClient12flush_bufferEv>
}
 80a1a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1a20:	080a29f8 	.word	0x080a29f8
 80a1a24:	080a29d4 	.word	0x080a29d4

080a1a28 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1a28:	b510      	push	{r4, lr}
 80a1a2a:	4604      	mov	r4, r0
 80a1a2c:	f7ff f9aa 	bl	80a0d84 <socket_handle_invalid>
 80a1a30:	4601      	mov	r1, r0
 80a1a32:	4620      	mov	r0, r4
 80a1a34:	f7ff ffd2 	bl	80a19dc <_ZN9TCPClientC1Em>
}
 80a1a38:	4620      	mov	r0, r4
 80a1a3a:	bd10      	pop	{r4, pc}

080a1a3c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a1a3c:	b510      	push	{r4, lr}
 80a1a3e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1a40:	6800      	ldr	r0, [r0, #0]
 80a1a42:	f7ff f967 	bl	80a0d14 <socket_handle_valid>
 80a1a46:	b110      	cbz	r0, 80a1a4e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1a48:	6820      	ldr	r0, [r4, #0]
 80a1a4a:	f7ff f983 	bl	80a0d54 <socket_close>
    }
}
 80a1a4e:	4620      	mov	r0, r4
 80a1a50:	bd10      	pop	{r4, pc}

080a1a52 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a1a52:	300c      	adds	r0, #12
 80a1a54:	f7ff bff2 	b.w	80a1a3c <_ZN9TCPClient4DataD1Ev>

080a1a58 <_ZN9TCPClient7connectEPKctm>:
{
 80a1a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1a5c:	461f      	mov	r7, r3
    stop();
 80a1a5e:	6803      	ldr	r3, [r0, #0]
{
 80a1a60:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1a64:	4606      	mov	r6, r0
 80a1a66:	460d      	mov	r5, r1
 80a1a68:	4690      	mov	r8, r2
    stop();
 80a1a6a:	4798      	blx	r3
    if (Network.ready())
 80a1a6c:	4813      	ldr	r0, [pc, #76]	; (80a1abc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1a6e:	f7ff fc0a 	bl	80a1286 <_ZN5spark12NetworkClass5readyEv>
 80a1a72:	b1f0      	cbz	r0, 80a1ab2 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a1a74:	a802      	add	r0, sp, #8
 80a1a76:	f7ff fbad 	bl	80a11d4 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1a7a:	4628      	mov	r0, r5
 80a1a7c:	f000 fe16 	bl	80a26ac <strlen>
 80a1a80:	2400      	movs	r4, #0
 80a1a82:	b281      	uxth	r1, r0
 80a1a84:	463b      	mov	r3, r7
 80a1a86:	4628      	mov	r0, r5
 80a1a88:	9400      	str	r4, [sp, #0]
 80a1a8a:	aa03      	add	r2, sp, #12
 80a1a8c:	f7ff fa2a 	bl	80a0ee4 <inet_gethostbyname>
 80a1a90:	b990      	cbnz	r0, 80a1ab8 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a1a92:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a1a94:	ad09      	add	r5, sp, #36	; 0x24
 80a1a96:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1a9a:	4b09      	ldr	r3, [pc, #36]	; (80a1ac0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1a9c:	ac03      	add	r4, sp, #12
 80a1a9e:	9308      	str	r3, [sp, #32]
 80a1aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1aa4:	6823      	ldr	r3, [r4, #0]
 80a1aa6:	4642      	mov	r2, r8
 80a1aa8:	702b      	strb	r3, [r5, #0]
 80a1aaa:	4630      	mov	r0, r6
 80a1aac:	463b      	mov	r3, r7
 80a1aae:	a908      	add	r1, sp, #32
 80a1ab0:	47c8      	blx	r9
}
 80a1ab2:	b00f      	add	sp, #60	; 0x3c
 80a1ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	e7fa      	b.n	80a1ab2 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a1abc:	2000017c 	.word	0x2000017c
 80a1ac0:	080a294c 	.word	0x080a294c

080a1ac4 <_ZN9TCPServer5writeEhm>:

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a1ac4:	b513      	push	{r0, r1, r4, lr}
 80a1ac6:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
 80a1ac8:	6802      	ldr	r2, [r0, #0]
{
 80a1aca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
 80a1ace:	6994      	ldr	r4, [r2, #24]
 80a1ad0:	f10d 0107 	add.w	r1, sp, #7
 80a1ad4:	2201      	movs	r2, #1
 80a1ad6:	47a0      	blx	r4
}
 80a1ad8:	b002      	add	sp, #8
 80a1ada:	bd10      	pop	{r4, pc}

080a1adc <_ZN9TCPServer5writeEh>:
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a1adc:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 80a1ade:	6803      	ldr	r3, [r0, #0]
{
 80a1ae0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
 80a1ae4:	2201      	movs	r2, #1
 80a1ae6:	68db      	ldr	r3, [r3, #12]
 80a1ae8:	f10d 0107 	add.w	r1, sp, #7
 80a1aec:	4798      	blx	r3
}
 80a1aee:	b003      	add	sp, #12
 80a1af0:	f85d fb04 	ldr.w	pc, [sp], #4

080a1af4 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
 80a1af4:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1af6:	6803      	ldr	r3, [r0, #0]
 80a1af8:	699c      	ldr	r4, [r3, #24]
 80a1afa:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1afe:	46a4      	mov	ip, r4
}
 80a1b00:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b02:	4760      	bx	ip

080a1b04 <_ZN9TCPServer5writeEPKhjm>:
{
 80a1b04:	b510      	push	{r4, lr}
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	2000      	movs	r0, #0
 80a1b0a:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
 80a1b0c:	f104 0014 	add.w	r0, r4, #20
 80a1b10:	f7ff ff14 	bl	80a193c <_ZN9TCPClient5writeEPKhjm>
 80a1b14:	69a3      	ldr	r3, [r4, #24]
 80a1b16:	6063      	str	r3, [r4, #4]
}
 80a1b18:	bd10      	pop	{r4, pc}

080a1b1a <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override
 80a1b1a:	b570      	push	{r4, r5, r6, lr}
        memset(&peer, 0, sizeof(peer));
 80a1b1c:	2616      	movs	r6, #22
    virtual IPAddress remoteIP() override
 80a1b1e:	460d      	mov	r5, r1
 80a1b20:	4604      	mov	r4, r0
 80a1b22:	b086      	sub	sp, #24
        memset(&peer, 0, sizeof(peer));
 80a1b24:	4632      	mov	r2, r6
 80a1b26:	2100      	movs	r1, #0
 80a1b28:	4668      	mov	r0, sp
 80a1b2a:	f000 fd81 	bl	80a2630 <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
 80a1b2e:	696b      	ldr	r3, [r5, #20]
        peer.size = sizeof(peer);
 80a1b30:	f8ad 6000 	strh.w	r6, [sp]
        socket_peer(sock_handle(), &peer, NULL);
 80a1b34:	2200      	movs	r2, #0
 80a1b36:	4669      	mov	r1, sp
 80a1b38:	6818      	ldr	r0, [r3, #0]
 80a1b3a:	f7ff f92b 	bl	80a0d94 <socket_peer>
        return peer.address;
 80a1b3e:	4620      	mov	r0, r4
 80a1b40:	f10d 0102 	add.w	r1, sp, #2
 80a1b44:	f7ff fb54 	bl	80a11f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1b48:	4620      	mov	r0, r4
 80a1b4a:	b006      	add	sp, #24
 80a1b4c:	bd70      	pop	{r4, r5, r6, pc}

080a1b4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1b4e:	b510      	push	{r4, lr}
 80a1b50:	4604      	mov	r4, r0
          _M_dispose();
 80a1b52:	6803      	ldr	r3, [r0, #0]
 80a1b54:	689b      	ldr	r3, [r3, #8]
 80a1b56:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b58:	68a3      	ldr	r3, [r4, #8]
 80a1b5a:	3b01      	subs	r3, #1
 80a1b5c:	60a3      	str	r3, [r4, #8]
 80a1b5e:	b92b      	cbnz	r3, 80a1b6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1b60:	6823      	ldr	r3, [r4, #0]
 80a1b62:	4620      	mov	r0, r4
    }
 80a1b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a1b68:	68db      	ldr	r3, [r3, #12]
 80a1b6a:	4718      	bx	r3
    }
 80a1b6c:	bd10      	pop	{r4, pc}
	...

080a1b70 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif) : _port(port), _nif(nif), _sock(socket_handle_invalid()), _client(socket_handle_invalid())
 80a1b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
 80a1b72:	2500      	movs	r5, #0
 80a1b74:	4b14      	ldr	r3, [pc, #80]	; (80a1bc8 <_ZN9TCPServerC1Etm+0x58>)
 80a1b76:	60c2      	str	r2, [r0, #12]
 80a1b78:	6003      	str	r3, [r0, #0]
 80a1b7a:	8101      	strh	r1, [r0, #8]
 80a1b7c:	6045      	str	r5, [r0, #4]
 80a1b7e:	4604      	mov	r4, r0
 80a1b80:	f7ff f900 	bl	80a0d84 <socket_handle_invalid>
 80a1b84:	6120      	str	r0, [r4, #16]
 80a1b86:	f7ff f8fd 	bl	80a0d84 <socket_handle_invalid>
 80a1b8a:	4601      	mov	r1, r0
 80a1b8c:	f104 0014 	add.w	r0, r4, #20
 80a1b90:	f7ff ff24 	bl	80a19dc <_ZN9TCPClientC1Em>
        os_thread_scheduling(false, NULL);
 80a1b94:	4629      	mov	r1, r5
 80a1b96:	4628      	mov	r0, r5
        if (!s_invalid_client) {
 80a1b98:	4d0c      	ldr	r5, [pc, #48]	; (80a1bcc <_ZN9TCPServerC1Etm+0x5c>)
 80a1b9a:	f7ff f80f 	bl	80a0bbc <os_thread_scheduling>
 80a1b9e:	682a      	ldr	r2, [r5, #0]
 80a1ba0:	b95a      	cbnz	r2, 80a1bba <_ZN9TCPServerC1Etm+0x4a>
            s_invalid_client = new TCPClient(socket_handle_invalid());
 80a1ba2:	f7ff f8ef 	bl	80a0d84 <socket_handle_invalid>
 80a1ba6:	4607      	mov	r7, r0
 80a1ba8:	201c      	movs	r0, #28
 80a1baa:	f7fe fa74 	bl	80a0096 <_Znwj>
 80a1bae:	4606      	mov	r6, r0
 80a1bb0:	b110      	cbz	r0, 80a1bb8 <_ZN9TCPServerC1Etm+0x48>
 80a1bb2:	4639      	mov	r1, r7
 80a1bb4:	f7ff ff12 	bl	80a19dc <_ZN9TCPClientC1Em>
 80a1bb8:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
 80a1bba:	2100      	movs	r1, #0
 80a1bbc:	2001      	movs	r0, #1
 80a1bbe:	f7fe fffd 	bl	80a0bbc <os_thread_scheduling>
}
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1bc6:	bf00      	nop
 80a1bc8:	080a2ab8 	.word	0x080a2ab8
 80a1bcc:	200001a4 	.word	0x200001a4

080a1bd0 <_ZN9TCPServer4stopEv>:
{
 80a1bd0:	b510      	push	{r4, lr}
 80a1bd2:	4604      	mov	r4, r0
    _client.stop();
 80a1bd4:	3014      	adds	r0, #20
 80a1bd6:	f7ff fe77 	bl	80a18c8 <_ZN9TCPClient4stopEv>
    socket_close(_sock);
 80a1bda:	6920      	ldr	r0, [r4, #16]
 80a1bdc:	f7ff f8ba 	bl	80a0d54 <socket_close>
    _sock = socket_handle_invalid();
 80a1be0:	f7ff f8d0 	bl	80a0d84 <socket_handle_invalid>
 80a1be4:	6120      	str	r0, [r4, #16]
}
 80a1be6:	bd10      	pop	{r4, pc}

080a1be8 <_ZN9TCPServer5beginEv>:
{
 80a1be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bea:	4604      	mov	r4, r0
    stop();
 80a1bec:	f7ff fff0 	bl	80a1bd0 <_ZN9TCPServer4stopEv>
    if(!Network.from(_nif).ready())
 80a1bf0:	68e0      	ldr	r0, [r4, #12]
 80a1bf2:	f7ff fb9d 	bl	80a1330 <_ZN5spark12NetworkClass4fromEm>
 80a1bf6:	6803      	ldr	r3, [r0, #0]
 80a1bf8:	68db      	ldr	r3, [r3, #12]
 80a1bfa:	4798      	blx	r3
 80a1bfc:	4605      	mov	r5, r0
 80a1bfe:	b168      	cbz	r0, 80a1c1c <_ZN9TCPServer5beginEv+0x34>
    if (socket_handle_valid(_sock)) {
 80a1c00:	6920      	ldr	r0, [r4, #16]
 80a1c02:	f7ff f887 	bl	80a0d14 <socket_handle_valid>
 80a1c06:	b948      	cbnz	r0, 80a1c1c <_ZN9TCPServer5beginEv+0x34>
    sock_result_t result = socket_create_tcp_server(_port, _nif);
 80a1c08:	68e1      	ldr	r1, [r4, #12]
 80a1c0a:	8920      	ldrh	r0, [r4, #8]
 80a1c0c:	f7ff f8aa 	bl	80a0d64 <socket_create_tcp_server>
 80a1c10:	4607      	mov	r7, r0
    if (socket_handle_valid(result)) {
 80a1c12:	f7ff f87f 	bl	80a0d14 <socket_handle_valid>
 80a1c16:	4606      	mov	r6, r0
 80a1c18:	b110      	cbz	r0, 80a1c20 <_ZN9TCPServer5beginEv+0x38>
        _sock = result;
 80a1c1a:	6127      	str	r7, [r4, #16]
}
 80a1c1c:	4628      	mov	r0, r5
 80a1c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop();
 80a1c20:	4620      	mov	r0, r4
 80a1c22:	f7ff ffd5 	bl	80a1bd0 <_ZN9TCPServer4stopEv>
    return false;
 80a1c26:	4635      	mov	r5, r6
 80a1c28:	e7f8      	b.n	80a1c1c <_ZN9TCPServer5beginEv+0x34>

080a1c2a <_ZN9TCPClientaSERKS_>:
class TCPClient : public Client {
 80a1c2a:	b538      	push	{r3, r4, r5, lr}
class Stream : public Print
 80a1c2c:	684b      	ldr	r3, [r1, #4]
 80a1c2e:	4604      	mov	r4, r0
class Print
 80a1c30:	6043      	str	r3, [r0, #4]
 80a1c32:	688b      	ldr	r3, [r1, #8]
 80a1c34:	6083      	str	r3, [r0, #8]
 80a1c36:	68cb      	ldr	r3, [r1, #12]
 80a1c38:	60c3      	str	r3, [r0, #12]
 80a1c3a:	690b      	ldr	r3, [r1, #16]
 80a1c3c:	6103      	str	r3, [r0, #16]
    class __shared_ptr
 80a1c3e:	694b      	ldr	r3, [r1, #20]
 80a1c40:	6143      	str	r3, [r0, #20]
 80a1c42:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
 80a1c44:	6983      	ldr	r3, [r0, #24]
 80a1c46:	429d      	cmp	r5, r3
 80a1c48:	d00c      	beq.n	80a1c64 <_ZN9TCPClientaSERKS_+0x3a>
	    if (__tmp != 0)
 80a1c4a:	b115      	cbz	r5, 80a1c52 <_ZN9TCPClientaSERKS_+0x28>
    { ++_M_use_count; }
 80a1c4c:	686b      	ldr	r3, [r5, #4]
 80a1c4e:	3301      	adds	r3, #1
 80a1c50:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a1c52:	69a0      	ldr	r0, [r4, #24]
 80a1c54:	b128      	cbz	r0, 80a1c62 <_ZN9TCPClientaSERKS_+0x38>
      if (--_M_use_count == 0)
 80a1c56:	6843      	ldr	r3, [r0, #4]
 80a1c58:	3b01      	subs	r3, #1
 80a1c5a:	6043      	str	r3, [r0, #4]
 80a1c5c:	b90b      	cbnz	r3, 80a1c62 <_ZN9TCPClientaSERKS_+0x38>
 80a1c5e:	f7ff ff76 	bl	80a1b4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a1c62:	61a5      	str	r5, [r4, #24]
 80a1c64:	4620      	mov	r0, r4
 80a1c66:	bd38      	pop	{r3, r4, r5, pc}

080a1c68 <_ZN9TCPClientC1ERKS_>:
 80a1c68:	684b      	ldr	r3, [r1, #4]
 80a1c6a:	6043      	str	r3, [r0, #4]
 80a1c6c:	4b09      	ldr	r3, [pc, #36]	; (80a1c94 <_ZN9TCPClientC1ERKS_+0x2c>)
 80a1c6e:	6003      	str	r3, [r0, #0]
 80a1c70:	688b      	ldr	r3, [r1, #8]
 80a1c72:	6083      	str	r3, [r0, #8]
 80a1c74:	68cb      	ldr	r3, [r1, #12]
 80a1c76:	60c3      	str	r3, [r0, #12]
 80a1c78:	690b      	ldr	r3, [r1, #16]
 80a1c7a:	6103      	str	r3, [r0, #16]
 80a1c7c:	4b06      	ldr	r3, [pc, #24]	; (80a1c98 <_ZN9TCPClientC1ERKS_+0x30>)
 80a1c7e:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1c80:	694b      	ldr	r3, [r1, #20]
 80a1c82:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
 80a1c84:	698b      	ldr	r3, [r1, #24]
 80a1c86:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
 80a1c88:	b113      	cbz	r3, 80a1c90 <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
 80a1c8a:	685a      	ldr	r2, [r3, #4]
 80a1c8c:	3201      	adds	r2, #1
 80a1c8e:	605a      	str	r2, [r3, #4]
 80a1c90:	4770      	bx	lr
 80a1c92:	bf00      	nop
 80a1c94:	080a2a44 	.word	0x080a2a44
 80a1c98:	080a29f8 	.word	0x080a29f8

080a1c9c <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient
 80a1c9c:	b510      	push	{r4, lr}
 80a1c9e:	4604      	mov	r4, r0
    virtual ~TCPClient() {};
 80a1ca0:	4b03      	ldr	r3, [pc, #12]	; (80a1cb0 <_ZN15TCPServerClientD1Ev+0x14>)
 80a1ca2:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
 80a1ca6:	f7fe fe65 	bl	80a0974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1caa:	4620      	mov	r0, r4
 80a1cac:	bd10      	pop	{r4, pc}
 80a1cae:	bf00      	nop
 80a1cb0:	080a29f8 	.word	0x080a29f8

080a1cb4 <_ZN15TCPServerClientD0Ev>:
 80a1cb4:	b510      	push	{r4, lr}
 80a1cb6:	4604      	mov	r4, r0
 80a1cb8:	f7ff fff0 	bl	80a1c9c <_ZN15TCPServerClientD1Ev>
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	211c      	movs	r1, #28
 80a1cc0:	f000 fb8a 	bl	80a23d8 <_ZdlPvj>
 80a1cc4:	4620      	mov	r0, r4
 80a1cc6:	bd10      	pop	{r4, pc}

080a1cc8 <_ZN9TCPServer9availableEv>:
{
 80a1cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cca:	460c      	mov	r4, r1
 80a1ccc:	b08f      	sub	sp, #60	; 0x3c
 80a1cce:	4606      	mov	r6, r0
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a1cd0:	f7ff f858 	bl	80a0d84 <socket_handle_invalid>
    if(_sock == SOCKET_INVALID)
 80a1cd4:	6923      	ldr	r3, [r4, #16]
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a1cd6:	4605      	mov	r5, r0
    if(_sock == SOCKET_INVALID)
 80a1cd8:	4283      	cmp	r3, r0
 80a1cda:	d103      	bne.n	80a1ce4 <_ZN9TCPServer9availableEv+0x1c>
        begin();
 80a1cdc:	6823      	ldr	r3, [r4, #0]
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	691b      	ldr	r3, [r3, #16]
 80a1ce2:	4798      	blx	r3
    if((!Network.from(_nif).ready()) || (_sock == SOCKET_INVALID))
 80a1ce4:	68e0      	ldr	r0, [r4, #12]
 80a1ce6:	f7ff fb23 	bl	80a1330 <_ZN5spark12NetworkClass4fromEm>
 80a1cea:	6803      	ldr	r3, [r0, #0]
 80a1cec:	f104 0714 	add.w	r7, r4, #20
 80a1cf0:	68db      	ldr	r3, [r3, #12]
 80a1cf2:	4798      	blx	r3
 80a1cf4:	b308      	cbz	r0, 80a1d3a <_ZN9TCPServer9availableEv+0x72>
 80a1cf6:	6920      	ldr	r0, [r4, #16]
 80a1cf8:	42a8      	cmp	r0, r5
 80a1cfa:	d01e      	beq.n	80a1d3a <_ZN9TCPServer9availableEv+0x72>
    int sock = socket_accept(_sock);
 80a1cfc:	f7ff f83a 	bl	80a0d74 <socket_accept>
 80a1d00:	4604      	mov	r4, r0
    if (!socket_handle_valid(sock))
 80a1d02:	f7ff f807 	bl	80a0d14 <socket_handle_valid>
 80a1d06:	b1d8      	cbz	r0, 80a1d40 <_ZN9TCPServer9availableEv+0x78>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a1d08:	4621      	mov	r1, r4
 80a1d0a:	a807      	add	r0, sp, #28
 80a1d0c:	f7ff fe66 	bl	80a19dc <_ZN9TCPClientC1Em>
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a1d12:	4b11      	ldr	r3, [pc, #68]	; (80a1d58 <_ZN9TCPServer9availableEv+0x90>)
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a1d14:	a907      	add	r1, sp, #28
 80a1d16:	a801      	add	r0, sp, #4
 80a1d18:	ad02      	add	r5, sp, #8
 80a1d1a:	348c      	adds	r4, #140	; 0x8c
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a1d1c:	9307      	str	r3, [sp, #28]
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a1d1e:	f7ff fefc 	bl	80a1b1a <_ZN15TCPServerClient8remoteIPEv>
 80a1d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1d26:	682b      	ldr	r3, [r5, #0]
        _client = client;
 80a1d28:	4638      	mov	r0, r7
 80a1d2a:	7023      	strb	r3, [r4, #0]
 80a1d2c:	a907      	add	r1, sp, #28
 80a1d2e:	f7ff ff7c 	bl	80a1c2a <_ZN9TCPClientaSERKS_>
        TCPServerClient client = TCPServerClient(sock);
 80a1d32:	a807      	add	r0, sp, #28
 80a1d34:	f7ff ffb2 	bl	80a1c9c <_ZN15TCPServerClientD1Ev>
 80a1d38:	e007      	b.n	80a1d4a <_ZN9TCPServer9availableEv+0x82>
        stop();
 80a1d3a:	4620      	mov	r0, r4
 80a1d3c:	f7ff ff48 	bl	80a1bd0 <_ZN9TCPServer4stopEv>
        _client = *s_invalid_client;
 80a1d40:	4b06      	ldr	r3, [pc, #24]	; (80a1d5c <_ZN9TCPServer9availableEv+0x94>)
 80a1d42:	4638      	mov	r0, r7
 80a1d44:	6819      	ldr	r1, [r3, #0]
 80a1d46:	f7ff ff70 	bl	80a1c2a <_ZN9TCPClientaSERKS_>
    return _client;
 80a1d4a:	4639      	mov	r1, r7
 80a1d4c:	4630      	mov	r0, r6
 80a1d4e:	f7ff ff8b 	bl	80a1c68 <_ZN9TCPClientC1ERKS_>
}
 80a1d52:	4630      	mov	r0, r6
 80a1d54:	b00f      	add	sp, #60	; 0x3c
 80a1d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d58:	080a2a6c 	.word	0x080a2a6c
 80a1d5c:	200001a4 	.word	0x200001a4

080a1d60 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a1d60:	b510      	push	{r4, lr}
 80a1d62:	4604      	mov	r4, r0
 80a1d64:	4b05      	ldr	r3, [pc, #20]	; (80a1d7c <_ZN9TCPServerD1Ev+0x1c>)
 80a1d66:	6003      	str	r3, [r0, #0]
 80a1d68:	f7ff ff32 	bl	80a1bd0 <_ZN9TCPServer4stopEv>
 80a1d6c:	4b04      	ldr	r3, [pc, #16]	; (80a1d80 <_ZN9TCPServerD1Ev+0x20>)
      ~__shared_ptr() = default;
 80a1d6e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1d72:	6163      	str	r3, [r4, #20]
 80a1d74:	f7fe fdfe 	bl	80a0974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	bd10      	pop	{r4, pc}
 80a1d7c:	080a2ab8 	.word	0x080a2ab8
 80a1d80:	080a29f8 	.word	0x080a29f8

080a1d84 <_ZN9TCPServerD0Ev>:
 80a1d84:	b510      	push	{r4, lr}
 80a1d86:	4604      	mov	r4, r0
 80a1d88:	f7ff ffea 	bl	80a1d60 <_ZN9TCPServerD1Ev>
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	2130      	movs	r1, #48	; 0x30
 80a1d90:	f000 fb22 	bl	80a23d8 <_ZdlPvj>
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	bd10      	pop	{r4, pc}

080a1d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1d98:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1d9a:	681a      	ldr	r2, [r3, #0]
 80a1d9c:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1da0:	4770      	bx	lr
 80a1da2:	bf00      	nop
 80a1da4:	20000028 	.word	0x20000028
 80a1da8:	200001a8 	.word	0x200001a8

080a1dac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1dac:	4770      	bx	lr

080a1dae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1dae:	7441      	strb	r1, [r0, #17]
}
 80a1db0:	4770      	bx	lr

080a1db2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1db2:	4770      	bx	lr

080a1db4 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1db4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1db6:	7c00      	ldrb	r0, [r0, #16]
 80a1db8:	f7ff f844 	bl	80a0e44 <hal_usart_available_data_for_write>
}
 80a1dbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1dc0:	bd08      	pop	{r3, pc}

080a1dc2 <_ZN11USARTSerial9availableEv>:
{
 80a1dc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1dc4:	7c00      	ldrb	r0, [r0, #16]
 80a1dc6:	f7ff f815 	bl	80a0df4 <hal_usart_available>
}
 80a1dca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1dce:	bd08      	pop	{r3, pc}

080a1dd0 <_ZN11USARTSerial4peekEv>:
{
 80a1dd0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1dd2:	7c00      	ldrb	r0, [r0, #16]
 80a1dd4:	f7ff f81e 	bl	80a0e14 <hal_usart_peek>
}
 80a1dd8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ddc:	bd08      	pop	{r3, pc}

080a1dde <_ZN11USARTSerial4readEv>:
{
 80a1dde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1de0:	7c00      	ldrb	r0, [r0, #16]
 80a1de2:	f7ff f80f 	bl	80a0e04 <hal_usart_read>
}
 80a1de6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1dea:	bd08      	pop	{r3, pc}

080a1dec <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1dec:	7c00      	ldrb	r0, [r0, #16]
 80a1dee:	f7ff b819 	b.w	80a0e24 <hal_usart_flush>

080a1df2 <_ZN11USARTSerial5writeEh>:
{
 80a1df2:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1df4:	7c46      	ldrb	r6, [r0, #17]
{
 80a1df6:	4604      	mov	r4, r0
 80a1df8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1dfa:	b12e      	cbz	r6, 80a1e08 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1dfc:	4629      	mov	r1, r5
 80a1dfe:	7c20      	ldrb	r0, [r4, #16]
}
 80a1e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1e04:	f7fe bfee 	b.w	80a0de4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e08:	7c00      	ldrb	r0, [r0, #16]
 80a1e0a:	f7ff f81b 	bl	80a0e44 <hal_usart_available_data_for_write>
 80a1e0e:	2800      	cmp	r0, #0
 80a1e10:	dcf4      	bgt.n	80a1dfc <_ZN11USARTSerial5writeEh+0xa>
}
 80a1e12:	4630      	mov	r0, r6
 80a1e14:	bd70      	pop	{r4, r5, r6, pc}

080a1e16 <_ZN11USARTSerialD0Ev>:
 80a1e16:	b510      	push	{r4, lr}
 80a1e18:	4604      	mov	r4, r0
 80a1e1a:	2114      	movs	r1, #20
 80a1e1c:	f000 fadc 	bl	80a23d8 <_ZdlPvj>
 80a1e20:	4620      	mov	r0, r4
 80a1e22:	bd10      	pop	{r4, pc}

080a1e24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
    Stream() {_timeout=1000;}
 80a1e24:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e28:	b510      	push	{r4, lr}
 80a1e2a:	4604      	mov	r4, r0
 80a1e2c:	4608      	mov	r0, r1
 80a1e2e:	4611      	mov	r1, r2
 80a1e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1e34:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1e38:	4a04      	ldr	r2, [pc, #16]	; (80a1e4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1e3a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e3c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1e3e:	2201      	movs	r2, #1
 80a1e40:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1e42:	461a      	mov	r2, r3
 80a1e44:	f7fe ffc6 	bl	80a0dd4 <hal_usart_init>
}
 80a1e48:	4620      	mov	r0, r4
 80a1e4a:	bd10      	pop	{r4, pc}
 80a1e4c:	080a2af8 	.word	0x080a2af8

080a1e50 <_Z22__fetch_global_Serial1v>:
{
 80a1e50:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1e52:	4d0c      	ldr	r5, [pc, #48]	; (80a1e84 <_Z22__fetch_global_Serial1v+0x34>)
 80a1e54:	7829      	ldrb	r1, [r5, #0]
 80a1e56:	f3bf 8f5b 	dmb	ish
 80a1e5a:	f011 0401 	ands.w	r4, r1, #1
 80a1e5e:	d10f      	bne.n	80a1e80 <_Z22__fetch_global_Serial1v+0x30>
 80a1e60:	4628      	mov	r0, r5
 80a1e62:	f7fe f929 	bl	80a00b8 <__cxa_guard_acquire>
 80a1e66:	b158      	cbz	r0, 80a1e80 <_Z22__fetch_global_Serial1v+0x30>
 80a1e68:	4621      	mov	r1, r4
 80a1e6a:	4b07      	ldr	r3, [pc, #28]	; (80a1e88 <_Z22__fetch_global_Serial1v+0x38>)
 80a1e6c:	4a07      	ldr	r2, [pc, #28]	; (80a1e8c <_Z22__fetch_global_Serial1v+0x3c>)
 80a1e6e:	4808      	ldr	r0, [pc, #32]	; (80a1e90 <_Z22__fetch_global_Serial1v+0x40>)
 80a1e70:	f7ff ffd8 	bl	80a1e24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1e74:	4628      	mov	r0, r5
 80a1e76:	f7fe f924 	bl	80a00c2 <__cxa_guard_release>
 80a1e7a:	4806      	ldr	r0, [pc, #24]	; (80a1e94 <_Z22__fetch_global_Serial1v+0x44>)
 80a1e7c:	f000 fbc4 	bl	80a2608 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1e80:	4803      	ldr	r0, [pc, #12]	; (80a1e90 <_Z22__fetch_global_Serial1v+0x40>)
 80a1e82:	bd38      	pop	{r3, r4, r5, pc}
 80a1e84:	200001ac 	.word	0x200001ac
 80a1e88:	20000234 	.word	0x20000234
 80a1e8c:	200001b0 	.word	0x200001b0
 80a1e90:	200002b8 	.word	0x200002b8
 80a1e94:	080a1db3 	.word	0x080a1db3

080a1e98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e98:	7441      	strb	r1, [r0, #17]
}
 80a1e9a:	4770      	bx	lr

080a1e9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e9c:	4770      	bx	lr

080a1e9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1e9e:	4770      	bx	lr

080a1ea0 <_ZN9USBSerial4readEv>:
{
 80a1ea0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1ea2:	2100      	movs	r1, #0
 80a1ea4:	7c00      	ldrb	r0, [r0, #16]
 80a1ea6:	f7fe fff5 	bl	80a0e94 <HAL_USB_USART_Receive_Data>
}
 80a1eaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1eae:	bd08      	pop	{r3, pc}

080a1eb0 <_ZN9USBSerial4peekEv>:
{
 80a1eb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1eb2:	2101      	movs	r1, #1
 80a1eb4:	7c00      	ldrb	r0, [r0, #16]
 80a1eb6:	f7fe ffed 	bl	80a0e94 <HAL_USB_USART_Receive_Data>
}
 80a1eba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ebe:	bd08      	pop	{r3, pc}

080a1ec0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1ec0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1ec2:	7c00      	ldrb	r0, [r0, #16]
 80a1ec4:	f7fe ffde 	bl	80a0e84 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1ec8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ecc:	bd08      	pop	{r3, pc}

080a1ece <_ZN9USBSerial9availableEv>:
{
 80a1ece:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1ed0:	7c00      	ldrb	r0, [r0, #16]
 80a1ed2:	f7fe ffcf 	bl	80a0e74 <HAL_USB_USART_Available_Data>
}
 80a1ed6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1eda:	bd08      	pop	{r3, pc}

080a1edc <_ZN9USBSerial5writeEh>:
{
 80a1edc:	b538      	push	{r3, r4, r5, lr}
 80a1ede:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ee0:	7c00      	ldrb	r0, [r0, #16]
{
 80a1ee2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ee4:	f7fe ffce 	bl	80a0e84 <HAL_USB_USART_Available_Data_For_Write>
 80a1ee8:	2800      	cmp	r0, #0
 80a1eea:	dc01      	bgt.n	80a1ef0 <_ZN9USBSerial5writeEh+0x14>
 80a1eec:	7c60      	ldrb	r0, [r4, #17]
 80a1eee:	b128      	cbz	r0, 80a1efc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1ef0:	4629      	mov	r1, r5
 80a1ef2:	7c20      	ldrb	r0, [r4, #16]
 80a1ef4:	f7fe ffd6 	bl	80a0ea4 <HAL_USB_USART_Send_Data>
 80a1ef8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1efc:	bd38      	pop	{r3, r4, r5, pc}

080a1efe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1efe:	7c00      	ldrb	r0, [r0, #16]
 80a1f00:	f7fe bfd8 	b.w	80a0eb4 <HAL_USB_USART_Flush_Data>

080a1f04 <_ZN9USBSerialD0Ev>:
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	4604      	mov	r4, r0
 80a1f08:	2114      	movs	r1, #20
 80a1f0a:	f000 fa65 	bl	80a23d8 <_ZdlPvj>
 80a1f0e:	4620      	mov	r0, r4
 80a1f10:	bd10      	pop	{r4, pc}

080a1f12 <__tcf_1>:
 80a1f12:	4770      	bx	lr

080a1f14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f14:	b510      	push	{r4, lr}
 80a1f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f1a:	4604      	mov	r4, r0
 80a1f1c:	4608      	mov	r0, r1
 80a1f1e:	2100      	movs	r1, #0
 80a1f20:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1f24:	4b04      	ldr	r3, [pc, #16]	; (80a1f38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1f26:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f28:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1f2a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1f2c:	4611      	mov	r1, r2
  _blocking = true;
 80a1f2e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1f30:	f7fe ff90 	bl	80a0e54 <HAL_USB_USART_Init>
}
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	bd10      	pop	{r4, pc}
 80a1f38:	080a2b28 	.word	0x080a2b28

080a1f3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1f3c:	2200      	movs	r2, #0
 80a1f3e:	7c00      	ldrb	r0, [r0, #16]
 80a1f40:	f7fe bf90 	b.w	80a0e64 <HAL_USB_USART_Begin>

080a1f44 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a1f44:	7c00      	ldrb	r0, [r0, #16]
 80a1f46:	f7fe bfbd 	b.w	80a0ec4 <HAL_USB_USART_Is_Enabled>

080a1f4a <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a1f4a:	f7ff bffb 	b.w	80a1f44 <_ZN9USBSerial9isEnabledEv>
	...

080a1f50 <_Z19acquireSerialBufferv>:
{
 80a1f50:	b510      	push	{r4, lr}
 80a1f52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1f54:	2214      	movs	r2, #20
 80a1f56:	2100      	movs	r1, #0
 80a1f58:	f000 fb6a 	bl	80a2630 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1f5c:	4b05      	ldr	r3, [pc, #20]	; (80a1f74 <_Z19acquireSerialBufferv+0x24>)
}
 80a1f5e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1f60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1f62:	4b05      	ldr	r3, [pc, #20]	; (80a1f78 <_Z19acquireSerialBufferv+0x28>)
 80a1f64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f66:	f240 1301 	movw	r3, #257	; 0x101
 80a1f6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f6c:	2381      	movs	r3, #129	; 0x81
 80a1f6e:	8223      	strh	r3, [r4, #16]
}
 80a1f70:	bd10      	pop	{r4, pc}
 80a1f72:	bf00      	nop
 80a1f74:	200002fc 	.word	0x200002fc
 80a1f78:	200003fd 	.word	0x200003fd

080a1f7c <_Z16_fetch_usbserialv>:
{
 80a1f7c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f7e:	4d0e      	ldr	r5, [pc, #56]	; (80a1fb8 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1f80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1f82:	a801      	add	r0, sp, #4
 80a1f84:	f7ff ffe4 	bl	80a1f50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f88:	7829      	ldrb	r1, [r5, #0]
 80a1f8a:	f3bf 8f5b 	dmb	ish
 80a1f8e:	f011 0401 	ands.w	r4, r1, #1
 80a1f92:	d10e      	bne.n	80a1fb2 <_Z16_fetch_usbserialv+0x36>
 80a1f94:	4628      	mov	r0, r5
 80a1f96:	f7fe f88f 	bl	80a00b8 <__cxa_guard_acquire>
 80a1f9a:	b150      	cbz	r0, 80a1fb2 <_Z16_fetch_usbserialv+0x36>
 80a1f9c:	4621      	mov	r1, r4
 80a1f9e:	aa01      	add	r2, sp, #4
 80a1fa0:	4806      	ldr	r0, [pc, #24]	; (80a1fbc <_Z16_fetch_usbserialv+0x40>)
 80a1fa2:	f7ff ffb7 	bl	80a1f14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1fa6:	4628      	mov	r0, r5
 80a1fa8:	f7fe f88b 	bl	80a00c2 <__cxa_guard_release>
 80a1fac:	4804      	ldr	r0, [pc, #16]	; (80a1fc0 <_Z16_fetch_usbserialv+0x44>)
 80a1fae:	f000 fb2b 	bl	80a2608 <atexit>
	return _usbserial;
}
 80a1fb2:	4802      	ldr	r0, [pc, #8]	; (80a1fbc <_Z16_fetch_usbserialv+0x40>)
 80a1fb4:	b007      	add	sp, #28
 80a1fb6:	bd30      	pop	{r4, r5, pc}
 80a1fb8:	200002cc 	.word	0x200002cc
 80a1fbc:	200002d4 	.word	0x200002d4
 80a1fc0:	080a1e9d 	.word	0x080a1e9d

080a1fc4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1fc4:	b510      	push	{r4, lr}
 80a1fc6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fc8:	2214      	movs	r2, #20
 80a1fca:	2100      	movs	r1, #0
 80a1fcc:	f000 fb30 	bl	80a2630 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fd0:	4b05      	ldr	r3, [pc, #20]	; (80a1fe8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fd2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fd4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1fd6:	4b05      	ldr	r3, [pc, #20]	; (80a1fec <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1fd8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fda:	f240 1301 	movw	r3, #257	; 0x101
 80a1fde:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fe0:	2381      	movs	r3, #129	; 0x81
 80a1fe2:	8223      	strh	r3, [r4, #16]
}
 80a1fe4:	bd10      	pop	{r4, pc}
 80a1fe6:	bf00      	nop
 80a1fe8:	2000047e 	.word	0x2000047e
 80a1fec:	2000057f 	.word	0x2000057f

080a1ff0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1ff0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ff2:	4c0e      	ldr	r4, [pc, #56]	; (80a202c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1ff4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1ff6:	a801      	add	r0, sp, #4
 80a1ff8:	f7ff ffe4 	bl	80a1fc4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ffc:	7823      	ldrb	r3, [r4, #0]
 80a1ffe:	f3bf 8f5b 	dmb	ish
 80a2002:	07db      	lsls	r3, r3, #31
 80a2004:	d40e      	bmi.n	80a2024 <_Z17_fetch_usbserial1v+0x34>
 80a2006:	4620      	mov	r0, r4
 80a2008:	f7fe f856 	bl	80a00b8 <__cxa_guard_acquire>
 80a200c:	b150      	cbz	r0, 80a2024 <_Z17_fetch_usbserial1v+0x34>
 80a200e:	2101      	movs	r1, #1
 80a2010:	aa01      	add	r2, sp, #4
 80a2012:	4807      	ldr	r0, [pc, #28]	; (80a2030 <_Z17_fetch_usbserial1v+0x40>)
 80a2014:	f7ff ff7e 	bl	80a1f14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2018:	4620      	mov	r0, r4
 80a201a:	f7fe f852 	bl	80a00c2 <__cxa_guard_release>
 80a201e:	4805      	ldr	r0, [pc, #20]	; (80a2034 <_Z17_fetch_usbserial1v+0x44>)
 80a2020:	f000 faf2 	bl	80a2608 <atexit>
  return _usbserial1;
}
 80a2024:	4802      	ldr	r0, [pc, #8]	; (80a2030 <_Z17_fetch_usbserial1v+0x40>)
 80a2026:	b006      	add	sp, #24
 80a2028:	bd10      	pop	{r4, pc}
 80a202a:	bf00      	nop
 80a202c:	200002d0 	.word	0x200002d0
 80a2030:	200002e8 	.word	0x200002e8
 80a2034:	080a1f13 	.word	0x080a1f13

080a2038 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2038:	2200      	movs	r2, #0
 80a203a:	6840      	ldr	r0, [r0, #4]
 80a203c:	4611      	mov	r1, r2
 80a203e:	f7fe bfb5 	b.w	80a0fac <network_ready>

080a2042 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2042:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2044:	4615      	mov	r5, r2
 80a2046:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2048:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a204a:	460e      	mov	r6, r1
 80a204c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a204e:	2100      	movs	r1, #0
 80a2050:	a803      	add	r0, sp, #12
 80a2052:	f000 faed 	bl	80a2630 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2056:	4628      	mov	r0, r5
 80a2058:	f000 fb28 	bl	80a26ac <strlen>
 80a205c:	2700      	movs	r7, #0
 80a205e:	b281      	uxth	r1, r0
 80a2060:	6873      	ldr	r3, [r6, #4]
 80a2062:	4628      	mov	r0, r5
 80a2064:	9700      	str	r7, [sp, #0]
 80a2066:	aa03      	add	r2, sp, #12
 80a2068:	f7fe ff3c 	bl	80a0ee4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a206c:	b130      	cbz	r0, 80a207c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a206e:	4639      	mov	r1, r7
 80a2070:	4620      	mov	r0, r4
 80a2072:	f7ff f8cf 	bl	80a1214 <_ZN9IPAddressC1Em>
    }
 80a2076:	4620      	mov	r0, r4
 80a2078:	b009      	add	sp, #36	; 0x24
 80a207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a207c:	4620      	mov	r0, r4
 80a207e:	a903      	add	r1, sp, #12
 80a2080:	f7ff f8b6 	bl	80a11f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2084:	e7f7      	b.n	80a2076 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2086 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2086:	2200      	movs	r2, #0
 80a2088:	6840      	ldr	r0, [r0, #4]
 80a208a:	4611      	mov	r1, r2
 80a208c:	f7fe bfae 	b.w	80a0fec <network_listening>

080a2090 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2090:	2200      	movs	r2, #0
 80a2092:	6840      	ldr	r0, [r0, #4]
 80a2094:	4611      	mov	r1, r2
 80a2096:	f7fe bfb9 	b.w	80a100c <network_get_listen_timeout>

080a209a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a209a:	2200      	movs	r2, #0
 80a209c:	6840      	ldr	r0, [r0, #4]
 80a209e:	f7fe bfad 	b.w	80a0ffc <network_set_listen_timeout>

080a20a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a20a2:	2200      	movs	r2, #0
 80a20a4:	6840      	ldr	r0, [r0, #4]
 80a20a6:	f081 0101 	eor.w	r1, r1, #1
 80a20aa:	f7fe bf97 	b.w	80a0fdc <network_listen>

080a20ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a20ae:	2300      	movs	r3, #0
 80a20b0:	6840      	ldr	r0, [r0, #4]
 80a20b2:	461a      	mov	r2, r3
 80a20b4:	4619      	mov	r1, r3
 80a20b6:	f7fe bf89 	b.w	80a0fcc <network_off>

080a20ba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a20ba:	2300      	movs	r3, #0
 80a20bc:	6840      	ldr	r0, [r0, #4]
 80a20be:	461a      	mov	r2, r3
 80a20c0:	4619      	mov	r1, r3
 80a20c2:	f7fe bf7b 	b.w	80a0fbc <network_on>

080a20c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a20c6:	2200      	movs	r2, #0
 80a20c8:	6840      	ldr	r0, [r0, #4]
 80a20ca:	4611      	mov	r1, r2
 80a20cc:	f7fe bf5e 	b.w	80a0f8c <network_connecting>

080a20d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a20d0:	2200      	movs	r2, #0
 80a20d2:	2102      	movs	r1, #2
 80a20d4:	6840      	ldr	r0, [r0, #4]
 80a20d6:	f7fe bf61 	b.w	80a0f9c <network_disconnect>

080a20da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a20da:	2300      	movs	r3, #0
 80a20dc:	6840      	ldr	r0, [r0, #4]
 80a20de:	461a      	mov	r2, r3
 80a20e0:	f7fe bf4c 	b.w	80a0f7c <network_connect>

080a20e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a20e4:	2204      	movs	r2, #4
 80a20e6:	4b02      	ldr	r3, [pc, #8]	; (80a20f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a20e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a20ea:	4a02      	ldr	r2, [pc, #8]	; (80a20f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a20ee:	4770      	bx	lr
 80a20f0:	20000600 	.word	0x20000600
 80a20f4:	080a2b58 	.word	0x080a2b58

080a20f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a20f8:	4b01      	ldr	r3, [pc, #4]	; (80a2100 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a20fa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a20fc:	4770      	bx	lr
 80a20fe:	bf00      	nop
 80a2100:	2000002c 	.word	0x2000002c

080a2104 <serialEventRun>:
{
 80a2104:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2106:	4b13      	ldr	r3, [pc, #76]	; (80a2154 <serialEventRun+0x50>)
 80a2108:	b143      	cbz	r3, 80a211c <serialEventRun+0x18>
 80a210a:	f7ff ff37 	bl	80a1f7c <_Z16_fetch_usbserialv>
 80a210e:	6803      	ldr	r3, [r0, #0]
 80a2110:	691b      	ldr	r3, [r3, #16]
 80a2112:	4798      	blx	r3
 80a2114:	2800      	cmp	r0, #0
 80a2116:	dd01      	ble.n	80a211c <serialEventRun+0x18>
        serialEvent();
 80a2118:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a211c:	4b0e      	ldr	r3, [pc, #56]	; (80a2158 <serialEventRun+0x54>)
 80a211e:	b143      	cbz	r3, 80a2132 <serialEventRun+0x2e>
 80a2120:	f7ff fe96 	bl	80a1e50 <_Z22__fetch_global_Serial1v>
 80a2124:	6803      	ldr	r3, [r0, #0]
 80a2126:	691b      	ldr	r3, [r3, #16]
 80a2128:	4798      	blx	r3
 80a212a:	2800      	cmp	r0, #0
 80a212c:	dd01      	ble.n	80a2132 <serialEventRun+0x2e>
        serialEvent1();
 80a212e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2132:	4b0a      	ldr	r3, [pc, #40]	; (80a215c <serialEventRun+0x58>)
 80a2134:	b10b      	cbz	r3, 80a213a <serialEventRun+0x36>
 80a2136:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a213a:	4b09      	ldr	r3, [pc, #36]	; (80a2160 <serialEventRun+0x5c>)
 80a213c:	b143      	cbz	r3, 80a2150 <serialEventRun+0x4c>
 80a213e:	f7ff ff57 	bl	80a1ff0 <_Z17_fetch_usbserial1v>
 80a2142:	6803      	ldr	r3, [r0, #0]
 80a2144:	691b      	ldr	r3, [r3, #16]
 80a2146:	4798      	blx	r3
 80a2148:	2800      	cmp	r0, #0
 80a214a:	dd01      	ble.n	80a2150 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a214c:	f3af 8000 	nop.w
}
 80a2150:	bd08      	pop	{r3, pc}
 80a2152:	bf00      	nop
	...

080a2164 <_post_loop>:
{
 80a2164:	b508      	push	{r3, lr}
	serialEventRun();
 80a2166:	f7ff ffcd 	bl	80a2104 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a216a:	f7fe fd4f 	bl	80a0c0c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a216e:	4b01      	ldr	r3, [pc, #4]	; (80a2174 <_post_loop+0x10>)
 80a2170:	6018      	str	r0, [r3, #0]
}
 80a2172:	bd08      	pop	{r3, pc}
 80a2174:	20000620 	.word	0x20000620

080a2178 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2178:	4805      	ldr	r0, [pc, #20]	; (80a2190 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a217a:	4a06      	ldr	r2, [pc, #24]	; (80a2194 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a217c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a217e:	1a12      	subs	r2, r2, r0
 80a2180:	4905      	ldr	r1, [pc, #20]	; (80a2198 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2182:	f000 fa47 	bl	80a2614 <memcpy>
    __backup_sram_signature = signature;
 80a2186:	4b05      	ldr	r3, [pc, #20]	; (80a219c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2188:	4a05      	ldr	r2, [pc, #20]	; (80a21a0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a218a:	601a      	str	r2, [r3, #0]
}
 80a218c:	bd08      	pop	{r3, pc}
 80a218e:	bf00      	nop
 80a2190:	40024000 	.word	0x40024000
 80a2194:	40024004 	.word	0x40024004
 80a2198:	080a2cb0 	.word	0x080a2cb0
 80a219c:	40024000 	.word	0x40024000
 80a21a0:	9a271c1e 	.word	0x9a271c1e

080a21a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a21a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21a8:	461a      	mov	r2, r3
 80a21aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21ae:	9300      	str	r3, [sp, #0]
 80a21b0:	f7fe feca 	bl	80a0f48 <system_ctrl_set_result>
}
 80a21b4:	b003      	add	sp, #12
 80a21b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a21bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a21bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a21be:	8843      	ldrh	r3, [r0, #2]
 80a21c0:	2b0a      	cmp	r3, #10
 80a21c2:	d008      	beq.n	80a21d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a21c4:	2b50      	cmp	r3, #80	; 0x50
 80a21c6:	d10b      	bne.n	80a21e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a21c8:	4b09      	ldr	r3, [pc, #36]	; (80a21f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a21ca:	681b      	ldr	r3, [r3, #0]
 80a21cc:	b14b      	cbz	r3, 80a21e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a21ce:	b003      	add	sp, #12
 80a21d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a21d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a21d6:	f7ff ffe5 	bl	80a21a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a21da:	b003      	add	sp, #12
 80a21dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21e0:	2300      	movs	r3, #0
 80a21e2:	461a      	mov	r2, r3
 80a21e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21e8:	9300      	str	r3, [sp, #0]
 80a21ea:	f7fe fead 	bl	80a0f48 <system_ctrl_set_result>
}
 80a21ee:	e7f4      	b.n	80a21da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a21f0:	2000060c 	.word	0x2000060c

080a21f4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a21f4:	2100      	movs	r1, #0
{
 80a21f6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a21f8:	4811      	ldr	r0, [pc, #68]	; (80a2240 <module_user_init_hook+0x4c>)
 80a21fa:	f7fe ff3f 	bl	80a107c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a21fe:	4b11      	ldr	r3, [pc, #68]	; (80a2244 <module_user_init_hook+0x50>)
 80a2200:	681a      	ldr	r2, [r3, #0]
 80a2202:	4b11      	ldr	r3, [pc, #68]	; (80a2248 <module_user_init_hook+0x54>)
 80a2204:	429a      	cmp	r2, r3
 80a2206:	bf0c      	ite	eq
 80a2208:	2201      	moveq	r2, #1
 80a220a:	2200      	movne	r2, #0
 80a220c:	4b0f      	ldr	r3, [pc, #60]	; (80a224c <module_user_init_hook+0x58>)
 80a220e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2210:	d001      	beq.n	80a2216 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2212:	f7ff ffb1 	bl	80a2178 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2216:	f7fe fce9 	bl	80a0bec <HAL_RNG_GetRandomNumber>
 80a221a:	4604      	mov	r4, r0
    srand(seed);
 80a221c:	f000 fa10 	bl	80a2640 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2220:	4b0b      	ldr	r3, [pc, #44]	; (80a2250 <module_user_init_hook+0x5c>)
 80a2222:	b113      	cbz	r3, 80a222a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2224:	4620      	mov	r0, r4
 80a2226:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a222a:	2100      	movs	r1, #0
 80a222c:	4808      	ldr	r0, [pc, #32]	; (80a2250 <module_user_init_hook+0x5c>)
 80a222e:	f7fe fe95 	bl	80a0f5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2236:	2100      	movs	r1, #0
 80a2238:	4806      	ldr	r0, [pc, #24]	; (80a2254 <module_user_init_hook+0x60>)
 80a223a:	f7fe be7b 	b.w	80a0f34 <system_ctrl_set_app_request_handler>
 80a223e:	bf00      	nop
 80a2240:	080a20f9 	.word	0x080a20f9
 80a2244:	40024000 	.word	0x40024000
 80a2248:	9a271c1e 	.word	0x9a271c1e
 80a224c:	20000608 	.word	0x20000608
 80a2250:	00000000 	.word	0x00000000
 80a2254:	080a21bd 	.word	0x080a21bd

080a2258 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2258:	4b02      	ldr	r3, [pc, #8]	; (80a2264 <__tcf_0+0xc>)
 80a225a:	6898      	ldr	r0, [r3, #8]
 80a225c:	b108      	cbz	r0, 80a2262 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a225e:	f7fe bcbd 	b.w	80a0bdc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2262:	4770      	bx	lr
 80a2264:	20000614 	.word	0x20000614

080a2268 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2268:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a226a:	b570      	push	{r4, r5, r6, lr}
 80a226c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a226e:	d901      	bls.n	80a2274 <pinAvailable+0xc>
    return false;
 80a2270:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2272:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2274:	f1a0 030d 	sub.w	r3, r0, #13
 80a2278:	2b02      	cmp	r3, #2
 80a227a:	d90b      	bls.n	80a2294 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a227c:	2801      	cmp	r0, #1
 80a227e:	d824      	bhi.n	80a22ca <pinAvailable+0x62>
 80a2280:	f000 f878 	bl	80a2374 <_Z19__fetch_global_Wirev>
 80a2284:	2100      	movs	r1, #0
 80a2286:	7c00      	ldrb	r0, [r0, #16]
 80a2288:	f7fe fd20 	bl	80a0ccc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a228c:	f080 0001 	eor.w	r0, r0, #1
 80a2290:	b2c0      	uxtb	r0, r0
 80a2292:	e7ee      	b.n	80a2272 <pinAvailable+0xa>
 80a2294:	4e12      	ldr	r6, [pc, #72]	; (80a22e0 <pinAvailable+0x78>)
 80a2296:	7831      	ldrb	r1, [r6, #0]
 80a2298:	f3bf 8f5b 	dmb	ish
 80a229c:	f011 0501 	ands.w	r5, r1, #1
 80a22a0:	d10d      	bne.n	80a22be <pinAvailable+0x56>
 80a22a2:	4630      	mov	r0, r6
 80a22a4:	f7fd ff08 	bl	80a00b8 <__cxa_guard_acquire>
 80a22a8:	b148      	cbz	r0, 80a22be <pinAvailable+0x56>
 80a22aa:	4629      	mov	r1, r5
 80a22ac:	480d      	ldr	r0, [pc, #52]	; (80a22e4 <pinAvailable+0x7c>)
 80a22ae:	f7ff f8eb 	bl	80a1488 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a22b2:	4630      	mov	r0, r6
 80a22b4:	f7fd ff05 	bl	80a00c2 <__cxa_guard_release>
 80a22b8:	480b      	ldr	r0, [pc, #44]	; (80a22e8 <pinAvailable+0x80>)
 80a22ba:	f000 f9a5 	bl	80a2608 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a22be:	4b09      	ldr	r3, [pc, #36]	; (80a22e4 <pinAvailable+0x7c>)
 80a22c0:	7818      	ldrb	r0, [r3, #0]
 80a22c2:	f7fe fd7f 	bl	80a0dc4 <hal_spi_is_enabled>
 80a22c6:	2800      	cmp	r0, #0
 80a22c8:	d1d2      	bne.n	80a2270 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a22ca:	3c12      	subs	r4, #18
 80a22cc:	2c01      	cmp	r4, #1
 80a22ce:	d805      	bhi.n	80a22dc <pinAvailable+0x74>
 80a22d0:	f7ff fdbe 	bl	80a1e50 <_Z22__fetch_global_Serial1v>
 80a22d4:	7c00      	ldrb	r0, [r0, #16]
 80a22d6:	f7fe fdad 	bl	80a0e34 <hal_usart_is_enabled>
 80a22da:	e7d7      	b.n	80a228c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a22dc:	2001      	movs	r0, #1
 80a22de:	e7c8      	b.n	80a2272 <pinAvailable+0xa>
 80a22e0:	20000610 	.word	0x20000610
 80a22e4:	20000614 	.word	0x20000614
 80a22e8:	080a2259 	.word	0x080a2259

080a22ec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22ec:	2817      	cmp	r0, #23
{
 80a22ee:	b538      	push	{r3, r4, r5, lr}
 80a22f0:	4604      	mov	r4, r0
 80a22f2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22f4:	d80a      	bhi.n	80a230c <pinMode+0x20>
 80a22f6:	29ff      	cmp	r1, #255	; 0xff
 80a22f8:	d008      	beq.n	80a230c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a22fa:	f7ff ffb5 	bl	80a2268 <pinAvailable>
 80a22fe:	b128      	cbz	r0, 80a230c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2300:	4629      	mov	r1, r5
 80a2302:	4620      	mov	r0, r4
}
 80a2304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2308:	f7fe bc88 	b.w	80a0c1c <HAL_Pin_Mode>
}
 80a230c:	bd38      	pop	{r3, r4, r5, pc}

080a230e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a230e:	b538      	push	{r3, r4, r5, lr}
 80a2310:	4604      	mov	r4, r0
 80a2312:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2314:	f7fe fc8a 	bl	80a0c2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2318:	28ff      	cmp	r0, #255	; 0xff
 80a231a:	d010      	beq.n	80a233e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a231c:	2806      	cmp	r0, #6
 80a231e:	d804      	bhi.n	80a232a <digitalWrite+0x1c>
 80a2320:	234d      	movs	r3, #77	; 0x4d
 80a2322:	fa23 f000 	lsr.w	r0, r3, r0
 80a2326:	07c3      	lsls	r3, r0, #31
 80a2328:	d409      	bmi.n	80a233e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a232a:	4620      	mov	r0, r4
 80a232c:	f7ff ff9c 	bl	80a2268 <pinAvailable>
 80a2330:	b128      	cbz	r0, 80a233e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2332:	4629      	mov	r1, r5
 80a2334:	4620      	mov	r0, r4
}
 80a2336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a233a:	f7fe bc7f 	b.w	80a0c3c <HAL_GPIO_Write>
}
 80a233e:	bd38      	pop	{r3, r4, r5, pc}

080a2340 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2340:	4770      	bx	lr
	...

080a2344 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2344:	2300      	movs	r3, #0
{
 80a2346:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2348:	2520      	movs	r5, #32
 80a234a:	8043      	strh	r3, [r0, #2]
 80a234c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a234e:	4e08      	ldr	r6, [pc, #32]	; (80a2370 <_Z17acquireWireBufferv+0x2c>)
{
 80a2350:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2352:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2354:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2356:	6085      	str	r5, [r0, #8]
 80a2358:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a235a:	4628      	mov	r0, r5
 80a235c:	f000 f83e 	bl	80a23dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2360:	4631      	mov	r1, r6
	};
 80a2362:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2364:	4628      	mov	r0, r5
 80a2366:	f000 f839 	bl	80a23dc <_ZnajRKSt9nothrow_t>
	};
 80a236a:	60e0      	str	r0, [r4, #12]
}
 80a236c:	4620      	mov	r0, r4
 80a236e:	bd70      	pop	{r4, r5, r6, pc}
 80a2370:	080a2b8c 	.word	0x080a2b8c

080a2374 <_Z19__fetch_global_Wirev>:
{
 80a2374:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2376:	4d0e      	ldr	r5, [pc, #56]	; (80a23b0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2378:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a237a:	7829      	ldrb	r1, [r5, #0]
 80a237c:	f3bf 8f5b 	dmb	ish
 80a2380:	f011 0401 	ands.w	r4, r1, #1
 80a2384:	d111      	bne.n	80a23aa <_Z19__fetch_global_Wirev+0x36>
 80a2386:	4628      	mov	r0, r5
 80a2388:	f7fd fe96 	bl	80a00b8 <__cxa_guard_acquire>
 80a238c:	b168      	cbz	r0, 80a23aa <_Z19__fetch_global_Wirev+0x36>
 80a238e:	a801      	add	r0, sp, #4
 80a2390:	f7ff ffd8 	bl	80a2344 <_Z17acquireWireBufferv>
 80a2394:	4621      	mov	r1, r4
 80a2396:	aa01      	add	r2, sp, #4
 80a2398:	4806      	ldr	r0, [pc, #24]	; (80a23b4 <_Z19__fetch_global_Wirev+0x40>)
 80a239a:	f7fe fea7 	bl	80a10ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a239e:	4628      	mov	r0, r5
 80a23a0:	f7fd fe8f 	bl	80a00c2 <__cxa_guard_release>
 80a23a4:	4804      	ldr	r0, [pc, #16]	; (80a23b8 <_Z19__fetch_global_Wirev+0x44>)
 80a23a6:	f000 f92f 	bl	80a2608 <atexit>
	return wire;
}
 80a23aa:	4802      	ldr	r0, [pc, #8]	; (80a23b4 <_Z19__fetch_global_Wirev+0x40>)
 80a23ac:	b007      	add	sp, #28
 80a23ae:	bd30      	pop	{r4, r5, pc}
 80a23b0:	20000624 	.word	0x20000624
 80a23b4:	20000628 	.word	0x20000628
 80a23b8:	080a2341 	.word	0x080a2341

080a23bc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23bc:	2300      	movs	r3, #0
 80a23be:	b507      	push	{r0, r1, r2, lr}
 80a23c0:	461a      	mov	r2, r3
 80a23c2:	4619      	mov	r1, r3
 80a23c4:	9300      	str	r3, [sp, #0]
 80a23c6:	4803      	ldr	r0, [pc, #12]	; (80a23d4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a23c8:	f7fe ff3a 	bl	80a1240 <_ZN9IPAddressC1Ehhhh>
 80a23cc:	b003      	add	sp, #12
 80a23ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80a23d2:	bf00      	nop
 80a23d4:	2000063c 	.word	0x2000063c

080a23d8 <_ZdlPvj>:
 80a23d8:	f7fd be61 	b.w	80a009e <_ZdlPv>

080a23dc <_ZnajRKSt9nothrow_t>:
 80a23dc:	f7fd be5d 	b.w	80a009a <_Znaj>

080a23e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a23e0:	4901      	ldr	r1, [pc, #4]	; (80a23e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a23e2:	f000 b8fb 	b.w	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a23e6:	bf00      	nop
 80a23e8:	080a2ba8 	.word	0x080a2ba8

080a23ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a23ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a23ee:	2400      	movs	r4, #0
 80a23f0:	2310      	movs	r3, #16
 80a23f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a23f6:	6803      	ldr	r3, [r0, #0]
 80a23f8:	4615      	mov	r5, r2
 80a23fa:	699e      	ldr	r6, [r3, #24]
 80a23fc:	6812      	ldr	r2, [r2, #0]
 80a23fe:	466b      	mov	r3, sp
 80a2400:	9400      	str	r4, [sp, #0]
 80a2402:	f88d 4004 	strb.w	r4, [sp, #4]
 80a2406:	47b0      	blx	r6
 80a2408:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a240c:	f003 0306 	and.w	r3, r3, #6
 80a2410:	2b06      	cmp	r3, #6
 80a2412:	bf09      	itett	eq
 80a2414:	2001      	moveq	r0, #1
 80a2416:	4620      	movne	r0, r4
 80a2418:	9b00      	ldreq	r3, [sp, #0]
 80a241a:	602b      	streq	r3, [r5, #0]
 80a241c:	b004      	add	sp, #16
 80a241e:	bd70      	pop	{r4, r5, r6, pc}

080a2420 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a2420:	9800      	ldr	r0, [sp, #0]
 80a2422:	4290      	cmp	r0, r2
 80a2424:	bf14      	ite	ne
 80a2426:	2001      	movne	r0, #1
 80a2428:	2006      	moveq	r0, #6
 80a242a:	4770      	bx	lr

080a242c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a242c:	b510      	push	{r4, lr}
 80a242e:	4604      	mov	r4, r0
 80a2430:	4b02      	ldr	r3, [pc, #8]	; (80a243c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a2432:	6003      	str	r3, [r0, #0]
 80a2434:	f000 f8cf 	bl	80a25d6 <_ZNSt9type_infoD1Ev>
 80a2438:	4620      	mov	r0, r4
 80a243a:	bd10      	pop	{r4, pc}
 80a243c:	080a2be8 	.word	0x080a2be8

080a2440 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a2440:	b510      	push	{r4, lr}
 80a2442:	4604      	mov	r4, r0
 80a2444:	f7ff fff2 	bl	80a242c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a2448:	4620      	mov	r0, r4
 80a244a:	2108      	movs	r1, #8
 80a244c:	f7ff ffc4 	bl	80a23d8 <_ZdlPvj>
 80a2450:	4620      	mov	r0, r4
 80a2452:	bd10      	pop	{r4, pc}

080a2454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a2454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2458:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a245c:	461f      	mov	r7, r3
 80a245e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a2462:	4598      	cmp	r8, r3
 80a2464:	4606      	mov	r6, r0
 80a2466:	4615      	mov	r5, r2
 80a2468:	d107      	bne.n	80a247a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a246a:	9907      	ldr	r1, [sp, #28]
 80a246c:	f000 f8b6 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a2470:	b118      	cbz	r0, 80a247a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a2472:	7165      	strb	r5, [r4, #5]
 80a2474:	2000      	movs	r0, #0
 80a2476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a247a:	4639      	mov	r1, r7
 80a247c:	4630      	mov	r0, r6
 80a247e:	f000 f8ad 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a2482:	2800      	cmp	r0, #0
 80a2484:	d0f6      	beq.n	80a2474 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a2486:	2301      	movs	r3, #1
 80a2488:	f8c4 8000 	str.w	r8, [r4]
 80a248c:	7125      	strb	r5, [r4, #4]
 80a248e:	71a3      	strb	r3, [r4, #6]
 80a2490:	e7f0      	b.n	80a2474 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a2492 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a2492:	b538      	push	{r3, r4, r5, lr}
 80a2494:	4615      	mov	r5, r2
 80a2496:	461c      	mov	r4, r3
 80a2498:	f000 f8a0 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a249c:	b120      	cbz	r0, 80a24a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a249e:	2308      	movs	r3, #8
 80a24a0:	60e3      	str	r3, [r4, #12]
 80a24a2:	2306      	movs	r3, #6
 80a24a4:	6025      	str	r5, [r4, #0]
 80a24a6:	7123      	strb	r3, [r4, #4]
 80a24a8:	bd38      	pop	{r3, r4, r5, pc}

080a24aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a24aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a24ae:	4605      	mov	r5, r0
 80a24b0:	460c      	mov	r4, r1
 80a24b2:	4616      	mov	r6, r2
 80a24b4:	461f      	mov	r7, r3
 80a24b6:	f000 f891 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a24ba:	b948      	cbnz	r0, 80a24d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a24bc:	2f03      	cmp	r7, #3
 80a24be:	d807      	bhi.n	80a24d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a24c0:	6823      	ldr	r3, [r4, #0]
 80a24c2:	4632      	mov	r2, r6
 80a24c4:	4629      	mov	r1, r5
 80a24c6:	4620      	mov	r0, r4
 80a24c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a24cc:	695b      	ldr	r3, [r3, #20]
 80a24ce:	4718      	bx	r3
 80a24d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a24d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a24d4:	b510      	push	{r4, lr}
 80a24d6:	4604      	mov	r4, r0
 80a24d8:	4b02      	ldr	r3, [pc, #8]	; (80a24e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a24da:	6003      	str	r3, [r0, #0]
 80a24dc:	f7ff ffa6 	bl	80a242c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a24e0:	4620      	mov	r0, r4
 80a24e2:	bd10      	pop	{r4, pc}
 80a24e4:	080a2c48 	.word	0x080a2c48

080a24e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a24e8:	b510      	push	{r4, lr}
 80a24ea:	4604      	mov	r4, r0
 80a24ec:	f7ff fff2 	bl	80a24d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a24f0:	4620      	mov	r0, r4
 80a24f2:	210c      	movs	r1, #12
 80a24f4:	f7ff ff70 	bl	80a23d8 <_ZdlPvj>
 80a24f8:	4620      	mov	r0, r4
 80a24fa:	bd10      	pop	{r4, pc}

080a24fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a24fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2500:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2504:	4606      	mov	r6, r0
 80a2506:	4590      	cmp	r8, r2
 80a2508:	460f      	mov	r7, r1
 80a250a:	4615      	mov	r5, r2
 80a250c:	461c      	mov	r4, r3
 80a250e:	d00b      	beq.n	80a2528 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a2510:	68b0      	ldr	r0, [r6, #8]
 80a2512:	462a      	mov	r2, r5
 80a2514:	6803      	ldr	r3, [r0, #0]
 80a2516:	f8cd 8018 	str.w	r8, [sp, #24]
 80a251a:	6a1e      	ldr	r6, [r3, #32]
 80a251c:	4639      	mov	r1, r7
 80a251e:	4623      	mov	r3, r4
 80a2520:	46b4      	mov	ip, r6
 80a2522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2526:	4760      	bx	ip
 80a2528:	4619      	mov	r1, r3
 80a252a:	f000 f857 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a252e:	2800      	cmp	r0, #0
 80a2530:	d0ee      	beq.n	80a2510 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a2532:	2006      	movs	r0, #6
 80a2534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2538 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a2538:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a253c:	460d      	mov	r5, r1
 80a253e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a2542:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a2546:	4619      	mov	r1, r3
 80a2548:	4681      	mov	r9, r0
 80a254a:	4617      	mov	r7, r2
 80a254c:	4698      	mov	r8, r3
 80a254e:	f000 f845 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a2552:	b190      	cbz	r0, 80a257a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a2554:	2d00      	cmp	r5, #0
 80a2556:	6034      	str	r4, [r6, #0]
 80a2558:	7137      	strb	r7, [r6, #4]
 80a255a:	db09      	blt.n	80a2570 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a255c:	442c      	add	r4, r5
 80a255e:	45a2      	cmp	sl, r4
 80a2560:	bf0c      	ite	eq
 80a2562:	2406      	moveq	r4, #6
 80a2564:	2401      	movne	r4, #1
 80a2566:	71b4      	strb	r4, [r6, #6]
 80a2568:	2000      	movs	r0, #0
 80a256a:	b001      	add	sp, #4
 80a256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2570:	3502      	adds	r5, #2
 80a2572:	d1f9      	bne.n	80a2568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2574:	2301      	movs	r3, #1
 80a2576:	71b3      	strb	r3, [r6, #6]
 80a2578:	e7f6      	b.n	80a2568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a257a:	4554      	cmp	r4, sl
 80a257c:	d106      	bne.n	80a258c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a257e:	4659      	mov	r1, fp
 80a2580:	4648      	mov	r0, r9
 80a2582:	f000 f82b 	bl	80a25dc <_ZNKSt9type_infoeqERKS_>
 80a2586:	b108      	cbz	r0, 80a258c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2588:	7177      	strb	r7, [r6, #5]
 80a258a:	e7ed      	b.n	80a2568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a258c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a2590:	463a      	mov	r2, r7
 80a2592:	6803      	ldr	r3, [r0, #0]
 80a2594:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a2598:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a259c:	69dc      	ldr	r4, [r3, #28]
 80a259e:	4629      	mov	r1, r5
 80a25a0:	4643      	mov	r3, r8
 80a25a2:	46a4      	mov	ip, r4
 80a25a4:	b001      	add	sp, #4
 80a25a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25aa:	4760      	bx	ip

080a25ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a25ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a25b0:	4607      	mov	r7, r0
 80a25b2:	460c      	mov	r4, r1
 80a25b4:	4615      	mov	r5, r2
 80a25b6:	461e      	mov	r6, r3
 80a25b8:	f7ff ff6b 	bl	80a2492 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a25bc:	b948      	cbnz	r0, 80a25d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a25be:	68b8      	ldr	r0, [r7, #8]
 80a25c0:	462a      	mov	r2, r5
 80a25c2:	6803      	ldr	r3, [r0, #0]
 80a25c4:	4621      	mov	r1, r4
 80a25c6:	699f      	ldr	r7, [r3, #24]
 80a25c8:	4633      	mov	r3, r6
 80a25ca:	46bc      	mov	ip, r7
 80a25cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a25d0:	4760      	bx	ip
 80a25d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a25d6 <_ZNSt9type_infoD1Ev>:
 80a25d6:	4770      	bx	lr

080a25d8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a25d8:	2000      	movs	r0, #0
 80a25da:	4770      	bx	lr

080a25dc <_ZNKSt9type_infoeqERKS_>:
 80a25dc:	4281      	cmp	r1, r0
 80a25de:	b508      	push	{r3, lr}
 80a25e0:	d00e      	beq.n	80a2600 <_ZNKSt9type_infoeqERKS_+0x24>
 80a25e2:	6840      	ldr	r0, [r0, #4]
 80a25e4:	7803      	ldrb	r3, [r0, #0]
 80a25e6:	2b2a      	cmp	r3, #42	; 0x2a
 80a25e8:	d00c      	beq.n	80a2604 <_ZNKSt9type_infoeqERKS_+0x28>
 80a25ea:	6849      	ldr	r1, [r1, #4]
 80a25ec:	780b      	ldrb	r3, [r1, #0]
 80a25ee:	2b2a      	cmp	r3, #42	; 0x2a
 80a25f0:	bf08      	it	eq
 80a25f2:	3101      	addeq	r1, #1
 80a25f4:	f000 f848 	bl	80a2688 <strcmp>
 80a25f8:	fab0 f080 	clz	r0, r0
 80a25fc:	0940      	lsrs	r0, r0, #5
 80a25fe:	bd08      	pop	{r3, pc}
 80a2600:	2001      	movs	r0, #1
 80a2602:	e7fc      	b.n	80a25fe <_ZNKSt9type_infoeqERKS_+0x22>
 80a2604:	2000      	movs	r0, #0
 80a2606:	e7fa      	b.n	80a25fe <_ZNKSt9type_infoeqERKS_+0x22>

080a2608 <atexit>:
 80a2608:	2300      	movs	r3, #0
 80a260a:	4601      	mov	r1, r0
 80a260c:	461a      	mov	r2, r3
 80a260e:	4618      	mov	r0, r3
 80a2610:	f000 b854 	b.w	80a26bc <__register_exitproc>

080a2614 <memcpy>:
 80a2614:	440a      	add	r2, r1
 80a2616:	4291      	cmp	r1, r2
 80a2618:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a261c:	d100      	bne.n	80a2620 <memcpy+0xc>
 80a261e:	4770      	bx	lr
 80a2620:	b510      	push	{r4, lr}
 80a2622:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2626:	4291      	cmp	r1, r2
 80a2628:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a262c:	d1f9      	bne.n	80a2622 <memcpy+0xe>
 80a262e:	bd10      	pop	{r4, pc}

080a2630 <memset>:
 80a2630:	4603      	mov	r3, r0
 80a2632:	4402      	add	r2, r0
 80a2634:	4293      	cmp	r3, r2
 80a2636:	d100      	bne.n	80a263a <memset+0xa>
 80a2638:	4770      	bx	lr
 80a263a:	f803 1b01 	strb.w	r1, [r3], #1
 80a263e:	e7f9      	b.n	80a2634 <memset+0x4>

080a2640 <srand>:
 80a2640:	b538      	push	{r3, r4, r5, lr}
 80a2642:	4b0d      	ldr	r3, [pc, #52]	; (80a2678 <srand+0x38>)
 80a2644:	4604      	mov	r4, r0
 80a2646:	681d      	ldr	r5, [r3, #0]
 80a2648:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a264a:	b97b      	cbnz	r3, 80a266c <srand+0x2c>
 80a264c:	2018      	movs	r0, #24
 80a264e:	f7fe fcf5 	bl	80a103c <malloc>
 80a2652:	4a0a      	ldr	r2, [pc, #40]	; (80a267c <srand+0x3c>)
 80a2654:	4b0a      	ldr	r3, [pc, #40]	; (80a2680 <srand+0x40>)
 80a2656:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2658:	e9c0 2300 	strd	r2, r3, [r0]
 80a265c:	4b09      	ldr	r3, [pc, #36]	; (80a2684 <srand+0x44>)
 80a265e:	2201      	movs	r2, #1
 80a2660:	6083      	str	r3, [r0, #8]
 80a2662:	230b      	movs	r3, #11
 80a2664:	8183      	strh	r3, [r0, #12]
 80a2666:	2300      	movs	r3, #0
 80a2668:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a266c:	2200      	movs	r2, #0
 80a266e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2670:	611c      	str	r4, [r3, #16]
 80a2672:	615a      	str	r2, [r3, #20]
 80a2674:	bd38      	pop	{r3, r4, r5, pc}
 80a2676:	bf00      	nop
 80a2678:	2000002c 	.word	0x2000002c
 80a267c:	abcd330e 	.word	0xabcd330e
 80a2680:	e66d1234 	.word	0xe66d1234
 80a2684:	0005deec 	.word	0x0005deec

080a2688 <strcmp>:
 80a2688:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a268c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2690:	2a01      	cmp	r2, #1
 80a2692:	bf28      	it	cs
 80a2694:	429a      	cmpcs	r2, r3
 80a2696:	d0f7      	beq.n	80a2688 <strcmp>
 80a2698:	1ad0      	subs	r0, r2, r3
 80a269a:	4770      	bx	lr

080a269c <strcpy>:
 80a269c:	4603      	mov	r3, r0
 80a269e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a26a2:	f803 2b01 	strb.w	r2, [r3], #1
 80a26a6:	2a00      	cmp	r2, #0
 80a26a8:	d1f9      	bne.n	80a269e <strcpy+0x2>
 80a26aa:	4770      	bx	lr

080a26ac <strlen>:
 80a26ac:	4603      	mov	r3, r0
 80a26ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a26b2:	2a00      	cmp	r2, #0
 80a26b4:	d1fb      	bne.n	80a26ae <strlen+0x2>
 80a26b6:	1a18      	subs	r0, r3, r0
 80a26b8:	3801      	subs	r0, #1
 80a26ba:	4770      	bx	lr

080a26bc <__register_exitproc>:
 80a26bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a26c0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2780 <__register_exitproc+0xc4>
 80a26c4:	4606      	mov	r6, r0
 80a26c6:	f8d8 0000 	ldr.w	r0, [r8]
 80a26ca:	461f      	mov	r7, r3
 80a26cc:	460d      	mov	r5, r1
 80a26ce:	4691      	mov	r9, r2
 80a26d0:	f000 f858 	bl	80a2784 <__retarget_lock_acquire_recursive>
 80a26d4:	4b26      	ldr	r3, [pc, #152]	; (80a2770 <__register_exitproc+0xb4>)
 80a26d6:	681c      	ldr	r4, [r3, #0]
 80a26d8:	b934      	cbnz	r4, 80a26e8 <__register_exitproc+0x2c>
 80a26da:	4c26      	ldr	r4, [pc, #152]	; (80a2774 <__register_exitproc+0xb8>)
 80a26dc:	601c      	str	r4, [r3, #0]
 80a26de:	4b26      	ldr	r3, [pc, #152]	; (80a2778 <__register_exitproc+0xbc>)
 80a26e0:	b113      	cbz	r3, 80a26e8 <__register_exitproc+0x2c>
 80a26e2:	681b      	ldr	r3, [r3, #0]
 80a26e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a26e8:	6863      	ldr	r3, [r4, #4]
 80a26ea:	2b1f      	cmp	r3, #31
 80a26ec:	dd07      	ble.n	80a26fe <__register_exitproc+0x42>
 80a26ee:	f8d8 0000 	ldr.w	r0, [r8]
 80a26f2:	f000 f849 	bl	80a2788 <__retarget_lock_release_recursive>
 80a26f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a26fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a26fe:	b35e      	cbz	r6, 80a2758 <__register_exitproc+0x9c>
 80a2700:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2704:	b988      	cbnz	r0, 80a272a <__register_exitproc+0x6e>
 80a2706:	4b1d      	ldr	r3, [pc, #116]	; (80a277c <__register_exitproc+0xc0>)
 80a2708:	b923      	cbnz	r3, 80a2714 <__register_exitproc+0x58>
 80a270a:	f8d8 0000 	ldr.w	r0, [r8]
 80a270e:	f000 f83a 	bl	80a2786 <__retarget_lock_release>
 80a2712:	e7f0      	b.n	80a26f6 <__register_exitproc+0x3a>
 80a2714:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2718:	f7fe fc90 	bl	80a103c <malloc>
 80a271c:	2800      	cmp	r0, #0
 80a271e:	d0f4      	beq.n	80a270a <__register_exitproc+0x4e>
 80a2720:	2300      	movs	r3, #0
 80a2722:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2726:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a272a:	2201      	movs	r2, #1
 80a272c:	6863      	ldr	r3, [r4, #4]
 80a272e:	2e02      	cmp	r6, #2
 80a2730:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2734:	fa02 f203 	lsl.w	r2, r2, r3
 80a2738:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a273c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2740:	ea43 0302 	orr.w	r3, r3, r2
 80a2744:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2748:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a274c:	bf02      	ittt	eq
 80a274e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2752:	431a      	orreq	r2, r3
 80a2754:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2758:	6863      	ldr	r3, [r4, #4]
 80a275a:	f8d8 0000 	ldr.w	r0, [r8]
 80a275e:	1c5a      	adds	r2, r3, #1
 80a2760:	3302      	adds	r3, #2
 80a2762:	6062      	str	r2, [r4, #4]
 80a2764:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2768:	f000 f80e 	bl	80a2788 <__retarget_lock_release_recursive>
 80a276c:	2000      	movs	r0, #0
 80a276e:	e7c4      	b.n	80a26fa <__register_exitproc+0x3e>
 80a2770:	200006e0 	.word	0x200006e0
 80a2774:	20000654 	.word	0x20000654
 80a2778:	00000000 	.word	0x00000000
 80a277c:	080a103d 	.word	0x080a103d
 80a2780:	20000090 	.word	0x20000090

080a2784 <__retarget_lock_acquire_recursive>:
 80a2784:	4770      	bx	lr

080a2786 <__retarget_lock_release>:
 80a2786:	4770      	bx	lr

080a2788 <__retarget_lock_release_recursive>:
 80a2788:	4770      	bx	lr

080a278a <link_code_end>:
	...

080a278c <dynalib_user>:
 80a278c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a279c:	0000 0000 6146 6c69 6465 7420 206f 6f62     ....Failed to bo
 80a27ac:	746f 6620 7269 7473 5620 364c 3831 5830     ot first VL6180X
 80a27bc:	4600 6961 656c 2064 6f74 6220 6f6f 2074     .Failed to boot 
 80a27cc:	6573 6f63 646e 5620 364c 3831 5830 4600     second VL6180X.F
 80a27dc:	6961 656c 2064 6f74 6220 6f6f 2074 6874     ailed to boot th
 80a27ec:	7269 2064 4c56 3136 3038 0058 6146 6c69     ird VL6180X.Fail
 80a27fc:	6465 7420 206f 6f62 746f 6620 756f 7472     ed to boot fourt
 80a280c:	2068 4c56 3136 3038 0058 6146 6c69 6465     h VL6180X.Failed
 80a281c:	7420 206f 6f62 746f 6620 6669 6874 5620      to boot fifth V
 80a282c:	364c 3831 5830 4600 6961 656c 2064 6f74     L6180X.Failed to
 80a283c:	6220 6f6f 2074 6973 7478 2068 4c56 3136      boot sixth VL61
 80a284c:	3038 0058 6146 6c69 6465 7420 206f 6f62     80X.Failed to bo
 80a285c:	746f 7320 7665 6e65 6874 5620 364c 3831     ot seventh VL618
 80a286c:	5830 4600 6961 656c 2064 6f74 6220 6f6f     0X.Failed to boo
 80a287c:	2074 6965 7467 2068 4c56 3136 3038 0058     t eigth VL6180X.
 80a288c:	6146 6c69 6465 7420 206f 6f62 746f 6e20     Failed to boot n
 80a289c:	6e69 6874 5620 364c 3831 5830 4600 6961     inth VL6180X.Fai
 80a28ac:	656c 2064 6f74 6220 6f6f 2074 6574 746e     led to boot tent
 80a28bc:	2068 4c56 3136 3038 0058 694c 7473 6e65     h VL6180X.Listen
 80a28cc:	6e69 2067 6f74 5420 5043 6320 696c 6e65     ing to TCP clien
 80a28dc:	7374 2e2e 002e 6f6c 6163 496c 2050 203d     ts....localIP = 
 80a28ec:	7325 000a 6853 7475 6f64 6e77 7020 6e69     %s..Shutdown pin
 80a28fc:	2073 6e69 7469 6465 2e2e 002e 7453 7261     s inited....Star
 80a290c:	6974 676e 2e2e 002e 6552 6461 2179 0000     ting....Ready!..

080a291c <_ZTV7TwoWire>:
	...
 80a2924:	1093 080a 10dd 080a 10b5 080a 1095 080a     ................
 80a2934:	10bd 080a 10c5 080a 10cd 080a 10d5 080a     ................

080a2944 <_ZTV9IPAddress>:
	...
 80a294c:	11a1 080a 1191 080a 1193 080a 7061 0070     ............app.

080a295c <_ZTVN5spark12NetworkClassE>:
	...
 80a2964:	1269 080a 1273 080a 127d 080a 1287 080a     i...s...}.......
 80a2974:	1291 080a 129d 080a 12a9 080a 12b1 080a     ................
 80a2984:	12b9 080a 12c5 080a 12cd 080a 12d7 080a     ................
 80a2994:	12e1 080a                                   ....

080a2998 <_ZTV21StringPrintableHelper>:
	...
 80a29a0:	14a7 080a 14a9 080a 1561 080a 1533 080a     ........a...3...
 80a29b0:	6977 6972 676e 5400 5043 6c43 6569 746e     wiring.TCPClient
 80a29c0:	7320 636f 656b 3d74 7825 0000                socket=%x..

080a29cc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a29d4:	1609 080a 1631 080a 1a53 080a 163f 080a     ....1...S...?...
 80a29e4:	160d 080a                                   ....

080a29e8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a29f0 <_ZTV9TCPClient>:
	...
 80a29f8:	1645 080a 1679 080a 15c5 080a 15df 080a     E...y...........
 80a2a08:	1855 080a 16db 080a 16ad 080a 1607 080a     U...............
 80a2a18:	1775 080a 1a59 080a 170f 080a 18c9 080a     u...Y...........
 80a2a28:	1977 080a 192f 080a 15ef 080a 193d 080a     w.../.......=...
 80a2a38:	168d 080a                                   ....

080a2a3c <_ZTV6Stream>:
	...
 80a2a4c:	00a5 080a 135d 080a 00a5 080a 00a5 080a     ....]...........
 80a2a5c:	00a5 080a 00a5 080a                         ........

080a2a64 <_ZTV15TCPServerClient>:
	...
 80a2a6c:	1c9d 080a 1cb5 080a 15c5 080a 15df 080a     ................
 80a2a7c:	1855 080a 16db 080a 16ad 080a 1607 080a     U...............
 80a2a8c:	1775 080a 1a59 080a 170f 080a 18c9 080a     u...Y...........
 80a2a9c:	1977 080a 192f 080a 15ef 080a 193d 080a     w.../.......=...
 80a2aac:	1b1b 080a                                   ....

080a2ab0 <_ZTV9TCPServer>:
	...
 80a2ab8:	1d61 080a 1d85 080a 1add 080a 1af5 080a     a...............
 80a2ac8:	1be9 080a 1ac5 080a 1b05 080a 5925 252d     ............%Y-%
 80a2ad8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a2ae8:	7361 7463 6d69 0065                         asctime.

080a2af0 <_ZTV11USARTSerial>:
	...
 80a2af8:	1dad 080a 1e17 080a 1df3 080a 135d 080a     ............]...
 80a2b08:	1dc3 080a 1ddf 080a 1dd1 080a 1ded 080a     ................
 80a2b18:	1daf 080a 1db5 080a                         ........

080a2b20 <_ZTV9USBSerial>:
	...
 80a2b28:	1e9f 080a 1f05 080a 1edd 080a 135d 080a     ............]...
 80a2b38:	1ecf 080a 1ea1 080a 1eb1 080a 1eff 080a     ................
 80a2b48:	1ec1 080a 1e99 080a                         ........

080a2b50 <_ZTVN5spark9WiFiClassE>:
	...
 80a2b58:	20db 080a 20d1 080a 20c7 080a 2039 080a     . ... ... ..9 ..
 80a2b68:	20bb 080a 20af 080a 12a9 080a 12b1 080a     . ... ..........
 80a2b78:	20a3 080a 209b 080a 2091 080a 2087 080a     . ... ... ... ..
 80a2b88:	2043 080a                                   C ..

080a2b8c <_ZSt7nothrow>:
	...

080a2b8d <_ZTSSt19_Sp_make_shared_tag>:
 80a2b8d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a2b9d:	6572 5f64 6174 0067 0000                     red_tag....

080a2ba8 <_ZTISt19_Sp_make_shared_tag>:
 80a2ba8:	2be8 080a 2b8d 080a                         .+...+..

080a2bb0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a2bb0:	2c48 080a 2bbc 080a 2c6c 080a               H,...+..l,..

080a2bbc <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a2bbc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a2bcc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a2bdc:	0045 0000                                   E...

080a2be0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a2be0:	0000 0000 2bb0 080a 242d 080a 2441 080a     .....+..-$..A$..
 80a2bf0:	25d9 080a 25d9 080a 24ab 080a 23ed 080a     .%...%...$...#..
 80a2c00:	2493 080a 2455 080a 2421 080a               .$..U$..!$..

080a2c0c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a2c0c:	2c48 080a 2c18 080a 2bb0 080a               H,...,...+..

080a2c18 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a2c18:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a2c28:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a2c38:	666e 456f 0000 0000                         nfoE....

080a2c40 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a2c40:	0000 0000 2c0c 080a 24d5 080a 24e9 080a     .....,...$...$..
 80a2c50:	25d9 080a 25d9 080a 24ab 080a 23ed 080a     .%...%...$...#..
 80a2c60:	25ad 080a 2539 080a 24fd 080a               .%..9%...$..

080a2c6c <_ZTISt9type_info>:
 80a2c6c:	2be8 080a 2c74 080a                         .+..t,..

080a2c74 <_ZTSSt9type_info>:
 80a2c74:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a2c81 <link_const_variable_data_end>:
 80a2c81:	00          	.byte	0x00
	...

080a2c84 <link_constructors_location>:
 80a2c84:	080a0a31 	.word	0x080a0a31
 80a2c88:	080a1259 	.word	0x080a1259
 80a2c8c:	080a1349 	.word	0x080a1349
 80a2c90:	080a147d 	.word	0x080a147d
 80a2c94:	080a15a1 	.word	0x080a15a1
 80a2c98:	080a1d99 	.word	0x080a1d99
 80a2c9c:	080a20e5 	.word	0x080a20e5
 80a2ca0:	080a23bd 	.word	0x080a23bd

080a2ca4 <link_constructors_end>:
	...
