
/Users/Edward/Desktop/WRIST_Firmware/target/2.3.0/photon/WRIST_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004790  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a47b0  080a47b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a47b8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  080a47bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000674  20000094  20000094  00040094  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a4850  080a4850  00034850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a4878  080a4878  00034878  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001426b6  00000000  00000000  0003487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016d3e  00000000  00000000  00176f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001c5ba  00000000  00000000  0018dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000024c8  00000000  00000000  001aa22a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005178  00000000  00000000  001ac6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002bc6f  00000000  00000000  001b186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00032e12  00000000  00000000  001dd4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b4bf8  00000000  00000000  002102eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006388  00000000  00000000  002c4ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 f89f 	bl	80a4174 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 f8a7 	bl	80a4190 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a47bc 	.word	0x080a47bc
 80a0050:	20000094 	.word	0x20000094
 80a0054:	20000094 	.word	0x20000094
 80a0058:	20000705 	.word	0x20000705
 80a005c:	20000705 	.word	0x20000705

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fda5 	bl	80a2bb0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a4790 	.word	0x080a4790
 80a0084:	080a47b0 	.word	0x080a47b0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bc40 	b.w	80a090c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fcf3 	bl	80a0a78 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 bd43 	b.w	80a2b20 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 bca7 	b.w	80a19ec <malloc>

080a009e <_Znaj>:
 80a009e:	f001 bca5 	b.w	80a19ec <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 bcab 	b.w	80a19fc <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f001 bca9 	b.w	80a19fc <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a00ba:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a00bc:	2200      	movs	r2, #0
 80a00be:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a00c0:	2220      	movs	r2, #32
  _addr = addr;
 80a00c2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a00c4:	60c2      	str	r2, [r0, #12]
#endif
}
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a00c8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a00ca:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a00cc:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a00ce:	b153      	cbz	r3, 80a00e6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a00d0:	7821      	ldrb	r1, [r4, #0]
 80a00d2:	6860      	ldr	r0, [r4, #4]
 80a00d4:	f001 fd1e 	bl	80a1b14 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a00d8:	6860      	ldr	r0, [r4, #4]
 80a00da:	f001 fd26 	bl	80a1b2a <_ZN7TwoWire15endTransmissionEv>
 80a00de:	fab0 f080 	clz	r0, r0
 80a00e2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a00e4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a00e6:	2101      	movs	r1, #1
 80a00e8:	f000 f803 	bl	80a00f2 <_ZN18Adafruit_I2CDevice5beginEb>
 80a00ec:	2800      	cmp	r0, #0
 80a00ee:	d1ef      	bne.n	80a00d0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a00f0:	e7f8      	b.n	80a00e4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a00f2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00f2:	b538      	push	{r3, r4, r5, lr}
 80a00f4:	4604      	mov	r4, r0
  _wire->begin();
 80a00f6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00f8:	460d      	mov	r5, r1
  _wire->begin();
 80a00fa:	f001 fcd9 	bl	80a1ab0 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a00fe:	2001      	movs	r0, #1
 80a0100:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a0102:	b125      	cbz	r5, 80a010e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a0104:	4620      	mov	r0, r4
}
 80a0106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a010a:	f7ff bfdd 	b.w	80a00c8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a010e:	bd38      	pop	{r3, r4, r5, pc}

080a0110 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a0110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0114:	461f      	mov	r7, r3
 80a0116:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a011a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a011c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a011e:	4432      	add	r2, r6
 80a0120:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a0122:	4604      	mov	r4, r0
 80a0124:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a0126:	d902      	bls.n	80a012e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0128:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 80a012a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a012e:	7801      	ldrb	r1, [r0, #0]
 80a0130:	6840      	ldr	r0, [r0, #4]
 80a0132:	f001 fcef 	bl	80a1b14 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0136:	b97e      	cbnz	r6, 80a0158 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a0138:	6860      	ldr	r0, [r4, #4]
 80a013a:	462a      	mov	r2, r5
 80a013c:	6803      	ldr	r3, [r0, #0]
 80a013e:	4641      	mov	r1, r8
 80a0140:	68db      	ldr	r3, [r3, #12]
 80a0142:	4798      	blx	r3
 80a0144:	4285      	cmp	r5, r0
 80a0146:	d1ef      	bne.n	80a0128 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a0148:	4639      	mov	r1, r7
 80a014a:	6860      	ldr	r0, [r4, #4]
 80a014c:	f001 fce9 	bl	80a1b22 <_ZN7TwoWire15endTransmissionEh>
 80a0150:	fab0 f080 	clz	r0, r0
 80a0154:	0940      	lsrs	r0, r0, #5
 80a0156:	e7e8      	b.n	80a012a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0158:	f1b9 0f00 	cmp.w	r9, #0
 80a015c:	d0ec      	beq.n	80a0138 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a015e:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a0160:	4632      	mov	r2, r6
 80a0162:	6803      	ldr	r3, [r0, #0]
 80a0164:	4649      	mov	r1, r9
 80a0166:	68db      	ldr	r3, [r3, #12]
 80a0168:	4798      	blx	r3
 80a016a:	42b0      	cmp	r0, r6
 80a016c:	d1dc      	bne.n	80a0128 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a016e:	e7e3      	b.n	80a0138 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a0170 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a0170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0174:	4615      	mov	r5, r2
 80a0176:	4604      	mov	r4, r0
 80a0178:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a017a:	b2d2      	uxtb	r2, r2
 80a017c:	7801      	ldrb	r1, [r0, #0]
 80a017e:	6840      	ldr	r0, [r0, #4]
 80a0180:	f001 fcb3 	bl	80a1aea <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a0184:	4285      	cmp	r5, r0
 80a0186:	d10d      	bne.n	80a01a4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a0188:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a018a:	fa1f f887 	uxth.w	r8, r7
 80a018e:	45a8      	cmp	r8, r5
 80a0190:	f107 0701 	add.w	r7, r7, #1
 80a0194:	d209      	bcs.n	80a01aa <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a0196:	6860      	ldr	r0, [r4, #4]
 80a0198:	6803      	ldr	r3, [r0, #0]
 80a019a:	695b      	ldr	r3, [r3, #20]
 80a019c:	4798      	blx	r3
 80a019e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a01a2:	e7f2      	b.n	80a018a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a01a4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a01a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01aa:	2001      	movs	r0, #1
 80a01ac:	e7fb      	b.n	80a01a6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a01ae <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a01ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01b2:	4607      	mov	r7, r0
 80a01b4:	4688      	mov	r8, r1
 80a01b6:	4616      	mov	r6, r2
 80a01b8:	4699      	mov	r9, r3
  size_t pos = 0;
 80a01ba:	2500      	movs	r5, #0
  while (pos < len) {
 80a01bc:	42b5      	cmp	r5, r6
 80a01be:	d212      	bcs.n	80a01e6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a01c0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a01c2:	1b74      	subs	r4, r6, r5
 80a01c4:	4294      	cmp	r4, r2
 80a01c6:	bf28      	it	cs
 80a01c8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a01ca:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a01cc:	42ab      	cmp	r3, r5
 80a01ce:	bf94      	ite	ls
 80a01d0:	464b      	movls	r3, r9
 80a01d2:	2300      	movhi	r3, #0
 80a01d4:	4622      	mov	r2, r4
 80a01d6:	4638      	mov	r0, r7
 80a01d8:	eb08 0105 	add.w	r1, r8, r5
 80a01dc:	f7ff ffc8 	bl	80a0170 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a01e0:	b110      	cbz	r0, 80a01e8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a01e2:	4425      	add	r5, r4
  while (pos < len) {
 80a01e4:	e7ea      	b.n	80a01bc <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a01e6:	2001      	movs	r0, #1
}
 80a01e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a01ec <_ZN16Adafruit_VL6180XC1Eh>:
    @brief  Instantiates a new VL6180X class
    @param  i2caddr Optional initial i2c address of the chip,
   VL6180X_DEFAULT_I2C_ADDR is used by default
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(uint8_t i2caddr) : _i2caddr(i2caddr) {}
 80a01ec:	2200      	movs	r2, #0
 80a01ee:	7201      	strb	r1, [r0, #8]
 80a01f0:	6002      	str	r2, [r0, #0]
 80a01f2:	4770      	bx	lr

080a01f4 <_ZN16Adafruit_VL6180X5read8Et>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  i2c_dev->write(buffer, 2);
 80a01f6:	2300      	movs	r3, #0
 80a01f8:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a01fc:	ba49      	rev16	r1, r1
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01fe:	4604      	mov	r4, r0
  buffer[0] = uint8_t(address >> 8);
 80a0200:	f8ad 100c 	strh.w	r1, [sp, #12]
  i2c_dev->write(buffer, 2);
 80a0204:	2301      	movs	r3, #1
 80a0206:	a903      	add	r1, sp, #12
 80a0208:	2202      	movs	r2, #2
 80a020a:	6800      	ldr	r0, [r0, #0]
 80a020c:	f7ff ff80 	bl	80a0110 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 80a0210:	2301      	movs	r3, #1
 80a0212:	6820      	ldr	r0, [r4, #0]
 80a0214:	461a      	mov	r2, r3
 80a0216:	a903      	add	r1, sp, #12
 80a0218:	f7ff ffc9 	bl	80a01ae <_ZN18Adafruit_I2CDevice4readEPhjb>
  return buffer[0];
}
 80a021c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a0220:	b004      	add	sp, #16
 80a0222:	bd10      	pop	{r4, pc}

080a0224 <_ZN16Adafruit_VL6180X15readRangeStatusEv>:
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0224:	214d      	movs	r1, #77	; 0x4d
uint8_t Adafruit_VL6180X::readRangeStatus(void) {
 80a0226:	b508      	push	{r3, lr}
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0228:	f7ff ffe4 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
}
 80a022c:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80a0230:	bd08      	pop	{r3, pc}

080a0232 <_ZN16Adafruit_VL6180X6write8Eth>:
  i2c_dev->read(buffer, 2);
  return uint16_t(buffer[0]) << 8 | uint16_t(buffer[1]);
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data) {
 80a0232:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[3];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  buffer[2] = data;
  i2c_dev->write(buffer, 3);
 80a0234:	2300      	movs	r3, #0
 80a0236:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a023a:	ba49      	rev16	r1, r1
 80a023c:	f8ad 100c 	strh.w	r1, [sp, #12]
  buffer[2] = data;
 80a0240:	f88d 200e 	strb.w	r2, [sp, #14]
  i2c_dev->write(buffer, 3);
 80a0244:	2301      	movs	r3, #1
 80a0246:	2203      	movs	r2, #3
 80a0248:	a903      	add	r1, sp, #12
 80a024a:	6800      	ldr	r0, [r0, #0]
 80a024c:	f7ff ff60 	bl	80a0110 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a0250:	b005      	add	sp, #20
 80a0252:	f85d fb04 	ldr.w	pc, [sp], #4

080a0256 <_ZN16Adafruit_VL6180X10setAddressEh>:
boolean Adafruit_VL6180X::setAddress(uint8_t newAddr) {
 80a0256:	b538      	push	{r3, r4, r5, lr}
 80a0258:	4604      	mov	r4, r0
 80a025a:	460d      	mov	r5, r1
  write8(VL6180X_REG_SLAVE_DEVICE_ADDRESS, newAddr & 0x7F);
 80a025c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0260:	f240 2112 	movw	r1, #530	; 0x212
 80a0264:	f7ff ffe5 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  if (i2c_dev)
 80a0268:	6820      	ldr	r0, [r4, #0]
  _i2caddr = newAddr;
 80a026a:	7225      	strb	r5, [r4, #8]
  if (i2c_dev)
 80a026c:	b110      	cbz	r0, 80a0274 <_ZN16Adafruit_VL6180X10setAddressEh+0x1e>
    delete i2c_dev;
 80a026e:	2110      	movs	r1, #16
 80a0270:	f002 fd90 	bl	80a2d94 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0274:	2010      	movs	r0, #16
 80a0276:	f7ff ff10 	bl	80a009a <_Znwj>
 80a027a:	4605      	mov	r5, r0
 80a027c:	b118      	cbz	r0, 80a0286 <_ZN16Adafruit_VL6180X10setAddressEh+0x30>
 80a027e:	6862      	ldr	r2, [r4, #4]
 80a0280:	7a21      	ldrb	r1, [r4, #8]
 80a0282:	f7ff ff1a 	bl	80a00ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return i2c_dev->begin();
 80a0286:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0288:	6025      	str	r5, [r4, #0]
  return i2c_dev->begin();
 80a028a:	2101      	movs	r1, #1
}
 80a028c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return i2c_dev->begin();
 80a0290:	f7ff bf2f 	b.w	80a00f2 <_ZN18Adafruit_I2CDevice5beginEb>

080a0294 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
 80a0294:	b510      	push	{r4, lr}
 80a0296:	4604      	mov	r4, r0
  write8(0x0207, 0x01);
 80a0298:	2201      	movs	r2, #1
 80a029a:	f240 2107 	movw	r1, #519	; 0x207
 80a029e:	f7ff ffc8 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0208, 0x01);
 80a02a2:	4620      	mov	r0, r4
 80a02a4:	2201      	movs	r2, #1
 80a02a6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80a02aa:	f7ff ffc2 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0096, 0x00);
 80a02ae:	4620      	mov	r0, r4
 80a02b0:	2200      	movs	r2, #0
 80a02b2:	2196      	movs	r1, #150	; 0x96
 80a02b4:	f7ff ffbd 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0097, 0xfd);
 80a02b8:	4620      	mov	r0, r4
 80a02ba:	22fd      	movs	r2, #253	; 0xfd
 80a02bc:	2197      	movs	r1, #151	; 0x97
 80a02be:	f7ff ffb8 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e3, 0x00);
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	2200      	movs	r2, #0
 80a02c6:	21e3      	movs	r1, #227	; 0xe3
 80a02c8:	f7ff ffb3 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e4, 0x04);
 80a02cc:	4620      	mov	r0, r4
 80a02ce:	2204      	movs	r2, #4
 80a02d0:	21e4      	movs	r1, #228	; 0xe4
 80a02d2:	f7ff ffae 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e5, 0x02);
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	2202      	movs	r2, #2
 80a02da:	21e5      	movs	r1, #229	; 0xe5
 80a02dc:	f7ff ffa9 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e6, 0x01);
 80a02e0:	4620      	mov	r0, r4
 80a02e2:	2201      	movs	r2, #1
 80a02e4:	21e6      	movs	r1, #230	; 0xe6
 80a02e6:	f7ff ffa4 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e7, 0x03);
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	2203      	movs	r2, #3
 80a02ee:	21e7      	movs	r1, #231	; 0xe7
 80a02f0:	f7ff ff9f 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00f5, 0x02);
 80a02f4:	4620      	mov	r0, r4
 80a02f6:	2202      	movs	r2, #2
 80a02f8:	21f5      	movs	r1, #245	; 0xf5
 80a02fa:	f7ff ff9a 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00d9, 0x05);
 80a02fe:	4620      	mov	r0, r4
 80a0300:	2205      	movs	r2, #5
 80a0302:	21d9      	movs	r1, #217	; 0xd9
 80a0304:	f7ff ff95 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00db, 0xce);
 80a0308:	4620      	mov	r0, r4
 80a030a:	22ce      	movs	r2, #206	; 0xce
 80a030c:	21db      	movs	r1, #219	; 0xdb
 80a030e:	f7ff ff90 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dc, 0x03);
 80a0312:	4620      	mov	r0, r4
 80a0314:	2203      	movs	r2, #3
 80a0316:	21dc      	movs	r1, #220	; 0xdc
 80a0318:	f7ff ff8b 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dd, 0xf8);
 80a031c:	4620      	mov	r0, r4
 80a031e:	22f8      	movs	r2, #248	; 0xf8
 80a0320:	21dd      	movs	r1, #221	; 0xdd
 80a0322:	f7ff ff86 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x009f, 0x00);
 80a0326:	4620      	mov	r0, r4
 80a0328:	2200      	movs	r2, #0
 80a032a:	219f      	movs	r1, #159	; 0x9f
 80a032c:	f7ff ff81 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00a3, 0x3c);
 80a0330:	4620      	mov	r0, r4
 80a0332:	223c      	movs	r2, #60	; 0x3c
 80a0334:	21a3      	movs	r1, #163	; 0xa3
 80a0336:	f7ff ff7c 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b7, 0x00);
 80a033a:	4620      	mov	r0, r4
 80a033c:	2200      	movs	r2, #0
 80a033e:	21b7      	movs	r1, #183	; 0xb7
 80a0340:	f7ff ff77 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00bb, 0x3c);
 80a0344:	4620      	mov	r0, r4
 80a0346:	223c      	movs	r2, #60	; 0x3c
 80a0348:	21bb      	movs	r1, #187	; 0xbb
 80a034a:	f7ff ff72 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b2, 0x09);
 80a034e:	4620      	mov	r0, r4
 80a0350:	2209      	movs	r2, #9
 80a0352:	21b2      	movs	r1, #178	; 0xb2
 80a0354:	f7ff ff6d 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ca, 0x09);
 80a0358:	4620      	mov	r0, r4
 80a035a:	2209      	movs	r2, #9
 80a035c:	21ca      	movs	r1, #202	; 0xca
 80a035e:	f7ff ff68 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0198, 0x01);
 80a0362:	4620      	mov	r0, r4
 80a0364:	2201      	movs	r2, #1
 80a0366:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80a036a:	f7ff ff62 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01b0, 0x17);
 80a036e:	4620      	mov	r0, r4
 80a0370:	2217      	movs	r2, #23
 80a0372:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80a0376:	f7ff ff5c 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ad, 0x00);
 80a037a:	4620      	mov	r0, r4
 80a037c:	2200      	movs	r2, #0
 80a037e:	f240 11ad 	movw	r1, #429	; 0x1ad
 80a0382:	f7ff ff56 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ff, 0x05);
 80a0386:	4620      	mov	r0, r4
 80a0388:	2205      	movs	r2, #5
 80a038a:	21ff      	movs	r1, #255	; 0xff
 80a038c:	f7ff ff51 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0100, 0x05);
 80a0390:	4620      	mov	r0, r4
 80a0392:	2205      	movs	r2, #5
 80a0394:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0398:	f7ff ff4b 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0199, 0x05);
 80a039c:	4620      	mov	r0, r4
 80a039e:	2205      	movs	r2, #5
 80a03a0:	f240 1199 	movw	r1, #409	; 0x199
 80a03a4:	f7ff ff45 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a6, 0x1b);
 80a03a8:	4620      	mov	r0, r4
 80a03aa:	221b      	movs	r2, #27
 80a03ac:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80a03b0:	f7ff ff3f 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ac, 0x3e);
 80a03b4:	4620      	mov	r0, r4
 80a03b6:	223e      	movs	r2, #62	; 0x3e
 80a03b8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80a03bc:	f7ff ff39 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a7, 0x1f);
 80a03c0:	4620      	mov	r0, r4
 80a03c2:	221f      	movs	r2, #31
 80a03c4:	f240 11a7 	movw	r1, #423	; 0x1a7
 80a03c8:	f7ff ff33 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0030, 0x00);
 80a03cc:	4620      	mov	r0, r4
 80a03ce:	2200      	movs	r2, #0
 80a03d0:	2130      	movs	r1, #48	; 0x30
 80a03d2:	f7ff ff2e 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0011, 0x10); // Enables polling for 'New Sample ready'
 80a03d6:	4620      	mov	r0, r4
 80a03d8:	2210      	movs	r2, #16
 80a03da:	2111      	movs	r1, #17
 80a03dc:	f7ff ff29 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x010a, 0x30); // Set the averaging sample period
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	2230      	movs	r2, #48	; 0x30
 80a03e4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80a03e8:	f7ff ff23 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003f, 0x46); // Sets the light and dark gain (upper
 80a03ec:	4620      	mov	r0, r4
 80a03ee:	2246      	movs	r2, #70	; 0x46
 80a03f0:	213f      	movs	r1, #63	; 0x3f
 80a03f2:	f7ff ff1e 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0031, 0xFF); // sets the # of range measurements after
 80a03f6:	4620      	mov	r0, r4
 80a03f8:	22ff      	movs	r2, #255	; 0xff
 80a03fa:	2131      	movs	r1, #49	; 0x31
 80a03fc:	f7ff ff19 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0041, 0x63); // Set ALS integration time to 100ms
 80a0400:	4620      	mov	r0, r4
 80a0402:	2263      	movs	r2, #99	; 0x63
 80a0404:	2141      	movs	r1, #65	; 0x41
 80a0406:	f7ff ff14 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x002e, 0x01); // perform a single temperature calibration
 80a040a:	4620      	mov	r0, r4
 80a040c:	2201      	movs	r2, #1
 80a040e:	212e      	movs	r1, #46	; 0x2e
 80a0410:	f7ff ff0f 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD,
 80a0414:	4620      	mov	r0, r4
 80a0416:	2209      	movs	r2, #9
 80a0418:	211b      	movs	r1, #27
 80a041a:	f7ff ff0a 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003e, 0x31); // Set default ALS inter-measurement period
 80a041e:	4620      	mov	r0, r4
 80a0420:	2231      	movs	r2, #49	; 0x31
 80a0422:	213e      	movs	r1, #62	; 0x3e
 80a0424:	f7ff ff05 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a0428:	4620      	mov	r0, r4
}
 80a042a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a042e:	2224      	movs	r2, #36	; 0x24
 80a0430:	2114      	movs	r1, #20
 80a0432:	f7ff befe 	b.w	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>

080a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
 80a0436:	b538      	push	{r3, r4, r5, lr}
 80a0438:	4604      	mov	r4, r0
  _i2c = theWire;
 80a043a:	6041      	str	r1, [r0, #4]
  if (i2c_dev)
 80a043c:	6800      	ldr	r0, [r0, #0]
 80a043e:	b110      	cbz	r0, 80a0446 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    delete i2c_dev;
 80a0440:	2110      	movs	r1, #16
 80a0442:	f002 fca7 	bl	80a2d94 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0446:	2010      	movs	r0, #16
 80a0448:	f7ff fe27 	bl	80a009a <_Znwj>
 80a044c:	4605      	mov	r5, r0
 80a044e:	b118      	cbz	r0, 80a0458 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x22>
 80a0450:	6862      	ldr	r2, [r4, #4]
 80a0452:	7a21      	ldrb	r1, [r4, #8]
 80a0454:	f7ff fe31 	bl	80a00ba <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 80a0458:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a045a:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin())
 80a045c:	2101      	movs	r1, #1
 80a045e:	f7ff fe48 	bl	80a00f2 <_ZN18Adafruit_I2CDevice5beginEb>
 80a0462:	4605      	mov	r5, r0
 80a0464:	b910      	cbnz	r0, 80a046c <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    return false;
 80a0466:	2500      	movs	r5, #0
}
 80a0468:	4628      	mov	r0, r5
 80a046a:	bd38      	pop	{r3, r4, r5, pc}
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 80a046c:	2100      	movs	r1, #0
 80a046e:	4620      	mov	r0, r4
 80a0470:	f7ff fec0 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
 80a0474:	28b4      	cmp	r0, #180	; 0xb4
 80a0476:	d1f6      	bne.n	80a0466 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x30>
  if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 80a0478:	2116      	movs	r1, #22
 80a047a:	4620      	mov	r0, r4
 80a047c:	f7ff feba 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
 80a0480:	07c3      	lsls	r3, r0, #31
 80a0482:	d5f1      	bpl.n	80a0468 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>
    loadSettings();
 80a0484:	4620      	mov	r0, r4
 80a0486:	f7ff ff05 	bl	80a0294 <_ZN16Adafruit_VL6180X12loadSettingsEv>
    write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80a048a:	2200      	movs	r2, #0
 80a048c:	2116      	movs	r1, #22
 80a048e:	4620      	mov	r0, r4
 80a0490:	f7ff fecf 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
 80a0494:	e7e8      	b.n	80a0468 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>

080a0496 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
 80a0496:	b538      	push	{r3, r4, r5, lr}
 80a0498:	4604      	mov	r4, r0
  while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80a049a:	214d      	movs	r1, #77	; 0x4d
 80a049c:	4620      	mov	r0, r4
 80a049e:	f7ff fea9 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
 80a04a2:	07c2      	lsls	r2, r0, #31
 80a04a4:	d5f9      	bpl.n	80a049a <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80a04a6:	2201      	movs	r2, #1
 80a04a8:	2118      	movs	r1, #24
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	f7ff fec1 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
  while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80a04b0:	214f      	movs	r1, #79	; 0x4f
 80a04b2:	4620      	mov	r0, r4
 80a04b4:	f7ff fe9e 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
 80a04b8:	0743      	lsls	r3, r0, #29
 80a04ba:	d5f9      	bpl.n	80a04b0 <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 80a04bc:	2162      	movs	r1, #98	; 0x62
 80a04be:	4620      	mov	r0, r4
 80a04c0:	f7ff fe98 	bl	80a01f4 <_ZN16Adafruit_VL6180X5read8Et>
 80a04c4:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 80a04c6:	2207      	movs	r2, #7
 80a04c8:	4620      	mov	r0, r4
 80a04ca:	2115      	movs	r1, #21
 80a04cc:	f7ff feb1 	bl	80a0232 <_ZN16Adafruit_VL6180X6write8Eth>
}
 80a04d0:	4628      	mov	r0, r5
 80a04d2:	bd38      	pop	{r3, r4, r5, pc}

080a04d4 <_Z13mqtt_callbackPcPhj>:

// objects for MQTT
MQTT client(MQTT_HOST, MQTT_PORT, mqtt_callback);
char data[sizeof(uint32_t) + COUNT_SENSORS];

void mqtt_callback(char *topic, byte *payload, unsigned int length) {
 80a04d4:	b530      	push	{r4, r5, lr}
    // Serial.println(topic);
    if (!strcmp(topic, BATT_TOPIC_ASK)) {
 80a04d6:	4932      	ldr	r1, [pc, #200]	; (80a05a0 <_Z13mqtt_callbackPcPhj+0xcc>)
void mqtt_callback(char *topic, byte *payload, unsigned int length) {
 80a04d8:	b08f      	sub	sp, #60	; 0x3c
    if (!strcmp(topic, BATT_TOPIC_ASK)) {
 80a04da:	f003 fe85 	bl	80a41e8 <strcmp>
 80a04de:	2800      	cmp	r0, #0
 80a04e0:	d15c      	bne.n	80a059c <_Z13mqtt_callbackPcPhj+0xc8>
        double voltage = lipo.getVoltage();
 80a04e2:	4830      	ldr	r0, [pc, #192]	; (80a05a4 <_Z13mqtt_callbackPcPhj+0xd0>)
 80a04e4:	f000 ffec 	bl	80a14c0 <_ZN8MAX1704310getVoltageEv>
 80a04e8:	4605      	mov	r5, r0
        double soc = lipo.getSOC();
 80a04ea:	482e      	ldr	r0, [pc, #184]	; (80a05a4 <_Z13mqtt_callbackPcPhj+0xd0>)
 80a04ec:	f000 fff6 	bl	80a14dc <_ZN8MAX170436getSOCEv>

        String batt_data = "";
 80a04f0:	492d      	ldr	r1, [pc, #180]	; (80a05a8 <_Z13mqtt_callbackPcPhj+0xd4>)
        double soc = lipo.getSOC();
 80a04f2:	4604      	mov	r4, r0
        String batt_data = "";
 80a04f4:	a802      	add	r0, sp, #8
 80a04f6:	f001 fd2d 	bl	80a1f54 <_ZN6StringC1EPKc>
        uint32_t timestamp = Time.now();
 80a04fa:	f002 f89d 	bl	80a2638 <_ZN9TimeClass3nowEv>
        batt_data += String(timestamp) + ",";
 80a04fe:	220a      	movs	r2, #10
        uint32_t timestamp = Time.now();
 80a0500:	4601      	mov	r1, r0
        batt_data += String(timestamp) + ",";
 80a0502:	a80a      	add	r0, sp, #40	; 0x28
 80a0504:	f001 fd77 	bl	80a1ff6 <_ZN6StringC1Emh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0508:	a90a      	add	r1, sp, #40	; 0x28
 80a050a:	a806      	add	r0, sp, #24
 80a050c:	f001 fd44 	bl	80a1f98 <_ZN6StringC1ERKS_>
 80a0510:	4926      	ldr	r1, [pc, #152]	; (80a05ac <_Z13mqtt_callbackPcPhj+0xd8>)
 80a0512:	a806      	add	r0, sp, #24
 80a0514:	f001 fdc0 	bl	80a2098 <_ZplRK15StringSumHelperPKc>
 80a0518:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a051a:	a802      	add	r0, sp, #8
 80a051c:	f001 fdac 	bl	80a2078 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0520:	a806      	add	r0, sp, #24
 80a0522:	f001 fccd 	bl	80a1ec0 <_ZN6StringD1Ev>
 80a0526:	a80a      	add	r0, sp, #40	; 0x28
 80a0528:	f001 fcca 	bl	80a1ec0 <_ZN6StringD1Ev>
        double voltage = lipo.getVoltage();
 80a052c:	4628      	mov	r0, r5
 80a052e:	f002 fead 	bl	80a328c <__aeabi_f2d>
        batt_data += String(voltage) + ",";
 80a0532:	2506      	movs	r5, #6
        double voltage = lipo.getVoltage();
 80a0534:	4602      	mov	r2, r0
 80a0536:	460b      	mov	r3, r1
        batt_data += String(voltage) + ",";
 80a0538:	9500      	str	r5, [sp, #0]
 80a053a:	a80a      	add	r0, sp, #40	; 0x28
 80a053c:	f001 fd6f 	bl	80a201e <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80a0540:	a90a      	add	r1, sp, #40	; 0x28
 80a0542:	a806      	add	r0, sp, #24
 80a0544:	f001 fd28 	bl	80a1f98 <_ZN6StringC1ERKS_>
 80a0548:	4918      	ldr	r1, [pc, #96]	; (80a05ac <_Z13mqtt_callbackPcPhj+0xd8>)
 80a054a:	a806      	add	r0, sp, #24
 80a054c:	f001 fda4 	bl	80a2098 <_ZplRK15StringSumHelperPKc>
 80a0550:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0552:	a802      	add	r0, sp, #8
 80a0554:	f001 fd90 	bl	80a2078 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0558:	a806      	add	r0, sp, #24
 80a055a:	f001 fcb1 	bl	80a1ec0 <_ZN6StringD1Ev>
 80a055e:	a80a      	add	r0, sp, #40	; 0x28
 80a0560:	f001 fcae 	bl	80a1ec0 <_ZN6StringD1Ev>
        double soc = lipo.getSOC();
 80a0564:	4620      	mov	r0, r4
 80a0566:	f002 fe91 	bl	80a328c <__aeabi_f2d>
        batt_data += String(soc);
 80a056a:	9500      	str	r5, [sp, #0]
        double soc = lipo.getSOC();
 80a056c:	4602      	mov	r2, r0
 80a056e:	460b      	mov	r3, r1
        batt_data += String(soc);
 80a0570:	a80a      	add	r0, sp, #40	; 0x28
 80a0572:	f001 fd54 	bl	80a201e <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0576:	a90a      	add	r1, sp, #40	; 0x28
 80a0578:	a802      	add	r0, sp, #8
 80a057a:	f001 fd7d 	bl	80a2078 <_ZN6String6concatERKS_>
 80a057e:	a80a      	add	r0, sp, #40	; 0x28
 80a0580:	f001 fc9e 	bl	80a1ec0 <_ZN6StringD1Ev>
        Serial.print(soc);
        Serial.println(" %");
        Serial.println();
#endif

        if (client.isConnected()) {
 80a0584:	480a      	ldr	r0, [pc, #40]	; (80a05b0 <_Z13mqtt_callbackPcPhj+0xdc>)
 80a0586:	f000 fc1a 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a058a:	b120      	cbz	r0, 80a0596 <_Z13mqtt_callbackPcPhj+0xc2>
            client.publish(BATT_TOPIC, batt_data);
 80a058c:	9a02      	ldr	r2, [sp, #8]
 80a058e:	4909      	ldr	r1, [pc, #36]	; (80a05b4 <_Z13mqtt_callbackPcPhj+0xe0>)
 80a0590:	4807      	ldr	r0, [pc, #28]	; (80a05b0 <_Z13mqtt_callbackPcPhj+0xdc>)
 80a0592:	f000 fd90 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>
        String batt_data = "";
 80a0596:	a802      	add	r0, sp, #8
 80a0598:	f001 fc92 	bl	80a1ec0 <_ZN6StringD1Ev>
        }
    }
}
 80a059c:	b00f      	add	sp, #60	; 0x3c
 80a059e:	bd30      	pop	{r4, r5, pc}
 80a05a0:	080a4300 	.word	0x080a4300
 80a05a4:	20000191 	.word	0x20000191
 80a05a8:	080a449b 	.word	0x080a449b
 80a05ac:	080a430f 	.word	0x080a430f
 80a05b0:	20000094 	.word	0x20000094
 80a05b4:	080a4311 	.word	0x080a4311

080a05b8 <_Z12set_sht_pinsh>:

void set_sht_pins(byte state) {
 80a05b8:	b538      	push	{r3, r4, r5, lr}
 80a05ba:	4605      	mov	r5, r0
    for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a05bc:	2402      	movs	r4, #2
        digitalWrite(pin, state);
 80a05be:	b2a0      	uxth	r0, r4
 80a05c0:	4629      	mov	r1, r5
    for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a05c2:	3401      	adds	r4, #1
        digitalWrite(pin, state);
 80a05c4:	f002 fb81 	bl	80a2cca <digitalWrite>
    for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a05c8:	2c0f      	cmp	r4, #15
 80a05ca:	d1f8      	bne.n	80a05be <_Z12set_sht_pinsh+0x6>
    }
}
 80a05cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a05d0 <_Z13start_sensorsv>:

void start_sensors() {
 80a05d0:	b508      	push	{r3, lr}
    // all reset
    set_sht_pins(LOW);
 80a05d2:	2000      	movs	r0, #0
 80a05d4:	f7ff fff0 	bl	80a05b8 <_Z12set_sht_pinsh>
    delay(10);
 80a05d8:	200a      	movs	r0, #10
 80a05da:	f001 fa27 	bl	80a1a2c <delay>

    // all unreset
    set_sht_pins(HIGH);
 80a05de:	2001      	movs	r0, #1
 80a05e0:	f7ff ffea 	bl	80a05b8 <_Z12set_sht_pinsh>
    delay(10);
 80a05e4:	200a      	movs	r0, #10
 80a05e6:	f001 fa21 	bl	80a1a2c <delay>

    // activating LOX1 and reseting LOX2
    digitalWrite(SHT_LOX1, HIGH);
 80a05ea:	2101      	movs	r1, #1
 80a05ec:	2002      	movs	r0, #2
 80a05ee:	f002 fb6c 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a05f2:	2100      	movs	r1, #0
 80a05f4:	2003      	movs	r0, #3
 80a05f6:	f002 fb68 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a05fa:	2100      	movs	r1, #0
 80a05fc:	2004      	movs	r0, #4
 80a05fe:	f002 fb64 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX4, LOW);
 80a0602:	2100      	movs	r1, #0
 80a0604:	2005      	movs	r0, #5
 80a0606:	f002 fb60 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX5, LOW);
 80a060a:	2100      	movs	r1, #0
 80a060c:	2006      	movs	r0, #6
 80a060e:	f002 fb5c 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX6, LOW);
 80a0612:	2100      	movs	r1, #0
 80a0614:	200a      	movs	r0, #10
 80a0616:	f002 fb58 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX7, LOW);
 80a061a:	2100      	movs	r1, #0
 80a061c:	200b      	movs	r0, #11
 80a061e:	f002 fb54 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX8, LOW);
 80a0622:	2100      	movs	r1, #0
 80a0624:	200c      	movs	r0, #12
 80a0626:	f002 fb50 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX9, LOW);
 80a062a:	2100      	movs	r1, #0
 80a062c:	200d      	movs	r0, #13
 80a062e:	f002 fb4c 	bl	80a2cca <digitalWrite>
    digitalWrite(SHT_LOX10, LOW);
 80a0632:	2100      	movs	r1, #0
 80a0634:	200e      	movs	r0, #14
 80a0636:	f002 fb48 	bl	80a2cca <digitalWrite>

    // initing LOX1
    if (!lox1.begin()) {
 80a063a:	f002 fb79 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a063e:	4601      	mov	r1, r0
 80a0640:	4875      	ldr	r0, [pc, #468]	; (80a0818 <_Z13start_sensorsv+0x248>)
 80a0642:	f7ff fef8 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0646:	b928      	cbnz	r0, 80a0654 <_Z13start_sensorsv+0x84>
        Serial.println(F("Failed to boot first VL6180X"));
 80a0648:	f002 f8f8 	bl	80a283c <_Z16_fetch_usbserialv>
 80a064c:	4973      	ldr	r1, [pc, #460]	; (80a081c <_Z13start_sensorsv+0x24c>)
 80a064e:	f001 fba8 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0652:	e7fe      	b.n	80a0652 <_Z13start_sensorsv+0x82>
    }
    lox1.setAddress(LOX1_ADDRESS);
 80a0654:	2130      	movs	r1, #48	; 0x30
 80a0656:	4870      	ldr	r0, [pc, #448]	; (80a0818 <_Z13start_sensorsv+0x248>)
 80a0658:	f7ff fdfd 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>
    delay(10);
 80a065c:	200a      	movs	r0, #10
 80a065e:	f001 f9e5 	bl	80a1a2c <delay>

    // activating LOX2
    digitalWrite(SHT_LOX2, HIGH);
 80a0662:	2101      	movs	r1, #1
 80a0664:	2003      	movs	r0, #3
 80a0666:	f002 fb30 	bl	80a2cca <digitalWrite>
    delay(10);
 80a066a:	200a      	movs	r0, #10
 80a066c:	f001 f9de 	bl	80a1a2c <delay>

    // initing LOX2
    if (!lox2.begin()) {
 80a0670:	f002 fb5e 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a0674:	4601      	mov	r1, r0
 80a0676:	486a      	ldr	r0, [pc, #424]	; (80a0820 <_Z13start_sensorsv+0x250>)
 80a0678:	f7ff fedd 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a067c:	b928      	cbnz	r0, 80a068a <_Z13start_sensorsv+0xba>
        Serial.println(F("Failed to boot second VL6180X"));
 80a067e:	f002 f8dd 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0682:	4968      	ldr	r1, [pc, #416]	; (80a0824 <_Z13start_sensorsv+0x254>)
 80a0684:	f001 fb8d 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0688:	e7fe      	b.n	80a0688 <_Z13start_sensorsv+0xb8>
    }
    lox2.setAddress(LOX2_ADDRESS);
 80a068a:	2131      	movs	r1, #49	; 0x31
 80a068c:	4864      	ldr	r0, [pc, #400]	; (80a0820 <_Z13start_sensorsv+0x250>)
 80a068e:	f7ff fde2 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX3
    digitalWrite(SHT_LOX3, HIGH);
 80a0692:	2101      	movs	r1, #1
 80a0694:	2004      	movs	r0, #4
 80a0696:	f002 fb18 	bl	80a2cca <digitalWrite>
    delay(10);
 80a069a:	200a      	movs	r0, #10
 80a069c:	f001 f9c6 	bl	80a1a2c <delay>

    // initing LOX3
    if (!lox3.begin()) {
 80a06a0:	f002 fb46 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a06a4:	4601      	mov	r1, r0
 80a06a6:	4860      	ldr	r0, [pc, #384]	; (80a0828 <_Z13start_sensorsv+0x258>)
 80a06a8:	f7ff fec5 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06ac:	b928      	cbnz	r0, 80a06ba <_Z13start_sensorsv+0xea>
        Serial.println(F("Failed to boot third VL6180X"));
 80a06ae:	f002 f8c5 	bl	80a283c <_Z16_fetch_usbserialv>
 80a06b2:	495e      	ldr	r1, [pc, #376]	; (80a082c <_Z13start_sensorsv+0x25c>)
 80a06b4:	f001 fb75 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06b8:	e7fe      	b.n	80a06b8 <_Z13start_sensorsv+0xe8>
    }
    lox3.setAddress(LOX3_ADDRESS);
 80a06ba:	2132      	movs	r1, #50	; 0x32
 80a06bc:	485a      	ldr	r0, [pc, #360]	; (80a0828 <_Z13start_sensorsv+0x258>)
 80a06be:	f7ff fdca 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX4
    digitalWrite(SHT_LOX4, HIGH);
 80a06c2:	2101      	movs	r1, #1
 80a06c4:	2005      	movs	r0, #5
 80a06c6:	f002 fb00 	bl	80a2cca <digitalWrite>
    delay(10);
 80a06ca:	200a      	movs	r0, #10
 80a06cc:	f001 f9ae 	bl	80a1a2c <delay>

    // initing LOX4
    if (!lox4.begin()) {
 80a06d0:	f002 fb2e 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a06d4:	4601      	mov	r1, r0
 80a06d6:	4856      	ldr	r0, [pc, #344]	; (80a0830 <_Z13start_sensorsv+0x260>)
 80a06d8:	f7ff fead 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06dc:	b928      	cbnz	r0, 80a06ea <_Z13start_sensorsv+0x11a>
        Serial.println(F("Failed to boot fourth VL6180X"));
 80a06de:	f002 f8ad 	bl	80a283c <_Z16_fetch_usbserialv>
 80a06e2:	4954      	ldr	r1, [pc, #336]	; (80a0834 <_Z13start_sensorsv+0x264>)
 80a06e4:	f001 fb5d 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06e8:	e7fe      	b.n	80a06e8 <_Z13start_sensorsv+0x118>
    }
    lox4.setAddress(LOX4_ADDRESS);
 80a06ea:	2133      	movs	r1, #51	; 0x33
 80a06ec:	4850      	ldr	r0, [pc, #320]	; (80a0830 <_Z13start_sensorsv+0x260>)
 80a06ee:	f7ff fdb2 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX5
    digitalWrite(SHT_LOX5, HIGH);
 80a06f2:	2101      	movs	r1, #1
 80a06f4:	2006      	movs	r0, #6
 80a06f6:	f002 fae8 	bl	80a2cca <digitalWrite>
    delay(10);
 80a06fa:	200a      	movs	r0, #10
 80a06fc:	f001 f996 	bl	80a1a2c <delay>

    // initing LOX5
    if (!lox5.begin()) {
 80a0700:	f002 fb16 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a0704:	4601      	mov	r1, r0
 80a0706:	484c      	ldr	r0, [pc, #304]	; (80a0838 <_Z13start_sensorsv+0x268>)
 80a0708:	f7ff fe95 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a070c:	b928      	cbnz	r0, 80a071a <_Z13start_sensorsv+0x14a>
        Serial.println(F("Failed to boot fifth VL6180X"));
 80a070e:	f002 f895 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0712:	494a      	ldr	r1, [pc, #296]	; (80a083c <_Z13start_sensorsv+0x26c>)
 80a0714:	f001 fb45 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0718:	e7fe      	b.n	80a0718 <_Z13start_sensorsv+0x148>
    }
    lox5.setAddress(LOX5_ADDRESS);
 80a071a:	2134      	movs	r1, #52	; 0x34
 80a071c:	4846      	ldr	r0, [pc, #280]	; (80a0838 <_Z13start_sensorsv+0x268>)
 80a071e:	f7ff fd9a 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX6
    digitalWrite(SHT_LOX6, HIGH);
 80a0722:	2101      	movs	r1, #1
 80a0724:	200a      	movs	r0, #10
 80a0726:	f002 fad0 	bl	80a2cca <digitalWrite>
    delay(10);
 80a072a:	200a      	movs	r0, #10
 80a072c:	f001 f97e 	bl	80a1a2c <delay>

    // initing LOX6
    if (!lox6.begin()) {
 80a0730:	f002 fafe 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a0734:	4601      	mov	r1, r0
 80a0736:	4842      	ldr	r0, [pc, #264]	; (80a0840 <_Z13start_sensorsv+0x270>)
 80a0738:	f7ff fe7d 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a073c:	b928      	cbnz	r0, 80a074a <_Z13start_sensorsv+0x17a>
        Serial.println(F("Failed to boot sixth VL6180X"));
 80a073e:	f002 f87d 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0742:	4940      	ldr	r1, [pc, #256]	; (80a0844 <_Z13start_sensorsv+0x274>)
 80a0744:	f001 fb2d 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0748:	e7fe      	b.n	80a0748 <_Z13start_sensorsv+0x178>
    }
    lox6.setAddress(LOX6_ADDRESS);
 80a074a:	2135      	movs	r1, #53	; 0x35
 80a074c:	483c      	ldr	r0, [pc, #240]	; (80a0840 <_Z13start_sensorsv+0x270>)
 80a074e:	f7ff fd82 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX7
    digitalWrite(SHT_LOX7, HIGH);
 80a0752:	2101      	movs	r1, #1
 80a0754:	200b      	movs	r0, #11
 80a0756:	f002 fab8 	bl	80a2cca <digitalWrite>
    delay(10);
 80a075a:	200a      	movs	r0, #10
 80a075c:	f001 f966 	bl	80a1a2c <delay>

    // initing LOX7
    if (!lox7.begin()) {
 80a0760:	f002 fae6 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a0764:	4601      	mov	r1, r0
 80a0766:	4838      	ldr	r0, [pc, #224]	; (80a0848 <_Z13start_sensorsv+0x278>)
 80a0768:	f7ff fe65 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a076c:	b928      	cbnz	r0, 80a077a <_Z13start_sensorsv+0x1aa>
        Serial.println(F("Failed to boot seventh VL6180X"));
 80a076e:	f002 f865 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0772:	4936      	ldr	r1, [pc, #216]	; (80a084c <_Z13start_sensorsv+0x27c>)
 80a0774:	f001 fb15 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0778:	e7fe      	b.n	80a0778 <_Z13start_sensorsv+0x1a8>
    }
    lox7.setAddress(LOX7_ADDRESS);
 80a077a:	2137      	movs	r1, #55	; 0x37
 80a077c:	4832      	ldr	r0, [pc, #200]	; (80a0848 <_Z13start_sensorsv+0x278>)
 80a077e:	f7ff fd6a 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX8
    digitalWrite(SHT_LOX8, HIGH);
 80a0782:	2101      	movs	r1, #1
 80a0784:	200c      	movs	r0, #12
 80a0786:	f002 faa0 	bl	80a2cca <digitalWrite>
    delay(10);
 80a078a:	200a      	movs	r0, #10
 80a078c:	f001 f94e 	bl	80a1a2c <delay>

    // initing LOX8
    if (!lox8.begin()) {
 80a0790:	f002 face 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a0794:	4601      	mov	r1, r0
 80a0796:	482e      	ldr	r0, [pc, #184]	; (80a0850 <_Z13start_sensorsv+0x280>)
 80a0798:	f7ff fe4d 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a079c:	b928      	cbnz	r0, 80a07aa <_Z13start_sensorsv+0x1da>
        Serial.println(F("Failed to boot eigth VL6180X"));
 80a079e:	f002 f84d 	bl	80a283c <_Z16_fetch_usbserialv>
 80a07a2:	492c      	ldr	r1, [pc, #176]	; (80a0854 <_Z13start_sensorsv+0x284>)
 80a07a4:	f001 fafd 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a07a8:	e7fe      	b.n	80a07a8 <_Z13start_sensorsv+0x1d8>
    }
    lox8.setAddress(LOX8_ADDRESS);
 80a07aa:	2138      	movs	r1, #56	; 0x38
 80a07ac:	4828      	ldr	r0, [pc, #160]	; (80a0850 <_Z13start_sensorsv+0x280>)
 80a07ae:	f7ff fd52 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX9
    digitalWrite(SHT_LOX9, HIGH);
 80a07b2:	2101      	movs	r1, #1
 80a07b4:	200d      	movs	r0, #13
 80a07b6:	f002 fa88 	bl	80a2cca <digitalWrite>
    delay(10);
 80a07ba:	200a      	movs	r0, #10
 80a07bc:	f001 f936 	bl	80a1a2c <delay>

    // initing LOX9
    if (!lox9.begin()) {
 80a07c0:	f002 fab6 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a07c4:	4601      	mov	r1, r0
 80a07c6:	4824      	ldr	r0, [pc, #144]	; (80a0858 <_Z13start_sensorsv+0x288>)
 80a07c8:	f7ff fe35 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a07cc:	b928      	cbnz	r0, 80a07da <_Z13start_sensorsv+0x20a>
        Serial.println(F("Failed to boot ninth VL6180X"));
 80a07ce:	f002 f835 	bl	80a283c <_Z16_fetch_usbserialv>
 80a07d2:	4922      	ldr	r1, [pc, #136]	; (80a085c <_Z13start_sensorsv+0x28c>)
 80a07d4:	f001 fae5 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a07d8:	e7fe      	b.n	80a07d8 <_Z13start_sensorsv+0x208>
    }
    lox9.setAddress(LOX9_ADDRESS);
 80a07da:	2139      	movs	r1, #57	; 0x39
 80a07dc:	481e      	ldr	r0, [pc, #120]	; (80a0858 <_Z13start_sensorsv+0x288>)
 80a07de:	f7ff fd3a 	bl	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX10
    digitalWrite(SHT_LOX10, HIGH);
 80a07e2:	2101      	movs	r1, #1
 80a07e4:	200e      	movs	r0, #14
 80a07e6:	f002 fa70 	bl	80a2cca <digitalWrite>
    delay(10);
 80a07ea:	200a      	movs	r0, #10
 80a07ec:	f001 f91e 	bl	80a1a2c <delay>

    // initing LOX10
    if (!lox10.begin()) {
 80a07f0:	f002 fa9e 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a07f4:	4601      	mov	r1, r0
 80a07f6:	481a      	ldr	r0, [pc, #104]	; (80a0860 <_Z13start_sensorsv+0x290>)
 80a07f8:	f7ff fe1d 	bl	80a0436 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a07fc:	b928      	cbnz	r0, 80a080a <_Z13start_sensorsv+0x23a>
        Serial.println(F("Failed to boot tenth VL6180X"));
 80a07fe:	f002 f81d 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0802:	4918      	ldr	r1, [pc, #96]	; (80a0864 <_Z13start_sensorsv+0x294>)
 80a0804:	f001 facd 	bl	80a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0808:	e7fe      	b.n	80a0808 <_Z13start_sensorsv+0x238>
    }
    lox10.setAddress(LOX10_ADDRESS);
 80a080a:	213a      	movs	r1, #58	; 0x3a
}
 80a080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lox10.setAddress(LOX10_ADDRESS);
 80a0810:	4813      	ldr	r0, [pc, #76]	; (80a0860 <_Z13start_sensorsv+0x290>)
 80a0812:	f7ff bd20 	b.w	80a0256 <_ZN16Adafruit_VL6180X10setAddressEh>
 80a0816:	bf00      	nop
 80a0818:	20000104 	.word	0x20000104
 80a081c:	080a4324 	.word	0x080a4324
 80a0820:	2000011c 	.word	0x2000011c
 80a0824:	080a4341 	.word	0x080a4341
 80a0828:	20000128 	.word	0x20000128
 80a082c:	080a435f 	.word	0x080a435f
 80a0830:	20000134 	.word	0x20000134
 80a0834:	080a437c 	.word	0x080a437c
 80a0838:	20000140 	.word	0x20000140
 80a083c:	080a439a 	.word	0x080a439a
 80a0840:	2000014c 	.word	0x2000014c
 80a0844:	080a43b7 	.word	0x080a43b7
 80a0848:	20000158 	.word	0x20000158
 80a084c:	080a43d4 	.word	0x080a43d4
 80a0850:	20000164 	.word	0x20000164
 80a0854:	080a43f3 	.word	0x080a43f3
 80a0858:	20000170 	.word	0x20000170
 80a085c:	080a4410 	.word	0x080a4410
 80a0860:	20000110 	.word	0x20000110
 80a0864:	080a442d 	.word	0x080a442d

080a0868 <_Z24round_robin_read_sensorsv>:

void round_robin_read_sensors() {
 80a0868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a086c:	4d22      	ldr	r5, [pc, #136]	; (80a08f8 <_Z24round_robin_read_sensorsv+0x90>)
 80a086e:	4c23      	ldr	r4, [pc, #140]	; (80a08fc <_Z24round_robin_read_sensorsv+0x94>)
 80a0870:	782b      	ldrb	r3, [r5, #0]
 80a0872:	4e23      	ldr	r6, [pc, #140]	; (80a0900 <_Z24round_robin_read_sensorsv+0x98>)
 80a0874:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80a0878:	f7ff fe0d 	bl	80a0496 <_ZN16Adafruit_VL6180X9readRangeEv>
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a087c:	782b      	ldrb	r3, [r5, #0]
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a087e:	4682      	mov	sl, r0
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a0880:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80a0884:	f7ff fcce 	bl	80a0224 <_ZN16Adafruit_VL6180X15readRangeStatusEv>

    sensor_status[sensor_idx] = status_lox;
 80a0888:	782c      	ldrb	r4, [r5, #0]
 80a088a:	4b1e      	ldr	r3, [pc, #120]	; (80a0904 <_Z24round_robin_read_sensorsv+0x9c>)
 80a088c:	5518      	strb	r0, [r3, r4]
    if (status_lox == VL6180X_ERROR_NONE) {
 80a088e:	bb38      	cbnz	r0, 80a08e0 <_Z24round_robin_read_sensorsv+0x78>
        // apply EWMA filter
        uint8_t val = ALPHA * range_lox + (1.0 - ALPHA) * sensor_ranges_prev[sensor_idx];
 80a0890:	4f1d      	ldr	r7, [pc, #116]	; (80a0908 <_Z24round_robin_read_sensorsv+0xa0>)

        // save EWMA filtered value
        data[sizeof(uint32_t) + sensor_idx] = val;
 80a0892:	4426      	add	r6, r4
        uint8_t val = ALPHA * range_lox + (1.0 - ALPHA) * sensor_ranges_prev[sensor_idx];
 80a0894:	5d38      	ldrb	r0, [r7, r4]
 80a0896:	f002 fce7 	bl	80a3268 <__aeabi_i2d>
 80a089a:	a313      	add	r3, pc, #76	; (adr r3, 80a08e8 <_Z24round_robin_read_sensorsv+0x80>)
 80a089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a08a0:	f002 fd4c 	bl	80a333c <__aeabi_dmul>
 80a08a4:	4680      	mov	r8, r0
 80a08a6:	4650      	mov	r0, sl
 80a08a8:	4689      	mov	r9, r1
 80a08aa:	f002 fcdd 	bl	80a3268 <__aeabi_i2d>
 80a08ae:	a310      	add	r3, pc, #64	; (adr r3, 80a08f0 <_Z24round_robin_read_sensorsv+0x88>)
 80a08b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a08b4:	f002 fd42 	bl	80a333c <__aeabi_dmul>
 80a08b8:	4602      	mov	r2, r0
 80a08ba:	460b      	mov	r3, r1
 80a08bc:	4640      	mov	r0, r8
 80a08be:	4649      	mov	r1, r9
 80a08c0:	f002 fb86 	bl	80a2fd0 <__adddf3>
 80a08c4:	f002 ffd4 	bl	80a3870 <__aeabi_d2uiz>
 80a08c8:	b2c0      	uxtb	r0, r0
        data[sizeof(uint32_t) + sensor_idx] = val;
 80a08ca:	7130      	strb	r0, [r6, #4]
        sensor_ranges_prev[sensor_idx] = val;
 80a08cc:	5538      	strb	r0, [r7, r4]
    }
    else {
        data[sizeof(uint32_t) + sensor_idx] = -1;
    }

    sensor_idx = (sensor_idx + 1) % COUNT_SENSORS;
 80a08ce:	220a      	movs	r2, #10
 80a08d0:	3401      	adds	r4, #1
 80a08d2:	fbb4 f3f2 	udiv	r3, r4, r2
 80a08d6:	fb02 4413 	mls	r4, r2, r3, r4
 80a08da:	702c      	strb	r4, [r5, #0]
}
 80a08dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        data[sizeof(uint32_t) + sensor_idx] = -1;
 80a08e0:	23ff      	movs	r3, #255	; 0xff
 80a08e2:	4426      	add	r6, r4
 80a08e4:	7133      	strb	r3, [r6, #4]
 80a08e6:	e7f2      	b.n	80a08ce <_Z24round_robin_read_sensorsv+0x66>
 80a08e8:	66666666 	.word	0x66666666
 80a08ec:	3fe66666 	.word	0x3fe66666
 80a08f0:	33333333 	.word	0x33333333
 80a08f4:	3fd33333 	.word	0x3fd33333
 80a08f8:	2000017c 	.word	0x2000017c
 80a08fc:	20000000 	.word	0x20000000
 80a0900:	200000f4 	.word	0x200000f4
 80a0904:	20000187 	.word	0x20000187
 80a0908:	2000017d 	.word	0x2000017d

080a090c <setup>:

void setup() {
 80a090c:	b570      	push	{r4, r5, r6, lr}
 80a090e:	b088      	sub	sp, #32
    Serial.begin(115200);
 80a0910:	f001 ff94 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0914:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0918:	f001 ff70 	bl	80a27fc <_ZN9USBSerial5beginEl>

    // wait until serial port opens for native USB devices
    while (!Serial) {
 80a091c:	f001 ff8e 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0920:	f001 ff73 	bl	80a280a <_ZN9USBSerialcvbEv>
 80a0924:	b918      	cbnz	r0, 80a092e <setup+0x22>
        delay(1);
 80a0926:	2001      	movs	r0, #1
 80a0928:	f001 f880 	bl	80a1a2c <delay>
    while (!Serial) {
 80a092c:	e7f6      	b.n	80a091c <setup+0x10>
    }

    Serial.println("Connecting to MQTT host...");
 80a092e:	f001 ff85 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0932:	4949      	ldr	r1, [pc, #292]	; (80a0a58 <setup+0x14c>)
 80a0934:	f001 fa2b 	bl	80a1d8e <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 80a0938:	4948      	ldr	r1, [pc, #288]	; (80a0a5c <setup+0x150>)
 80a093a:	a804      	add	r0, sp, #16
 80a093c:	f001 fb0a 	bl	80a1f54 <_ZN6StringC1EPKc>
    client.connect(MQTT_NAME);
 80a0940:	f001 fe7a 	bl	80a2638 <_ZN9TimeClass3nowEv>
 80a0944:	220a      	movs	r2, #10
 80a0946:	4601      	mov	r1, r0
 80a0948:	4668      	mov	r0, sp
 80a094a:	f001 fb41 	bl	80a1fd0 <_ZN6StringC1Elh>
 80a094e:	4669      	mov	r1, sp
 80a0950:	a804      	add	r0, sp, #16
 80a0952:	f001 fb95 	bl	80a2080 <_ZplRK15StringSumHelperRK6String>
 80a0956:	6801      	ldr	r1, [r0, #0]
 80a0958:	4841      	ldr	r0, [pc, #260]	; (80a0a60 <setup+0x154>)
 80a095a:	f000 fb21 	bl	80a0fa0 <_ZN4MQTT7connectEPKc>
 80a095e:	4668      	mov	r0, sp
 80a0960:	f001 faae 	bl	80a1ec0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0964:	a804      	add	r0, sp, #16
 80a0966:	f001 faab 	bl	80a1ec0 <_ZN6StringD1Ev>
    while (!client.isConnected()) {
 80a096a:	4c3d      	ldr	r4, [pc, #244]	; (80a0a60 <setup+0x154>)
        Serial.println("Connecting to MQTT host...");
 80a096c:	4e3a      	ldr	r6, [pc, #232]	; (80a0a58 <setup+0x14c>)
	StringSumHelper(const char *p) : String(p) {}
 80a096e:	4d3b      	ldr	r5, [pc, #236]	; (80a0a5c <setup+0x150>)
    while (!client.isConnected()) {
 80a0970:	4620      	mov	r0, r4
 80a0972:	f000 fa24 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a0976:	bb10      	cbnz	r0, 80a09be <setup+0xb2>
        Serial.println("Connecting to MQTT host...");
 80a0978:	f001 ff60 	bl	80a283c <_Z16_fetch_usbserialv>
 80a097c:	4631      	mov	r1, r6
 80a097e:	f001 fa06 	bl	80a1d8e <_ZN5Print7printlnEPKc>
 80a0982:	4629      	mov	r1, r5
 80a0984:	a804      	add	r0, sp, #16
 80a0986:	f001 fae5 	bl	80a1f54 <_ZN6StringC1EPKc>
        client.connect(MQTT_NAME);
 80a098a:	f001 fe55 	bl	80a2638 <_ZN9TimeClass3nowEv>
 80a098e:	220a      	movs	r2, #10
 80a0990:	4601      	mov	r1, r0
 80a0992:	4668      	mov	r0, sp
 80a0994:	f001 fb1c 	bl	80a1fd0 <_ZN6StringC1Elh>
 80a0998:	4669      	mov	r1, sp
 80a099a:	a804      	add	r0, sp, #16
 80a099c:	f001 fb70 	bl	80a2080 <_ZplRK15StringSumHelperRK6String>
 80a09a0:	6801      	ldr	r1, [r0, #0]
 80a09a2:	4620      	mov	r0, r4
 80a09a4:	f000 fafc 	bl	80a0fa0 <_ZN4MQTT7connectEPKc>
 80a09a8:	4668      	mov	r0, sp
 80a09aa:	f001 fa89 	bl	80a1ec0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a09ae:	a804      	add	r0, sp, #16
 80a09b0:	f001 fa86 	bl	80a1ec0 <_ZN6StringD1Ev>
        delay(1000);
 80a09b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a09b8:	f001 f838 	bl	80a1a2c <delay>
    while (!client.isConnected()) {
 80a09bc:	e7d8      	b.n	80a0970 <setup+0x64>
    }

    client.subscribe(BATT_TOPIC_ASK);
 80a09be:	4929      	ldr	r1, [pc, #164]	; (80a0a64 <setup+0x158>)
 80a09c0:	4827      	ldr	r0, [pc, #156]	; (80a0a60 <setup+0x154>)
 80a09c2:	f000 fd15 	bl	80a13f0 <_ZN4MQTT9subscribeEPKc>

    pinMode(SHT_LOX1, OUTPUT);
 80a09c6:	2101      	movs	r1, #1
 80a09c8:	2002      	movs	r0, #2
 80a09ca:	f002 f96d 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX2, OUTPUT);
 80a09ce:	2101      	movs	r1, #1
 80a09d0:	2003      	movs	r0, #3
 80a09d2:	f002 f969 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX3, OUTPUT);
 80a09d6:	2101      	movs	r1, #1
 80a09d8:	2004      	movs	r0, #4
 80a09da:	f002 f965 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX4, OUTPUT);
 80a09de:	2101      	movs	r1, #1
 80a09e0:	2005      	movs	r0, #5
 80a09e2:	f002 f961 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX5, OUTPUT);
 80a09e6:	2101      	movs	r1, #1
 80a09e8:	2006      	movs	r0, #6
 80a09ea:	f002 f95d 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX6, OUTPUT);
 80a09ee:	2101      	movs	r1, #1
 80a09f0:	200a      	movs	r0, #10
 80a09f2:	f002 f959 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX7, OUTPUT);
 80a09f6:	2101      	movs	r1, #1
 80a09f8:	200b      	movs	r0, #11
 80a09fa:	f002 f955 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX8, OUTPUT);
 80a09fe:	2101      	movs	r1, #1
 80a0a00:	200c      	movs	r0, #12
 80a0a02:	f002 f951 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX9, OUTPUT);
 80a0a06:	2101      	movs	r1, #1
 80a0a08:	200d      	movs	r0, #13
 80a0a0a:	f002 f94d 	bl	80a2ca8 <pinMode>
    pinMode(SHT_LOX10, OUTPUT);
 80a0a0e:	2101      	movs	r1, #1
 80a0a10:	200e      	movs	r0, #14
 80a0a12:	f002 f949 	bl	80a2ca8 <pinMode>

    Serial.println("Shutdown pins inited...");
 80a0a16:	f001 ff11 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0a1a:	4913      	ldr	r1, [pc, #76]	; (80a0a68 <setup+0x15c>)
 80a0a1c:	f001 f9b7 	bl	80a1d8e <_ZN5Print7printlnEPKc>

    set_sht_pins(LOW);
 80a0a20:	2000      	movs	r0, #0
 80a0a22:	f7ff fdc9 	bl	80a05b8 <_Z12set_sht_pinsh>
    Serial.println("Starting...");
 80a0a26:	f001 ff09 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0a2a:	4910      	ldr	r1, [pc, #64]	; (80a0a6c <setup+0x160>)
 80a0a2c:	f001 f9af 	bl	80a1d8e <_ZN5Print7printlnEPKc>
    start_sensors();
 80a0a30:	f7ff fdce 	bl	80a05d0 <_Z13start_sensorsv>

    // initialize the MAX17043 LiPo fuel gauge
    lipo.begin();
 80a0a34:	480e      	ldr	r0, [pc, #56]	; (80a0a70 <setup+0x164>)
 80a0a36:	f000 fcde 	bl	80a13f6 <_ZN8MAX170435beginEv>
    // quick start restarts the MAX17043 in hopes of getting a more accurate guess for the SOC.
    lipo.quickStart();
 80a0a3a:	480d      	ldr	r0, [pc, #52]	; (80a0a70 <setup+0x164>)
 80a0a3c:	f000 fd02 	bl	80a1444 <_ZN8MAX1704310quickStartEv>
    // set alert threshold to 20%.
    lipo.setThreshold(20);
 80a0a40:	2114      	movs	r1, #20
 80a0a42:	480b      	ldr	r0, [pc, #44]	; (80a0a70 <setup+0x164>)
 80a0a44:	f000 fd64 	bl	80a1510 <_ZN8MAX1704312setThresholdEh>

    Serial.println("Ready!");
 80a0a48:	f001 fef8 	bl	80a283c <_Z16_fetch_usbserialv>
 80a0a4c:	4909      	ldr	r1, [pc, #36]	; (80a0a74 <setup+0x168>)
 80a0a4e:	f001 f99e 	bl	80a1d8e <_ZN5Print7printlnEPKc>
}
 80a0a52:	b008      	add	sp, #32
 80a0a54:	bd70      	pop	{r4, r5, r6, pc}
 80a0a56:	bf00      	nop
 80a0a58:	080a444a 	.word	0x080a444a
 80a0a5c:	080a4465 	.word	0x080a4465
 80a0a60:	20000094 	.word	0x20000094
 80a0a64:	080a4300 	.word	0x080a4300
 80a0a68:	080a4471 	.word	0x080a4471
 80a0a6c:	080a4489 	.word	0x080a4489
 80a0a70:	20000191 	.word	0x20000191
 80a0a74:	080a4495 	.word	0x080a4495

080a0a78 <loop>:

void loop() {
 80a0a78:	b510      	push	{r4, lr}
    round_robin_read_sensors();
 80a0a7a:	f7ff fef5 	bl	80a0868 <_Z24round_robin_read_sensorsv>

    if (sensor_idx == COUNT_SENSORS - 1) {
 80a0a7e:	4b0d      	ldr	r3, [pc, #52]	; (80a0ab4 <loop+0x3c>)
 80a0a80:	781b      	ldrb	r3, [r3, #0]
 80a0a82:	2b09      	cmp	r3, #9
 80a0a84:	d10c      	bne.n	80a0aa0 <loop+0x28>

            if (i != COUNT_SENSORS-1) Serial.print(" : ");
        }
        Serial.println();
#endif
        uint32_t timestamp = Time.now();
 80a0a86:	f001 fdd7 	bl	80a2638 <_ZN9TimeClass3nowEv>
        *(uint32_t *)(&data) = timestamp;
 80a0a8a:	4c0b      	ldr	r4, [pc, #44]	; (80a0ab8 <loop+0x40>)
 80a0a8c:	6020      	str	r0, [r4, #0]

        if (client.isConnected()) {
 80a0a8e:	480b      	ldr	r0, [pc, #44]	; (80a0abc <loop+0x44>)
 80a0a90:	f000 f995 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a0a94:	b120      	cbz	r0, 80a0aa0 <loop+0x28>
            client.publish(DATA_TOPIC, data);
 80a0a96:	4622      	mov	r2, r4
 80a0a98:	4909      	ldr	r1, [pc, #36]	; (80a0ac0 <loop+0x48>)
 80a0a9a:	4808      	ldr	r0, [pc, #32]	; (80a0abc <loop+0x44>)
 80a0a9c:	f000 fb0b 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>
        }
    }

    if (client.isConnected()) client.loop();
 80a0aa0:	4806      	ldr	r0, [pc, #24]	; (80a0abc <loop+0x44>)
 80a0aa2:	f000 f98c 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a0aa6:	b120      	cbz	r0, 80a0ab2 <loop+0x3a>
}
 80a0aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (client.isConnected()) client.loop();
 80a0aac:	4803      	ldr	r0, [pc, #12]	; (80a0abc <loop+0x44>)
 80a0aae:	f000 bb5d 	b.w	80a116c <_ZN4MQTT4loopEv>
}
 80a0ab2:	bd10      	pop	{r4, pc}
 80a0ab4:	2000017c 	.word	0x2000017c
 80a0ab8:	200000f4 	.word	0x200000f4
 80a0abc:	20000094 	.word	0x20000094
 80a0ac0:	080a449c 	.word	0x080a449c

080a0ac4 <_GLOBAL__sub_I_lox1>:
 80a0ac4:	b507      	push	{r0, r1, r2, lr}
Adafruit_VL6180X lox1  = Adafruit_VL6180X();
 80a0ac6:	2129      	movs	r1, #41	; 0x29
 80a0ac8:	4819      	ldr	r0, [pc, #100]	; (80a0b30 <_GLOBAL__sub_I_lox1+0x6c>)
 80a0aca:	f7ff fb8f 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox2  = Adafruit_VL6180X();
 80a0ace:	2129      	movs	r1, #41	; 0x29
 80a0ad0:	4818      	ldr	r0, [pc, #96]	; (80a0b34 <_GLOBAL__sub_I_lox1+0x70>)
 80a0ad2:	f7ff fb8b 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox3  = Adafruit_VL6180X();
 80a0ad6:	2129      	movs	r1, #41	; 0x29
 80a0ad8:	4817      	ldr	r0, [pc, #92]	; (80a0b38 <_GLOBAL__sub_I_lox1+0x74>)
 80a0ada:	f7ff fb87 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox4  = Adafruit_VL6180X();
 80a0ade:	2129      	movs	r1, #41	; 0x29
 80a0ae0:	4816      	ldr	r0, [pc, #88]	; (80a0b3c <_GLOBAL__sub_I_lox1+0x78>)
 80a0ae2:	f7ff fb83 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox5  = Adafruit_VL6180X();
 80a0ae6:	2129      	movs	r1, #41	; 0x29
 80a0ae8:	4815      	ldr	r0, [pc, #84]	; (80a0b40 <_GLOBAL__sub_I_lox1+0x7c>)
 80a0aea:	f7ff fb7f 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox6  = Adafruit_VL6180X();
 80a0aee:	2129      	movs	r1, #41	; 0x29
 80a0af0:	4814      	ldr	r0, [pc, #80]	; (80a0b44 <_GLOBAL__sub_I_lox1+0x80>)
 80a0af2:	f7ff fb7b 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox7  = Adafruit_VL6180X();
 80a0af6:	2129      	movs	r1, #41	; 0x29
 80a0af8:	4813      	ldr	r0, [pc, #76]	; (80a0b48 <_GLOBAL__sub_I_lox1+0x84>)
 80a0afa:	f7ff fb77 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox8  = Adafruit_VL6180X();
 80a0afe:	2129      	movs	r1, #41	; 0x29
 80a0b00:	4812      	ldr	r0, [pc, #72]	; (80a0b4c <_GLOBAL__sub_I_lox1+0x88>)
 80a0b02:	f7ff fb73 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox9  = Adafruit_VL6180X();
 80a0b06:	2129      	movs	r1, #41	; 0x29
 80a0b08:	4811      	ldr	r0, [pc, #68]	; (80a0b50 <_GLOBAL__sub_I_lox1+0x8c>)
 80a0b0a:	f7ff fb6f 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox10 = Adafruit_VL6180X();
 80a0b0e:	2129      	movs	r1, #41	; 0x29
 80a0b10:	4810      	ldr	r0, [pc, #64]	; (80a0b54 <_GLOBAL__sub_I_lox1+0x90>)
 80a0b12:	f7ff fb6b 	bl	80a01ec <_ZN16Adafruit_VL6180XC1Eh>
MQTT client(MQTT_HOST, MQTT_PORT, mqtt_callback);
 80a0b16:	2300      	movs	r3, #0
 80a0b18:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0b1c:	9300      	str	r3, [sp, #0]
 80a0b1e:	490e      	ldr	r1, [pc, #56]	; (80a0b58 <_GLOBAL__sub_I_lox1+0x94>)
 80a0b20:	4b0e      	ldr	r3, [pc, #56]	; (80a0b5c <_GLOBAL__sub_I_lox1+0x98>)
 80a0b22:	480f      	ldr	r0, [pc, #60]	; (80a0b60 <_GLOBAL__sub_I_lox1+0x9c>)
 80a0b24:	f000 f862 	bl	80a0bec <_ZN4MQTTC1EPKctPFvPcPhjEb>
}
 80a0b28:	b003      	add	sp, #12
 80a0b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0b2e:	bf00      	nop
 80a0b30:	20000104 	.word	0x20000104
 80a0b34:	2000011c 	.word	0x2000011c
 80a0b38:	20000128 	.word	0x20000128
 80a0b3c:	20000134 	.word	0x20000134
 80a0b40:	20000140 	.word	0x20000140
 80a0b44:	2000014c 	.word	0x2000014c
 80a0b48:	20000158 	.word	0x20000158
 80a0b4c:	20000164 	.word	0x20000164
 80a0b50:	20000170 	.word	0x20000170
 80a0b54:	20000110 	.word	0x20000110
 80a0b58:	080a44af 	.word	0x080a44af
 80a0b5c:	080a04d5 	.word	0x080a04d5
 80a0b60:	20000094 	.word	0x20000094

080a0b64 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a0b64:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a0b68:	b510      	push	{r4, lr}
 80a0b6a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a0b6c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a0b6e:	b113      	cbz	r3, 80a0b76 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a0b70:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a0b72:	f000 fceb 	bl	80a154c <os_mutex_lock>
#endif
#endif
#endif
        }
 80a0b76:	4620      	mov	r0, r4
 80a0b78:	bd10      	pop	{r4, pc}

080a0b7a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a0b7a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a0b7c:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a0b7e:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a0b80:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a0b84:	b112      	cbz	r2, 80a0b8c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a0b86:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a0b88:	f000 fce8 	bl	80a155c <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	bd10      	pop	{r4, pc}

080a0b90 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a0b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b92:	461f      	mov	r7, r3
 80a0b94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a0b98:	4604      	mov	r4, r0
 80a0b9a:	460d      	mov	r5, r1
 80a0b9c:	4616      	mov	r6, r2
    if (thread) {
 80a0b9e:	b123      	cbz	r3, 80a0baa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 80a0ba0:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a0ba2:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a0ba4:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a0ba6:	f000 fcc9 	bl	80a153c <os_mutex_create>
    }
    this->callback = callback;
 80a0baa:	9b08      	ldr	r3, [sp, #32]
 80a0bac:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a0bae:	2300      	movs	r3, #0
 80a0bb0:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0bb2:	b106      	cbz	r6, 80a0bb6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 80a0bb4:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a0bb6:	b125      	cbz	r5, 80a0bc2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 80a0bb8:	4629      	mov	r1, r5
 80a0bba:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0bbe:	f001 f9f6 	bl	80a1fae <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0bc2:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0bc4:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a0bc6:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0bc8:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a0bca:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0bce:	2bff      	cmp	r3, #255	; 0xff
 80a0bd0:	bfb8      	it	lt
 80a0bd2:	23ff      	movlt	r3, #255	; 0xff
 80a0bd4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0bd8:	b108      	cbz	r0, 80a0bde <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 80a0bda:	f7ff fa64 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0bde:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0be2:	f7ff fa5c 	bl	80a009e <_Znaj>
 80a0be6:	61e0      	str	r0, [r4, #28]
}
 80a0be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0bec <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0bf0:	4604      	mov	r4, r0
            bool thread) {
 80a0bf2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0bf4:	4698      	mov	r8, r3
 80a0bf6:	4617      	mov	r7, r2
 80a0bf8:	460e      	mov	r6, r1
            bool thread) {
 80a0bfa:	f001 fca5 	bl	80a2548 <_ZN9TCPClientC1Ev>
 80a0bfe:	490d      	ldr	r1, [pc, #52]	; (80a0c34 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 80a0c00:	61e5      	str	r5, [r4, #28]
 80a0c02:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0c06:	f001 f9a5 	bl	80a1f54 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a0c0a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a0c0e:	22ff      	movs	r2, #255	; 0xff
 80a0c10:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a0c14:	230f      	movs	r3, #15
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	e9cd 3200 	strd	r3, r2, [sp]
 80a0c1c:	4631      	mov	r1, r6
 80a0c1e:	463b      	mov	r3, r7
 80a0c20:	462a      	mov	r2, r5
            bool thread) {
 80a0c22:	64a5      	str	r5, [r4, #72]	; 0x48
 80a0c24:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a0c28:	f7ff ffb2 	bl	80a0b90 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 80a0c2c:	4620      	mov	r0, r4
 80a0c2e:	b004      	add	sp, #16
 80a0c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0c34:	080a449b 	.word	0x080a449b

080a0c38 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0c38:	b510      	push	{r4, lr}
 80a0c3a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	f001 fb99 	bl	80a2374 <_ZN9TCPClient9availableEv>
 80a0c42:	2800      	cmp	r0, #0
 80a0c44:	d0fa      	beq.n	80a0c3c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0c46:	4620      	mov	r0, r4
 80a0c48:	f001 fad7 	bl	80a21fa <_ZN9TCPClient4readEv>
}
 80a0c4c:	b2c0      	uxtb	r0, r0
 80a0c4e:	bd10      	pop	{r4, pc}

080a0c50 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c54:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0c56:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0c58:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0c5a:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a0c5c:	f7ff ffec 	bl	80a0c38 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a0c60:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a0c64:	7020      	strb	r0, [r4, #0]
 80a0c66:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0c68:	69eb      	ldr	r3, [r5, #28]
 80a0c6a:	f893 a000 	ldrb.w	sl, [r3]
 80a0c6e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0c72:	4628      	mov	r0, r5
 80a0c74:	f7ff ffe0 	bl	80a0c38 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0c78:	4626      	mov	r6, r4
 80a0c7a:	69eb      	ldr	r3, [r5, #28]
 80a0c7c:	3401      	adds	r4, #1
 80a0c7e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0c80:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0c84:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0c88:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a0c8a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0c8c:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a0c90:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a0c94:	d4ed      	bmi.n	80a0c72 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a0c96:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0c98:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a0c9c:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a0ca0:	d124      	bne.n	80a0cec <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0ca2:	4628      	mov	r0, r5
 80a0ca4:	69ef      	ldr	r7, [r5, #28]
 80a0ca6:	f7ff ffc7 	bl	80a0c38 <_ZN4MQTT8readByteEv>
 80a0caa:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a0cac:	4628      	mov	r0, r5
 80a0cae:	69ef      	ldr	r7, [r5, #28]
 80a0cb0:	f7ff ffc2 	bl	80a0c38 <_ZN4MQTT8readByteEv>
 80a0cb4:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a0cb6:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a0cb8:	b2b6      	uxth	r6, r6
 80a0cba:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0cbc:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a0cbe:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0cc0:	b2b6      	uxth	r6, r6
 80a0cc2:	46b1      	mov	r9, r6
 80a0cc4:	4627      	mov	r7, r4
 80a0cc6:	45c1      	cmp	r9, r8
 80a0cc8:	d212      	bcs.n	80a0cf0 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0cca:	4628      	mov	r0, r5
 80a0ccc:	f7ff ffb4 	bl	80a0c38 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0cd0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a0cd4:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a0cd8:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a0cda:	bf88      	it	hi
 80a0cdc:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a0cde:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a0ce2:	bf88      	it	hi
 80a0ce4:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a0ce6:	3701      	adds	r7, #1
 80a0ce8:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a0cea:	e7ec      	b.n	80a0cc6 <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a0cec:	2600      	movs	r6, #0
 80a0cee:	e7e7      	b.n	80a0cc0 <_ZN4MQTT10readPacketEPh+0x70>
 80a0cf0:	eba8 0006 	sub.w	r0, r8, r6
 80a0cf4:	45b0      	cmp	r8, r6
 80a0cf6:	bf2c      	ite	cs
 80a0cf8:	4606      	movcs	r6, r0
 80a0cfa:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a0cfc:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a0d00:	4434      	add	r4, r6
 80a0d02:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0d04:	42a0      	cmp	r0, r4
 80a0d06:	bf2c      	ite	cs
 80a0d08:	4620      	movcs	r0, r4
 80a0d0a:	2000      	movcc	r0, #0
 80a0d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0d10 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0d12:	468c      	mov	ip, r1
 80a0d14:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0d16:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0d18:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a0d1a:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a0d1c:	46ae      	mov	lr, r5
 80a0d1e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a0d22:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0d26:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a0d28:	bf88      	it	hi
 80a0d2a:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a0d2e:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a0d30:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a0d34:	4403      	add	r3, r0
        len = len / 128;
 80a0d36:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a0d3a:	b2e4      	uxtb	r4, r4
 80a0d3c:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a0d40:	d810      	bhi.n	80a0d64 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a0d42:	f1c4 0304 	rsb	r3, r4, #4
 80a0d46:	18d1      	adds	r1, r2, r3
 80a0d48:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0d4c:	f1c4 0305 	rsb	r3, r4, #5
 80a0d50:	4413      	add	r3, r2
 80a0d52:	a801      	add	r0, sp, #4
 80a0d54:	3205      	adds	r2, #5
 80a0d56:	4293      	cmp	r3, r2
 80a0d58:	d006      	beq.n	80a0d68 <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a0d5a:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a0d5e:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a0d62:	e7f8      	b.n	80a0d56 <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a0d64:	4623      	mov	r3, r4
 80a0d66:	e7d9      	b.n	80a0d1c <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0d68:	1c72      	adds	r2, r6, #1
 80a0d6a:	4422      	add	r2, r4
 80a0d6c:	4638      	mov	r0, r7
 80a0d6e:	f001 f9c6 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
 80a0d72:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0d74:	f000 fc12 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0d78:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a0d7a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0d7c:	4434      	add	r4, r6
 80a0d7e:	b2a8      	uxth	r0, r5
}
 80a0d80:	1a23      	subs	r3, r4, r0
 80a0d82:	4258      	negs	r0, r3
 80a0d84:	4158      	adcs	r0, r3
 80a0d86:	b003      	add	sp, #12
 80a0d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d8a <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0d8a:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0d8e:	4604      	mov	r4, r0
    pos += 2;
 80a0d90:	b298      	uxth	r0, r3
 80a0d92:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a0d94:	5ccd      	ldrb	r5, [r1, r3]
 80a0d96:	b14d      	cbz	r5, 80a0dac <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0d98:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0d9c:	1c5f      	adds	r7, r3, #1
 80a0d9e:	4286      	cmp	r6, r0
 80a0da0:	d904      	bls.n	80a0dac <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0da2:	1c46      	adds	r6, r0, #1
 80a0da4:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a0da6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a0da8:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a0daa:	e7f3      	b.n	80a0d94 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0dac:	b299      	uxth	r1, r3
 80a0dae:	1a44      	subs	r4, r0, r1
 80a0db0:	4422      	add	r2, r4
 80a0db2:	1209      	asrs	r1, r1, #8
 80a0db4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0db8:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a0dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dbe <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0dbe:	b538      	push	{r3, r4, r5, lr}
 80a0dc0:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0dc2:	f001 fb68 	bl	80a2496 <_ZN9TCPClient9connectedEv>
 80a0dc6:	2800      	cmp	r0, #0
 80a0dc8:	bf14      	ite	ne
 80a0dca:	2501      	movne	r5, #1
 80a0dcc:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a0dce:	d102      	bne.n	80a0dd6 <_ZN4MQTT11isConnectedEv+0x18>
 80a0dd0:	4620      	mov	r0, r4
 80a0dd2:	f001 fb09 	bl	80a23e8 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0dd6:	4628      	mov	r0, r5
 80a0dd8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ddc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0de0:	b088      	sub	sp, #32
 80a0de2:	4604      	mov	r4, r0
 80a0de4:	4689      	mov	r9, r1
 80a0de6:	4617      	mov	r7, r2
 80a0de8:	461e      	mov	r6, r3
 80a0dea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a0dee:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a0df2:	f7ff ffe4 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a0df6:	4605      	mov	r5, r0
 80a0df8:	2800      	cmp	r0, #0
 80a0dfa:	f040 80cb 	bne.w	80a0f94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
 80a0dfe:	4621      	mov	r1, r4
 80a0e00:	a801      	add	r0, sp, #4
 80a0e02:	f7ff feaf 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a0e06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0e08:	2900      	cmp	r1, #0
 80a0e0a:	f040 8087 	bne.w	80a0f1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0e0e:	462b      	mov	r3, r5
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0e16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0e18:	f001 fbae 	bl	80a2578 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0e1c:	2800      	cmp	r0, #0
 80a0e1e:	d079      	beq.n	80a0f14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
 80a0e20:	2301      	movs	r3, #1
 80a0e22:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a0e24:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a0e28:	69e2      	ldr	r2, [r4, #28]
 80a0e2a:	2b04      	cmp	r3, #4
 80a0e2c:	f040 8081 	bne.w	80a0f32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0e30:	4b59      	ldr	r3, [pc, #356]	; (80a0f98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
 80a0e32:	6818      	ldr	r0, [r3, #0]
 80a0e34:	8899      	ldrh	r1, [r3, #4]
 80a0e36:	799b      	ldrb	r3, [r3, #6]
 80a0e38:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a0e3c:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0e40:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0e42:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0e46:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a0e4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a0e4e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a0e50:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0e52:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a0e56:	f1b8 0f00 	cmp.w	r8, #0
 80a0e5a:	d07f      	beq.n	80a0f5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0e5c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a0e60:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a0e64:	0140      	lsls	r0, r0, #5
 80a0e66:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a0e6a:	f040 0006 	orr.w	r0, r0, #6
 80a0e6e:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a0e70:	f1ba 0f00 	cmp.w	sl, #0
 80a0e74:	d101      	bne.n	80a0e7a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
 80a0e76:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a0e7a:	b11f      	cbz	r7, 80a0e84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
 80a0e7c:	2e00      	cmp	r6, #0
 80a0e7e:	d16f      	bne.n	80a0f60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
 80a0e80:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a0e84:	69e2      	ldr	r2, [r4, #28]
 80a0e86:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a0e88:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0e8a:	69e1      	ldr	r1, [r4, #28]
 80a0e8c:	1c58      	adds	r0, r3, #1
 80a0e8e:	1212      	asrs	r2, r2, #8
 80a0e90:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0e92:	69e1      	ldr	r1, [r4, #28]
 80a0e94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0e96:	1c9a      	adds	r2, r3, #2
 80a0e98:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0e9a:	3303      	adds	r3, #3
 80a0e9c:	4649      	mov	r1, r9
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	69e2      	ldr	r2, [r4, #28]
 80a0ea2:	f7ff ff72 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
 80a0ea6:	4603      	mov	r3, r0
            if (willTopic) {
 80a0ea8:	f1b8 0f00 	cmp.w	r8, #0
 80a0eac:	d00b      	beq.n	80a0ec6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
 80a0eae:	4641      	mov	r1, r8
 80a0eb0:	69e2      	ldr	r2, [r4, #28]
 80a0eb2:	4620      	mov	r0, r4
 80a0eb4:	f7ff ff69 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0eb8:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a0eba:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a0ebc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	f7ff ff63 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
 80a0ec4:	4603      	mov	r3, r0
            if(user != NULL) {
 80a0ec6:	b167      	cbz	r7, 80a0ee2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
 80a0ec8:	4639      	mov	r1, r7
 80a0eca:	4620      	mov	r0, r4
 80a0ecc:	69e2      	ldr	r2, [r4, #28]
 80a0ece:	f7ff ff5c 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
 80a0ed2:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a0ed4:	b12e      	cbz	r6, 80a0ee2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
 80a0ed6:	4631      	mov	r1, r6
 80a0ed8:	4620      	mov	r0, r4
 80a0eda:	69e2      	ldr	r2, [r4, #28]
 80a0edc:	f7ff ff55 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
 80a0ee0:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0ee2:	3b05      	subs	r3, #5
 80a0ee4:	2110      	movs	r1, #16
 80a0ee6:	69e2      	ldr	r2, [r4, #28]
 80a0ee8:	b29b      	uxth	r3, r3
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	f7ff ff10 	bl	80a0d10 <_ZN4MQTT5writeEhPht>
 80a0ef0:	f000 fb54 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0ef4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a0ef8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	f001 fa39 	bl	80a2374 <_ZN9TCPClient9availableEv>
 80a0f02:	bb80      	cbnz	r0, 80a0f66 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
 80a0f04:	f000 fb4a 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0f0a:	1ac0      	subs	r0, r0, r3
 80a0f0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0f0e:	4373      	muls	r3, r6
 80a0f10:	4298      	cmp	r0, r3
 80a0f12:	d9f3      	bls.n	80a0efc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
 80a0f14:	4620      	mov	r0, r4
 80a0f16:	f001 fa67 	bl	80a23e8 <_ZN9TCPClient4stopEv>
 80a0f1a:	e034      	b.n	80a0f86 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
 80a0f1c:	a802      	add	r0, sp, #8
 80a0f1e:	f000 fe75 	bl	80a1c0c <_ZN9IPAddressC1EPKh>
 80a0f22:	462b      	mov	r3, r5
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0f2a:	a902      	add	r1, sp, #8
 80a0f2c:	f001 f9b2 	bl	80a2294 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0f30:	e774      	b.n	80a0e1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0f32:	4b1a      	ldr	r3, [pc, #104]	; (80a0f9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a0f34:	f10d 0c08 	add.w	ip, sp, #8
 80a0f38:	6818      	ldr	r0, [r3, #0]
 80a0f3a:	6859      	ldr	r1, [r3, #4]
 80a0f3c:	7a1b      	ldrb	r3, [r3, #8]
 80a0f3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0f42:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0f46:	ab02      	add	r3, sp, #8
 80a0f48:	cb03      	ldmia	r3!, {r0, r1}
 80a0f4a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0f4e:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0f52:	f89c 3000 	ldrb.w	r3, [ip]
 80a0f56:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0f58:	230e      	movs	r3, #14
 80a0f5a:	e77c      	b.n	80a0e56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a0f5c:	2002      	movs	r0, #2
 80a0f5e:	e787      	b.n	80a0e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
 80a0f60:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a0f64:	e78e      	b.n	80a0e84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
 80a0f66:	4620      	mov	r0, r4
 80a0f68:	a902      	add	r1, sp, #8
 80a0f6a:	f7ff fe71 	bl	80a0c50 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a0f6e:	2804      	cmp	r0, #4
 80a0f70:	d1d0      	bne.n	80a0f14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
 80a0f72:	69e3      	ldr	r3, [r4, #28]
 80a0f74:	78de      	ldrb	r6, [r3, #3]
 80a0f76:	2e00      	cmp	r6, #0
 80a0f78:	d1cc      	bne.n	80a0f14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
 80a0f7a:	f000 fb0f 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a0f7e:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a0f80:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0f82:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a0f86:	a801      	add	r0, sp, #4
 80a0f88:	f7ff fdf7 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0f8c:	4628      	mov	r0, r5
 80a0f8e:	b008      	add	sp, #32
 80a0f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a0f94:	2500      	movs	r5, #0
 80a0f96:	e7f9      	b.n	80a0f8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
 80a0f98:	080a44c7 	.word	0x080a44c7
 80a0f9c:	080a44ce 	.word	0x080a44ce

080a0fa0 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a0fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0fa2:	2301      	movs	r3, #1
 80a0fa4:	2204      	movs	r2, #4
 80a0fa6:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a0faa:	2300      	movs	r3, #0
 80a0fac:	461a      	mov	r2, r3
 80a0fae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a0fb2:	e9cd 3300 	strd	r3, r3, [sp]
 80a0fb6:	f7ff ff11 	bl	80a0ddc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0fba:	b007      	add	sp, #28
 80a0fbc:	f85d fb04 	ldr.w	pc, [sp], #4

080a0fc0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fc4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80a0fc8:	4604      	mov	r4, r0
 80a0fca:	468b      	mov	fp, r1
 80a0fcc:	4616      	mov	r6, r2
 80a0fce:	461f      	mov	r7, r3
 80a0fd0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80a0fd4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 80a0fd8:	f7ff fef1 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a0fdc:	4682      	mov	sl, r0
 80a0fde:	2800      	cmp	r0, #0
 80a0fe0:	d051      	beq.n	80a1086 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 80a0fe2:	4621      	mov	r1, r4
 80a0fe4:	a801      	add	r0, sp, #4
 80a0fe6:	f7ff fdbd 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 80a0fea:	2100      	movs	r1, #0
 80a0fec:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0ff0:	69e0      	ldr	r0, [r4, #28]
 80a0ff2:	f003 f8cd 	bl	80a4190 <memset>
        length = writeString(topic, buffer, length);
 80a0ff6:	2305      	movs	r3, #5
 80a0ff8:	4659      	mov	r1, fp
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	69e2      	ldr	r2, [r4, #28]
 80a0ffe:	f7ff fec4 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a1002:	1e6b      	subs	r3, r5, #1
 80a1004:	2b01      	cmp	r3, #1
 80a1006:	d815      	bhi.n	80a1034 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 80a1008:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a100a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 80a100c:	3101      	adds	r1, #1
 80a100e:	b289      	uxth	r1, r1
 80a1010:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a1012:	1209      	asrs	r1, r1, #8
 80a1014:	5419      	strb	r1, [r3, r0]
 80a1016:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a1018:	69e3      	ldr	r3, [r4, #28]
 80a101a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a101c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 80a101e:	3002      	adds	r0, #2
 80a1020:	b280      	uxth	r0, r0
 80a1022:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 80a1024:	f1b8 0f00 	cmp.w	r8, #0
 80a1028:	d004      	beq.n	80a1034 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 80a102a:	8c23      	ldrh	r3, [r4, #32]
 80a102c:	1c5a      	adds	r2, r3, #1
 80a102e:	8422      	strh	r2, [r4, #32]
 80a1030:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a1034:	2100      	movs	r1, #0
 80a1036:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a1038:	428f      	cmp	r7, r1
 80a103a:	69e2      	ldr	r2, [r4, #28]
 80a103c:	b29b      	uxth	r3, r3
 80a103e:	d90a      	bls.n	80a1056 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 80a1040:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a1044:	459c      	cmp	ip, r3
 80a1046:	d906      	bls.n	80a1056 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 80a1048:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a104c:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a104e:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a1052:	b289      	uxth	r1, r1
 80a1054:	e7ef      	b.n	80a1036 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 80a1056:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a105a:	2900      	cmp	r1, #0
 80a105c:	bf0c      	ite	eq
 80a105e:	2130      	moveq	r1, #48	; 0x30
 80a1060:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a1062:	f1b9 0f00 	cmp.w	r9, #0
 80a1066:	d001      	beq.n	80a106c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 80a1068:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a106c:	2d02      	cmp	r5, #2
 80a106e:	d10e      	bne.n	80a108e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 80a1070:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a1074:	3b05      	subs	r3, #5
 80a1076:	4620      	mov	r0, r4
 80a1078:	b29b      	uxth	r3, r3
 80a107a:	f7ff fe49 	bl	80a0d10 <_ZN4MQTT5writeEhPht>
 80a107e:	4682      	mov	sl, r0
        MutexLocker lock(this);
 80a1080:	a801      	add	r0, sp, #4
 80a1082:	f7ff fd7a 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1086:	4650      	mov	r0, sl
 80a1088:	b003      	add	sp, #12
 80a108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 80a108e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a1090:	bf08      	it	eq
 80a1092:	f041 0102 	orreq.w	r1, r1, #2
 80a1096:	e7ed      	b.n	80a1074 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

080a1098 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a1098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a109a:	9c08      	ldr	r4, [sp, #32]
 80a109c:	9403      	str	r4, [sp, #12]
 80a109e:	2400      	movs	r4, #0
 80a10a0:	9402      	str	r4, [sp, #8]
 80a10a2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a10a6:	9401      	str	r4, [sp, #4]
 80a10a8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a10ac:	9400      	str	r4, [sp, #0]
 80a10ae:	f7ff ff87 	bl	80a0fc0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a10b2:	b004      	add	sp, #16
 80a10b4:	bd10      	pop	{r4, pc}

080a10b6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a10b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a10b8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a10ba:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a10bc:	4614      	mov	r4, r2
 80a10be:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a10c0:	f003 f8a4 	bl	80a420c <strlen>
 80a10c4:	2200      	movs	r2, #0
 80a10c6:	4603      	mov	r3, r0
 80a10c8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a10cc:	9200      	str	r2, [sp, #0]
 80a10ce:	4631      	mov	r1, r6
 80a10d0:	4622      	mov	r2, r4
 80a10d2:	4628      	mov	r0, r5
 80a10d4:	f7ff ffe0 	bl	80a1098 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a10d8:	b004      	add	sp, #16
 80a10da:	bd70      	pop	{r4, r5, r6, pc}

080a10dc <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a10dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a10de:	4604      	mov	r4, r0
 80a10e0:	460e      	mov	r6, r1
    if (isConnected()) {
 80a10e2:	f7ff fe6c 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a10e6:	4605      	mov	r5, r0
 80a10e8:	b1c8      	cbz	r0, 80a111e <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 80a10ea:	4621      	mov	r1, r4
 80a10ec:	a801      	add	r0, sp, #4
 80a10ee:	f7ff fd39 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a10f2:	2262      	movs	r2, #98	; 0x62
 80a10f4:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a10f6:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a10f8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a10fa:	2202      	movs	r2, #2
 80a10fc:	69e3      	ldr	r3, [r4, #28]
 80a10fe:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1100:	69e3      	ldr	r3, [r4, #28]
 80a1102:	1232      	asrs	r2, r6, #8
 80a1104:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a1106:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1108:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a110a:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a110c:	69e1      	ldr	r1, [r4, #28]
 80a110e:	f000 fff6 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
 80a1112:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a1114:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a1116:	bf18      	it	ne
 80a1118:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a111a:	f7ff fd2e 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a111e:	4628      	mov	r0, r5
 80a1120:	b002      	add	sp, #8
 80a1122:	bd70      	pop	{r4, r5, r6, pc}

080a1124 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a1124:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1126:	4604      	mov	r4, r0
 80a1128:	460e      	mov	r6, r1
    if (isConnected()) {
 80a112a:	f7ff fe48 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a112e:	4605      	mov	r5, r0
 80a1130:	b1c8      	cbz	r0, 80a1166 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 80a1132:	4621      	mov	r1, r4
 80a1134:	a801      	add	r0, sp, #4
 80a1136:	f7ff fd15 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a113a:	2272      	movs	r2, #114	; 0x72
 80a113c:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a113e:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1140:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1142:	2202      	movs	r2, #2
 80a1144:	69e3      	ldr	r3, [r4, #28]
 80a1146:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1148:	69e3      	ldr	r3, [r4, #28]
 80a114a:	1232      	asrs	r2, r6, #8
 80a114c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a114e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1150:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a1152:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a1154:	69e1      	ldr	r1, [r4, #28]
 80a1156:	f000 ffd2 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
 80a115a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a115c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a115e:	bf18      	it	ne
 80a1160:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a1162:	f7ff fd0a 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1166:	4628      	mov	r0, r5
 80a1168:	b002      	add	sp, #8
 80a116a:	bd70      	pop	{r4, r5, r6, pc}

080a116c <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1170:	b087      	sub	sp, #28
 80a1172:	af00      	add	r7, sp, #0
 80a1174:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1176:	f7ff fe22 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a117a:	4681      	mov	r9, r0
 80a117c:	b1f8      	cbz	r0, 80a11be <_ZN4MQTT4loopEv+0x52>
        MutexLocker lock(this);
 80a117e:	4621      	mov	r1, r4
 80a1180:	f107 0014 	add.w	r0, r7, #20
 80a1184:	f7ff fcee 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
 80a1188:	f000 fa08 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1190:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1192:	4606      	mov	r6, r0
 80a1194:	4353      	muls	r3, r2
 80a1196:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a1198:	1a82      	subs	r2, r0, r2
 80a119a:	429a      	cmp	r2, r3
 80a119c:	d803      	bhi.n	80a11a6 <_ZN4MQTT4loopEv+0x3a>
 80a119e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a11a0:	1a82      	subs	r2, r0, r2
 80a11a2:	4293      	cmp	r3, r2
 80a11a4:	d21f      	bcs.n	80a11e6 <_ZN4MQTT4loopEv+0x7a>
            if (pingOutstanding) {
 80a11a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a11aa:	b16b      	cbz	r3, 80a11c8 <_ZN4MQTT4loopEv+0x5c>
                _client.stop();
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	f001 f91b 	bl	80a23e8 <_ZN9TCPClient4stopEv>
                return false;
 80a11b2:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 80a11b6:	f107 0014 	add.w	r0, r7, #20
 80a11ba:	f7ff fcde 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a11be:	4648      	mov	r0, r9
 80a11c0:	371c      	adds	r7, #28
 80a11c2:	46bd      	mov	sp, r7
 80a11c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a11c8:	21c0      	movs	r1, #192	; 0xc0
 80a11ca:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a11cc:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a11ce:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a11d0:	69e2      	ldr	r2, [r4, #28]
 80a11d2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a11d4:	69e1      	ldr	r1, [r4, #28]
 80a11d6:	2202      	movs	r2, #2
 80a11d8:	f000 ff91 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a11dc:	2301      	movs	r3, #1
                lastInActivity = t;
 80a11de:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a11e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	f001 f8c4 	bl	80a2374 <_ZN9TCPClient9availableEv>
 80a11ec:	2800      	cmp	r0, #0
 80a11ee:	d0e2      	beq.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	f107 0113 	add.w	r1, r7, #19
 80a11f6:	f7ff fd2b 	bl	80a0c50 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a11fa:	4683      	mov	fp, r0
 80a11fc:	2800      	cmp	r0, #0
 80a11fe:	d0da      	beq.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
 80a1200:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a1202:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a1204:	7819      	ldrb	r1, [r3, #0]
 80a1206:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a120a:	2a30      	cmp	r2, #48	; 0x30
 80a120c:	d17d      	bne.n	80a130a <_ZN4MQTT4loopEv+0x19e>
                    if (callback) {
 80a120e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a1212:	f1ba 0f00 	cmp.w	sl, #0
 80a1216:	d0ce      	beq.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1218:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 80a121c:	f8c7 d004 	str.w	sp, [r7, #4]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1220:	eb03 020c 	add.w	r2, r3, ip
 80a1224:	7855      	ldrb	r5, [r2, #1]
 80a1226:	7891      	ldrb	r1, [r2, #2]
 80a1228:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a122c:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a122e:	4669      	mov	r1, sp
 80a1230:	f105 0208 	add.w	r2, r5, #8
 80a1234:	08d2      	lsrs	r2, r2, #3
 80a1236:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a123a:	4695      	mov	sp, r2
 80a123c:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a123e:	f10c 0203 	add.w	r2, ip, #3
 80a1242:	60fa      	str	r2, [r7, #12]
 80a1244:	eb03 0e02 	add.w	lr, r3, r2
 80a1248:	eb0d 0205 	add.w	r2, sp, r5
 80a124c:	f8c7 d008 	str.w	sp, [r7, #8]
 80a1250:	603a      	str	r2, [r7, #0]
 80a1252:	683a      	ldr	r2, [r7, #0]
 80a1254:	68b9      	ldr	r1, [r7, #8]
 80a1256:	428a      	cmp	r2, r1
 80a1258:	d006      	beq.n	80a1268 <_ZN4MQTT4loopEv+0xfc>
                            topic[i] = buffer[llen+3+i];
 80a125a:	460a      	mov	r2, r1
 80a125c:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a1260:	f802 8b01 	strb.w	r8, [r2], #1
 80a1264:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a1266:	e7f4      	b.n	80a1252 <_ZN4MQTT4loopEv+0xe6>
                        topic[tl] = 0;
 80a1268:	2200      	movs	r2, #0
 80a126a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a126c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1270:	68f9      	ldr	r1, [r7, #12]
 80a1272:	f008 0806 	and.w	r8, r8, #6
 80a1276:	ebab 020c 	sub.w	r2, fp, ip
 80a127a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a127c:	f1b8 0f02 	cmp.w	r8, #2
 80a1280:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1284:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a1286:	d124      	bne.n	80a12d2 <_ZN4MQTT4loopEv+0x166>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1288:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a128c:	4419      	add	r1, r3
 80a128e:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a1292:	f10c 0105 	add.w	r1, ip, #5
 80a1296:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a1298:	3a02      	subs	r2, #2
 80a129a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a129c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a12a0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a12a2:	2240      	movs	r2, #64	; 0x40
 80a12a4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a12a6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a12aa:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a12ac:	69e3      	ldr	r3, [r4, #28]
 80a12ae:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a12b2:	69e3      	ldr	r3, [r4, #28]
 80a12b4:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a12b8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a12ba:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a12bc:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a12be:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a12c2:	4620      	mov	r0, r4
 80a12c4:	69e1      	ldr	r1, [r4, #28]
 80a12c6:	f000 ff1a 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a12ca:	6266      	str	r6, [r4, #36]	; 0x24
 80a12cc:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80a12d0:	e771      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a12d2:	f1b8 0f04 	cmp.w	r8, #4
 80a12d6:	d115      	bne.n	80a1304 <_ZN4MQTT4loopEv+0x198>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a12d8:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a12dc:	4419      	add	r1, r3
 80a12de:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 80a12e2:	f10c 0105 	add.w	r1, ip, #5
 80a12e6:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a12e8:	3a02      	subs	r2, #2
 80a12ea:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a12ec:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a12f0:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a12f2:	2250      	movs	r2, #80	; 0x50
 80a12f4:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a12f6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a12fa:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 80a12fc:	2202      	movs	r2, #2
 80a12fe:	69e3      	ldr	r3, [r4, #28]
 80a1300:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 80a1302:	e7d6      	b.n	80a12b2 <_ZN4MQTT4loopEv+0x146>
                            callback(topic,payload,len-llen-3-tl);
 80a1304:	4419      	add	r1, r3
 80a1306:	47d0      	blx	sl
 80a1308:	e7e0      	b.n	80a12cc <_ZN4MQTT4loopEv+0x160>
                } else if (type == MQTTPUBREC) {
 80a130a:	2a50      	cmp	r2, #80	; 0x50
 80a130c:	d108      	bne.n	80a1320 <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a130e:	789a      	ldrb	r2, [r3, #2]
 80a1310:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a1312:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a1314:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a1318:	b289      	uxth	r1, r1
 80a131a:	f7ff fedf 	bl	80a10dc <_ZN4MQTT14publishReleaseEt>
 80a131e:	e74a      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBACK) {
 80a1320:	2a40      	cmp	r2, #64	; 0x40
 80a1322:	d112      	bne.n	80a134a <_ZN4MQTT4loopEv+0x1de>
                if (qoscallback) {
 80a1324:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a1326:	2a00      	cmp	r2, #0
 80a1328:	f43f af45 	beq.w	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a132c:	f1bb 0f04 	cmp.w	fp, #4
 80a1330:	f47f af41 	bne.w	80a11b6 <_ZN4MQTT4loopEv+0x4a>
 80a1334:	f011 0f06 	tst.w	r1, #6
 80a1338:	f47f af3d 	bne.w	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                        msgId = (buffer[2]<<8)+buffer[3];
 80a133c:	7899      	ldrb	r1, [r3, #2]
 80a133e:	78d8      	ldrb	r0, [r3, #3]
 80a1340:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 80a1344:	b280      	uxth	r0, r0
 80a1346:	4790      	blx	r2
 80a1348:	e735      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBREL) {
 80a134a:	2a60      	cmp	r2, #96	; 0x60
 80a134c:	d108      	bne.n	80a1360 <_ZN4MQTT4loopEv+0x1f4>
                msgId = (buffer[2] << 8) + buffer[3];
 80a134e:	789a      	ldrb	r2, [r3, #2]
 80a1350:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 80a1352:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 80a1354:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 80a1358:	b289      	uxth	r1, r1
 80a135a:	f7ff fee3 	bl	80a1124 <_ZN4MQTT15publishCompleteEt>
 80a135e:	e72a      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBCOMP) {
 80a1360:	2a70      	cmp	r2, #112	; 0x70
 80a1362:	d0df      	beq.n	80a1324 <_ZN4MQTT4loopEv+0x1b8>
                } else if (type == MQTTSUBACK) {
 80a1364:	2a90      	cmp	r2, #144	; 0x90
 80a1366:	f43f af26 	beq.w	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGREQ) {
 80a136a:	2ac0      	cmp	r2, #192	; 0xc0
 80a136c:	d10a      	bne.n	80a1384 <_ZN4MQTT4loopEv+0x218>
                    buffer[0] = MQTTPINGRESP;
 80a136e:	22d0      	movs	r2, #208	; 0xd0
 80a1370:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a1372:	2200      	movs	r2, #0
 80a1374:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a1376:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a1378:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a137a:	69e1      	ldr	r1, [r4, #28]
 80a137c:	2202      	movs	r2, #2
 80a137e:	f000 febe 	bl	80a20fe <_ZN9TCPClient5writeEPKhj>
 80a1382:	e718      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
 80a1384:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a1386:	bf04      	itt	eq
 80a1388:	2300      	moveq	r3, #0
 80a138a:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a138e:	e712      	b.n	80a11b6 <_ZN4MQTT4loopEv+0x4a>

080a1390 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a1390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1392:	4604      	mov	r4, r0
 80a1394:	460f      	mov	r7, r1
 80a1396:	4616      	mov	r6, r2
    if (isConnected()) {
 80a1398:	f7ff fd11 	bl	80a0dbe <_ZN4MQTT11isConnectedEv>
 80a139c:	4605      	mov	r5, r0
 80a139e:	b310      	cbz	r0, 80a13e6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 80a13a0:	4621      	mov	r1, r4
 80a13a2:	a801      	add	r0, sp, #4
 80a13a4:	f7ff fbde 	bl	80a0b64 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 80a13a8:	8c23      	ldrh	r3, [r4, #32]
 80a13aa:	3301      	adds	r3, #1
 80a13ac:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a13ae:	b1eb      	cbz	r3, 80a13ec <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 80a13b0:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a13b2:	8c23      	ldrh	r3, [r4, #32]
 80a13b4:	69e2      	ldr	r2, [r4, #28]
 80a13b6:	121b      	asrs	r3, r3, #8
 80a13b8:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a13ba:	69e3      	ldr	r3, [r4, #28]
 80a13bc:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a13be:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 80a13c0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a13c2:	69e2      	ldr	r2, [r4, #28]
 80a13c4:	2307      	movs	r3, #7
 80a13c6:	4620      	mov	r0, r4
 80a13c8:	f7ff fcdf 	bl	80a0d8a <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a13cc:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a13ce:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a13d0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a13d2:	3804      	subs	r0, #4
 80a13d4:	b283      	uxth	r3, r0
 80a13d6:	69e2      	ldr	r2, [r4, #28]
 80a13d8:	4620      	mov	r0, r4
 80a13da:	f7ff fc99 	bl	80a0d10 <_ZN4MQTT5writeEhPht>
 80a13de:	4605      	mov	r5, r0
        MutexLocker lock(this);
 80a13e0:	a801      	add	r0, sp, #4
 80a13e2:	f7ff fbca 	bl	80a0b7a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a13e6:	4628      	mov	r0, r5
 80a13e8:	b003      	add	sp, #12
 80a13ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 80a13ec:	2301      	movs	r3, #1
 80a13ee:	e7df      	b.n	80a13b0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

080a13f0 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a13f0:	2200      	movs	r2, #0
 80a13f2:	f7ff bfcd 	b.w	80a1390 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a13f6 <_ZN8MAX170435beginEv>:
{

}

uint8_t MAX17043::begin()
{
 80a13f6:	b508      	push	{r3, lr}
  Wire.begin();
 80a13f8:	f001 fc9a 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a13fc:	f000 fb58 	bl	80a1ab0 <_ZN7TwoWire5beginEv>
  return 1;
}
 80a1400:	2001      	movs	r0, #1
 80a1402:	bd08      	pop	{r3, pc}

080a1404 <_ZN8MAX170437write16Eth>:
  configReg |= ((uint16_t)newCompensation << 8) | configReg;
  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::write16(uint16_t data, uint8_t address)
{
 80a1404:	b538      	push	{r3, r4, r5, lr}
 80a1406:	4615      	mov	r5, r2
 80a1408:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  msb = (data & 0xFF00) >> 8;
  lsb = (data & 0x00FF);
  Wire.beginTransmission(MAX17043_ADDRESS);
 80a140a:	f001 fc91 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a140e:	2136      	movs	r1, #54	; 0x36
 80a1410:	f000 fb84 	bl	80a1b1c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a1414:	f001 fc8c 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1418:	6803      	ldr	r3, [r0, #0]
 80a141a:	4629      	mov	r1, r5
 80a141c:	689b      	ldr	r3, [r3, #8]
 80a141e:	4798      	blx	r3
  Wire.write(msb);
 80a1420:	f001 fc86 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1424:	6803      	ldr	r3, [r0, #0]
 80a1426:	0a21      	lsrs	r1, r4, #8
 80a1428:	689b      	ldr	r3, [r3, #8]
 80a142a:	4798      	blx	r3
  Wire.write(lsb);
 80a142c:	f001 fc80 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1430:	6803      	ldr	r3, [r0, #0]
 80a1432:	b2e1      	uxtb	r1, r4
 80a1434:	689b      	ldr	r3, [r3, #8]
 80a1436:	4798      	blx	r3
  return (Wire.endTransmission());
 80a1438:	f001 fc7a 	bl	80a2d30 <_Z19__fetch_global_Wirev>
}
 80a143c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (Wire.endTransmission());
 80a1440:	f000 bb73 	b.w	80a1b2a <_ZN7TwoWire15endTransmissionEv>

080a1444 <_ZN8MAX1704310quickStartEv>:
  return write16(MAX17043_MODE_QUICKSTART, MAX17043_MODE);
 80a1444:	2206      	movs	r2, #6
 80a1446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80a144a:	f7ff bfdb 	b.w	80a1404 <_ZN8MAX170437write16Eth>

080a144e <_ZN8MAX170436read16Eh>:

uint16_t MAX17043::read16(uint8_t address)
{
 80a144e:	b510      	push	{r4, lr}
 80a1450:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  int16_t timeout = 1000;

  Wire.beginTransmission(MAX17043_ADDRESS);
 80a1452:	f001 fc6d 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1456:	2136      	movs	r1, #54	; 0x36
 80a1458:	f000 fb60 	bl	80a1b1c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
 80a145c:	f001 fc68 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1460:	6803      	ldr	r3, [r0, #0]
 80a1462:	4621      	mov	r1, r4
 80a1464:	689b      	ldr	r3, [r3, #8]
 80a1466:	4798      	blx	r3
  Wire.endTransmission(false);
 80a1468:	f001 fc62 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a146c:	2100      	movs	r1, #0
 80a146e:	f000 fb58 	bl	80a1b22 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MAX17043_ADDRESS, 2);
 80a1472:	f001 fc5d 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1476:	2202      	movs	r2, #2
 80a1478:	2136      	movs	r1, #54	; 0x36
 80a147a:	f000 fb48 	bl	80a1b0e <_ZN7TwoWire11requestFromEhj>
 80a147e:	f240 34e9 	movw	r4, #1001	; 0x3e9
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a1482:	f001 fc55 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a1486:	6803      	ldr	r3, [r0, #0]
 80a1488:	691b      	ldr	r3, [r3, #16]
 80a148a:	4798      	blx	r3
 80a148c:	2801      	cmp	r0, #1
 80a148e:	dc06      	bgt.n	80a149e <_ZN8MAX170436read16Eh+0x50>
 80a1490:	3c01      	subs	r4, #1
 80a1492:	b2a4      	uxth	r4, r4
 80a1494:	b11c      	cbz	r4, 80a149e <_ZN8MAX170436read16Eh+0x50>
    delay(1);
 80a1496:	2001      	movs	r0, #1
 80a1498:	f000 fac8 	bl	80a1a2c <delay>
  while ((Wire.available() < 2) && (timeout-- > 0))
 80a149c:	e7f1      	b.n	80a1482 <_ZN8MAX170436read16Eh+0x34>
  msb = Wire.read();
 80a149e:	f001 fc47 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a14a2:	6803      	ldr	r3, [r0, #0]
 80a14a4:	695b      	ldr	r3, [r3, #20]
 80a14a6:	4798      	blx	r3
 80a14a8:	4604      	mov	r4, r0
  lsb = Wire.read();
 80a14aa:	f001 fc41 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a14ae:	6803      	ldr	r3, [r0, #0]
 80a14b0:	695b      	ldr	r3, [r3, #20]
 80a14b2:	4798      	blx	r3

  return ((uint16_t) msb << 8) | lsb;
 80a14b4:	b2c3      	uxtb	r3, r0
 80a14b6:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
}
 80a14ba:	b280      	uxth	r0, r0
 80a14bc:	bd10      	pop	{r4, pc}
	...

080a14c0 <_ZN8MAX1704310getVoltageEv>:
  vCell = read16(MAX17043_VCELL);
 80a14c0:	2102      	movs	r1, #2
{
 80a14c2:	b508      	push	{r3, lr}
  vCell = read16(MAX17043_VCELL);
 80a14c4:	f7ff ffc3 	bl	80a144e <_ZN8MAX170436read16Eh>
  return ((float) vCell / 800.0);
 80a14c8:	f3c0 100f 	ubfx	r0, r0, #4, #16
 80a14cc:	f002 faf6 	bl	80a3abc <__aeabi_ui2f>
 80a14d0:	4901      	ldr	r1, [pc, #4]	; (80a14d8 <_ZN8MAX1704310getVoltageEv+0x18>)
 80a14d2:	f002 fbff 	bl	80a3cd4 <__aeabi_fdiv>
}
 80a14d6:	bd08      	pop	{r3, pc}
 80a14d8:	44480000 	.word	0x44480000

080a14dc <_ZN8MAX170436getSOCEv>:
{
 80a14dc:	b538      	push	{r3, r4, r5, lr}
  soc = read16(MAX17043_SOC);
 80a14de:	2104      	movs	r1, #4
 80a14e0:	f7ff ffb5 	bl	80a144e <_ZN8MAX170436read16Eh>
 80a14e4:	4604      	mov	r4, r0
  percent = (soc & 0xFF00) >> 8;
 80a14e6:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80a14ea:	f002 faeb 	bl	80a3ac4 <__aeabi_i2f>
 80a14ee:	4605      	mov	r5, r0
  percent += (float) (((uint8_t) soc) / 256.0);
 80a14f0:	b2e0      	uxtb	r0, r4
 80a14f2:	f001 feb9 	bl	80a3268 <__aeabi_i2d>
 80a14f6:	2200      	movs	r2, #0
 80a14f8:	4b04      	ldr	r3, [pc, #16]	; (80a150c <_ZN8MAX170436getSOCEv+0x30>)
 80a14fa:	f001 ff1f 	bl	80a333c <__aeabi_dmul>
 80a14fe:	f002 f9d7 	bl	80a38b0 <__aeabi_d2f>
 80a1502:	4629      	mov	r1, r5
 80a1504:	f002 fa2a 	bl	80a395c <__addsf3>
}
 80a1508:	bd38      	pop	{r3, r4, r5, pc}
 80a150a:	bf00      	nop
 80a150c:	3f700000 	.word	0x3f700000

080a1510 <_ZN8MAX1704312setThresholdEh>:
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a1510:	2920      	cmp	r1, #32
 80a1512:	bfa8      	it	ge
 80a1514:	2120      	movge	r1, #32
{
 80a1516:	b538      	push	{r3, r4, r5, lr}
 80a1518:	460c      	mov	r4, r1
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a151a:	210c      	movs	r1, #12
{
 80a151c:	4605      	mov	r5, r0
  uint16_t configReg = read16(MAX17043_CONFIG);
 80a151e:	f7ff ff96 	bl	80a144e <_ZN8MAX170436read16Eh>
  percent = 32 - percent;
 80a1522:	f1c4 0420 	rsb	r4, r4, #32
  configReg &= 0xFFE0; // Mask out threshold bits
 80a1526:	f020 011f 	bic.w	r1, r0, #31
  configReg |= percent; // Add new threshold
 80a152a:	b2e4      	uxtb	r4, r4
  configReg &= 0xFFE0; // Mask out threshold bits
 80a152c:	b289      	uxth	r1, r1
  return write16(configReg, MAX17043_CONFIG);
 80a152e:	4628      	mov	r0, r5
 80a1530:	4321      	orrs	r1, r4
 80a1532:	220c      	movs	r2, #12
}
 80a1534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write16(configReg, MAX17043_CONFIG);
 80a1538:	f7ff bf64 	b.w	80a1404 <_ZN8MAX170437write16Eth>

080a153c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a153c:	b508      	push	{r3, lr}
 80a153e:	4b02      	ldr	r3, [pc, #8]	; (80a1548 <os_mutex_create+0xc>)
 80a1540:	681b      	ldr	r3, [r3, #0]
 80a1542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1544:	9301      	str	r3, [sp, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	080601d0 	.word	0x080601d0

080a154c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a154c:	b508      	push	{r3, lr}
 80a154e:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <os_mutex_lock+0xc>)
 80a1550:	681b      	ldr	r3, [r3, #0]
 80a1552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1554:	9301      	str	r3, [sp, #4]
 80a1556:	bd08      	pop	{r3, pc}
 80a1558:	080601d0 	.word	0x080601d0

080a155c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <os_mutex_unlock+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	080601d0 	.word	0x080601d0

080a156c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <os_mutex_recursive_create+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601d0 	.word	0x080601d0

080a157c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <os_mutex_recursive_destroy+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601d0 	.word	0x080601d0

080a158c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <HAL_RNG_GetRandomNumber+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	685b      	ldr	r3, [r3, #4]
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	0806019c 	.word	0x0806019c

080a159c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	695b      	ldr	r3, [r3, #20]
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	0806019c 	.word	0x0806019c

080a15ac <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <hal_rtc_time_is_valid+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	0806019c 	.word	0x0806019c

080a15bc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <hal_rtc_get_time+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	0806019c 	.word	0x0806019c

080a15cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <HAL_Pin_Mode+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	689b      	ldr	r3, [r3, #8]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601b0 	.word	0x080601b0

080a15dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <HAL_Get_Pin_Mode+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	68db      	ldr	r3, [r3, #12]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601b0 	.word	0x080601b0

080a15ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <HAL_GPIO_Write+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	691b      	ldr	r3, [r3, #16]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601b0 	.word	0x080601b0

080a15fc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <hal_i2c_begin+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601ac 	.word	0x080601ac

080a160c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <hal_i2c_begin_transmission+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601ac 	.word	0x080601ac

080a161c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <hal_i2c_end_transmission+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601ac 	.word	0x080601ac

080a162c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <hal_i2c_write+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601ac 	.word	0x080601ac

080a163c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <hal_i2c_available+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601ac 	.word	0x080601ac

080a164c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <hal_i2c_read+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601ac 	.word	0x080601ac

080a165c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <hal_i2c_peek+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601ac 	.word	0x080601ac

080a166c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <hal_i2c_flush+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601ac 	.word	0x080601ac

080a167c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <hal_i2c_is_enabled+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601ac 	.word	0x080601ac

080a168c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b03      	ldr	r3, [pc, #12]	; (80a169c <hal_i2c_init+0x10>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1696:	9301      	str	r3, [sp, #4]
 80a1698:	bd08      	pop	{r3, pc}
 80a169a:	0000      	.short	0x0000
 80a169c:	080601ac 	.word	0x080601ac

080a16a0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b03      	ldr	r3, [pc, #12]	; (80a16b0 <hal_i2c_request_ex+0x10>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a16aa:	9301      	str	r3, [sp, #4]
 80a16ac:	bd08      	pop	{r3, pc}
 80a16ae:	0000      	.short	0x0000
 80a16b0:	080601ac 	.word	0x080601ac

080a16b4 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <socket_active_status+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	681b      	ldr	r3, [r3, #0]
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601bc 	.word	0x080601bc

080a16c4 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <socket_handle_valid+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	685b      	ldr	r3, [r3, #4]
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601bc 	.word	0x080601bc

080a16d4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <socket_create+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	689b      	ldr	r3, [r3, #8]
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601bc 	.word	0x080601bc

080a16e4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <socket_connect+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	68db      	ldr	r3, [r3, #12]
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601bc 	.word	0x080601bc

080a16f4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <socket_receive+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	691b      	ldr	r3, [r3, #16]
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601bc 	.word	0x080601bc

080a1704 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <socket_close+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6a1b      	ldr	r3, [r3, #32]
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601bc 	.word	0x080601bc

080a1714 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <socket_handle_invalid+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601bc 	.word	0x080601bc

080a1724 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <socket_send_ex+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601bc 	.word	0x080601bc

080a1734 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <hal_spi_init+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	69db      	ldr	r3, [r3, #28]
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601b4 	.word	0x080601b4

080a1744 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <hal_spi_is_enabled+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	6a1b      	ldr	r3, [r3, #32]
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601b4 	.word	0x080601b4

080a1754 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <hal_usart_init+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	699b      	ldr	r3, [r3, #24]
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601c4 	.word	0x080601c4

080a1764 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <hal_usart_write+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601c4 	.word	0x080601c4

080a1774 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <hal_usart_available+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601c4 	.word	0x080601c4

080a1784 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <hal_usart_read+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601c4 	.word	0x080601c4

080a1794 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <hal_usart_peek+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601c4 	.word	0x080601c4

080a17a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <hal_usart_flush+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601c4 	.word	0x080601c4

080a17b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <hal_usart_is_enabled+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601c4 	.word	0x080601c4

080a17c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <hal_usart_available_data_for_write+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601c4 	.word	0x080601c4

080a17d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <HAL_USB_USART_Init+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	681b      	ldr	r3, [r3, #0]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601d8 	.word	0x080601d8

080a17e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <HAL_USB_USART_Begin+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	685b      	ldr	r3, [r3, #4]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601d8 	.word	0x080601d8

080a17f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <HAL_USB_USART_Available_Data+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	691b      	ldr	r3, [r3, #16]
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601d8 	.word	0x080601d8

080a1804 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	695b      	ldr	r3, [r3, #20]
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601d8 	.word	0x080601d8

080a1814 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <HAL_USB_USART_Receive_Data+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	699b      	ldr	r3, [r3, #24]
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601d8 	.word	0x080601d8

080a1824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <HAL_USB_USART_Send_Data+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	69db      	ldr	r3, [r3, #28]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601d8 	.word	0x080601d8

080a1834 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <HAL_USB_USART_Flush_Data+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	6a1b      	ldr	r3, [r3, #32]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601d8 	.word	0x080601d8

080a1844 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <HAL_USB_USART_Is_Enabled+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601d8 	.word	0x080601d8

080a1854 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <HAL_NET_SetNetWatchDog+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601c0 	.word	0x080601c0

080a1864 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <inet_gethostbyname+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601c0 	.word	0x080601c0

080a1874 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <log_message+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080201a8 	.word	0x080201a8

080a1884 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <system_mode+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	681b      	ldr	r3, [r3, #0]
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601a4 	.word	0x080601a4

080a1894 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <set_system_mode+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	685b      	ldr	r3, [r3, #4]
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	080601a4 	.word	0x080601a4

080a18a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <system_delay_ms+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	695b      	ldr	r3, [r3, #20]
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	080601a4 	.word	0x080601a4

080a18b4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <system_thread_get_state+0xc>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a18bc:	9301      	str	r3, [sp, #4]
 80a18be:	bd08      	pop	{r3, pc}
 80a18c0:	080601a4 	.word	0x080601a4

080a18c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b03      	ldr	r3, [pc, #12]	; (80a18d4 <system_ctrl_set_app_request_handler+0x10>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18ce:	9301      	str	r3, [sp, #4]
 80a18d0:	bd08      	pop	{r3, pc}
 80a18d2:	0000      	.short	0x0000
 80a18d4:	080601a4 	.word	0x080601a4

080a18d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b03      	ldr	r3, [pc, #12]	; (80a18e8 <system_ctrl_set_result+0x10>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18e2:	9301      	str	r3, [sp, #4]
 80a18e4:	bd08      	pop	{r3, pc}
 80a18e6:	0000      	.short	0x0000
 80a18e8:	080601a4 	.word	0x080601a4

080a18ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <spark_process+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	689b      	ldr	r3, [r3, #8]
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601cc 	.word	0x080601cc

080a18fc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <spark_cloud_flag_connected+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	695b      	ldr	r3, [r3, #20]
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601cc 	.word	0x080601cc

080a190c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <spark_sync_time_pending+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601cc 	.word	0x080601cc

080a191c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601cc 	.word	0x080601cc

080a192c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <network_connect+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	685b      	ldr	r3, [r3, #4]
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601c8 	.word	0x080601c8

080a193c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <network_connecting+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	689b      	ldr	r3, [r3, #8]
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601c8 	.word	0x080601c8

080a194c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <network_disconnect+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	68db      	ldr	r3, [r3, #12]
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601c8 	.word	0x080601c8

080a195c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <network_ready+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	691b      	ldr	r3, [r3, #16]
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601c8 	.word	0x080601c8

080a196c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <network_on+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	695b      	ldr	r3, [r3, #20]
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601c8 	.word	0x080601c8

080a197c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <network_off+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	699b      	ldr	r3, [r3, #24]
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601c8 	.word	0x080601c8

080a198c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <network_listen+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	69db      	ldr	r3, [r3, #28]
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601c8 	.word	0x080601c8

080a199c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <network_listening+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	6a1b      	ldr	r3, [r3, #32]
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601c8 	.word	0x080601c8

080a19ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <network_set_listen_timeout+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601c8 	.word	0x080601c8

080a19bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <network_get_listen_timeout+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601c8 	.word	0x080601c8

080a19cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <network_is_on+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601c8 	.word	0x080601c8

080a19dc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <network_is_off+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601c8 	.word	0x080601c8

080a19ec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <malloc+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	681b      	ldr	r3, [r3, #0]
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601a0 	.word	0x080601a0

080a19fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <free+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	685b      	ldr	r3, [r3, #4]
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601a0 	.word	0x080601a0

080a1a0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <realloc+0xc>)
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	689b      	ldr	r3, [r3, #8]
 80a1a14:	9301      	str	r3, [sp, #4]
 80a1a16:	bd08      	pop	{r3, pc}
 80a1a18:	080601a0 	.word	0x080601a0

080a1a1c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1a1c:	b508      	push	{r3, lr}
 80a1a1e:	4b02      	ldr	r3, [pc, #8]	; (80a1a28 <newlib_impure_ptr_callback+0xc>)
 80a1a20:	681b      	ldr	r3, [r3, #0]
 80a1a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a24:	9301      	str	r3, [sp, #4]
 80a1a26:	bd08      	pop	{r3, pc}
 80a1a28:	080601a0 	.word	0x080601a0

080a1a2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1a2c:	2100      	movs	r1, #0
 80a1a2e:	f7ff bf39 	b.w	80a18a4 <system_delay_ms>

080a1a32 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1a32:	4770      	bx	lr

080a1a34 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a36:	4606      	mov	r6, r0
 80a1a38:	4615      	mov	r5, r2
 80a1a3a:	460c      	mov	r4, r1
 80a1a3c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a3e:	42bc      	cmp	r4, r7
 80a1a40:	d006      	beq.n	80a1a50 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a42:	6833      	ldr	r3, [r6, #0]
 80a1a44:	4630      	mov	r0, r6
 80a1a46:	689b      	ldr	r3, [r3, #8]
 80a1a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a4c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1a4e:	e7f6      	b.n	80a1a3e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1a50:	4628      	mov	r0, r5
 80a1a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a54 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1a54:	2200      	movs	r2, #0
 80a1a56:	7c00      	ldrb	r0, [r0, #16]
 80a1a58:	f7ff bde8 	b.w	80a162c <hal_i2c_write>

080a1a5c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	7c00      	ldrb	r0, [r0, #16]
 80a1a60:	f7ff bdec 	b.w	80a163c <hal_i2c_available>

080a1a64 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1a64:	2100      	movs	r1, #0
 80a1a66:	7c00      	ldrb	r0, [r0, #16]
 80a1a68:	f7ff bdf0 	b.w	80a164c <hal_i2c_read>

080a1a6c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1a6c:	2100      	movs	r1, #0
 80a1a6e:	7c00      	ldrb	r0, [r0, #16]
 80a1a70:	f7ff bdf4 	b.w	80a165c <hal_i2c_peek>

080a1a74 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1a74:	2100      	movs	r1, #0
 80a1a76:	7c00      	ldrb	r0, [r0, #16]
 80a1a78:	f7ff bdf8 	b.w	80a166c <hal_i2c_flush>

080a1a7c <_ZN7TwoWireD0Ev>:
 80a1a7c:	b510      	push	{r4, lr}
 80a1a7e:	4604      	mov	r4, r0
 80a1a80:	2114      	movs	r1, #20
 80a1a82:	f001 f987 	bl	80a2d94 <_ZdlPvj>
 80a1a86:	4620      	mov	r0, r4
 80a1a88:	bd10      	pop	{r4, pc}
	...

080a1a8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1a8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a92:	4604      	mov	r4, r0
 80a1a94:	4608      	mov	r0, r1
 80a1a96:	2100      	movs	r1, #0
 80a1a98:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1a9c:	4b03      	ldr	r3, [pc, #12]	; (80a1aac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1a9e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1aa0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1aa2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1aa4:	f7ff fdf2 	bl	80a168c <hal_i2c_init>
}
 80a1aa8:	4620      	mov	r0, r4
 80a1aaa:	bd10      	pop	{r4, pc}
 80a1aac:	080a44e0 	.word	0x080a44e0

080a1ab0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1ab0:	2300      	movs	r3, #0
 80a1ab2:	7c00      	ldrb	r0, [r0, #16]
 80a1ab4:	461a      	mov	r2, r3
 80a1ab6:	4619      	mov	r1, r3
 80a1ab8:	f7ff bda0 	b.w	80a15fc <hal_i2c_begin>

080a1abc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a1abe:	2200      	movs	r2, #0
 80a1ac0:	2314      	movs	r3, #20
 80a1ac2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a1aca:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1acc:	7c00      	ldrb	r0, [r0, #16]
 80a1ace:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1ad2:	684b      	ldr	r3, [r1, #4]
 80a1ad4:	9303      	str	r3, [sp, #12]
 80a1ad6:	68cb      	ldr	r3, [r1, #12]
 80a1ad8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a1ada:	7a0b      	ldrb	r3, [r1, #8]
 80a1adc:	a901      	add	r1, sp, #4
 80a1ade:	9305      	str	r3, [sp, #20]
 80a1ae0:	f7ff fdde 	bl	80a16a0 <hal_i2c_request_ex>
}
 80a1ae4:	b007      	add	sp, #28
 80a1ae6:	f85d fb04 	ldr.w	pc, [sp], #4

080a1aea <_ZN7TwoWire11requestFromEhjh>:
{
 80a1aea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1aec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1aee:	f88d 1000 	strb.w	r1, [sp]
 80a1af2:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1af6:	bf18      	it	ne
 80a1af8:	2301      	movne	r3, #1
 80a1afa:	9103      	str	r1, [sp, #12]
 80a1afc:	4669      	mov	r1, sp
    size_ = size;
 80a1afe:	9201      	str	r2, [sp, #4]
 80a1b00:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1b04:	f7ff ffda 	bl	80a1abc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1b08:	b005      	add	sp, #20
 80a1b0a:	f85d fb04 	ldr.w	pc, [sp], #4

080a1b0e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a1b0e:	2301      	movs	r3, #1
 80a1b10:	f7ff bfeb 	b.w	80a1aea <_ZN7TwoWire11requestFromEhjh>

080a1b14 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1b14:	2200      	movs	r2, #0
 80a1b16:	7c00      	ldrb	r0, [r0, #16]
 80a1b18:	f7ff bd78 	b.w	80a160c <hal_i2c_begin_transmission>

080a1b1c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a1b1c:	b2c9      	uxtb	r1, r1
 80a1b1e:	f7ff bff9 	b.w	80a1b14 <_ZN7TwoWire17beginTransmissionEh>

080a1b22 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1b22:	2200      	movs	r2, #0
 80a1b24:	7c00      	ldrb	r0, [r0, #16]
 80a1b26:	f7ff bd79 	b.w	80a161c <hal_i2c_end_transmission>

080a1b2a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1b2a:	2101      	movs	r1, #1
 80a1b2c:	f7ff bff9 	b.w	80a1b22 <_ZN7TwoWire15endTransmissionEh>

080a1b30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1b30:	4770      	bx	lr

080a1b32 <_ZN9IPAddressD0Ev>:
 80a1b32:	b510      	push	{r4, lr}
 80a1b34:	4604      	mov	r4, r0
 80a1b36:	2118      	movs	r1, #24
 80a1b38:	f001 f92c 	bl	80a2d94 <_ZdlPvj>
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	bd10      	pop	{r4, pc}

080a1b40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b42:	460e      	mov	r6, r1
 80a1b44:	2400      	movs	r4, #0
 80a1b46:	f100 0708 	add.w	r7, r0, #8
 80a1b4a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1b4c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1b50:	220a      	movs	r2, #10
 80a1b52:	4630      	mov	r0, r6
 80a1b54:	f000 f927 	bl	80a1da6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1b58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1b5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1b5c:	d101      	bne.n	80a1b62 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1b5e:	4620      	mov	r0, r4
 80a1b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1b62:	2c00      	cmp	r4, #0
 80a1b64:	d0f2      	beq.n	80a1b4c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1b66:	212e      	movs	r1, #46	; 0x2e
 80a1b68:	4630      	mov	r0, r6
 80a1b6a:	f000 f901 	bl	80a1d70 <_ZN5Print5printEc>
 80a1b6e:	4404      	add	r4, r0
 80a1b70:	e7ec      	b.n	80a1b4c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1b74 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1b74:	b510      	push	{r4, lr}
 80a1b76:	4604      	mov	r4, r0
 80a1b78:	4b04      	ldr	r3, [pc, #16]	; (80a1b8c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b7a:	2211      	movs	r2, #17
 80a1b7c:	2100      	movs	r1, #0
 80a1b7e:	f840 3b04 	str.w	r3, [r0], #4
 80a1b82:	f002 fb05 	bl	80a4190 <memset>
}
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	bd10      	pop	{r4, pc}
 80a1b8a:	bf00      	nop
 80a1b8c:	080a4508 	.word	0x080a4508

080a1b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b90:	4603      	mov	r3, r0
 80a1b92:	4a07      	ldr	r2, [pc, #28]	; (80a1bb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b94:	b510      	push	{r4, lr}
 80a1b96:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1b9a:	f101 0210 	add.w	r2, r1, #16
 80a1b9e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1ba2:	4291      	cmp	r1, r2
 80a1ba4:	f843 4b04 	str.w	r4, [r3], #4
 80a1ba8:	d1f9      	bne.n	80a1b9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1baa:	780a      	ldrb	r2, [r1, #0]
 80a1bac:	701a      	strb	r2, [r3, #0]
}
 80a1bae:	bd10      	pop	{r4, pc}
 80a1bb0:	080a4508 	.word	0x080a4508

080a1bb4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1bb4:	4a02      	ldr	r2, [pc, #8]	; (80a1bc0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1bb6:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1bba:	2204      	movs	r2, #4
 80a1bbc:	7502      	strb	r2, [r0, #20]
}
 80a1bbe:	4770      	bx	lr
 80a1bc0:	080a4508 	.word	0x080a4508

080a1bc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1bc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1bc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1bca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1bce:	2304      	movs	r3, #4
 80a1bd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1bd4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1bd8:	6044      	str	r4, [r0, #4]
 80a1bda:	7503      	strb	r3, [r0, #20]
}
 80a1bdc:	bd10      	pop	{r4, pc}
	...

080a1be0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1be2:	4d04      	ldr	r5, [pc, #16]	; (80a1bf4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1be4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1be6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1bea:	9500      	str	r5, [sp, #0]
 80a1bec:	f7ff ffea 	bl	80a1bc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1bf0:	b003      	add	sp, #12
 80a1bf2:	bd30      	pop	{r4, r5, pc}
 80a1bf4:	080a4508 	.word	0x080a4508

080a1bf8 <_ZN9IPAddressaSEPKh>:
{
 80a1bf8:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1bfa:	78cb      	ldrb	r3, [r1, #3]
 80a1bfc:	9300      	str	r3, [sp, #0]
 80a1bfe:	788b      	ldrb	r3, [r1, #2]
 80a1c00:	784a      	ldrb	r2, [r1, #1]
 80a1c02:	7809      	ldrb	r1, [r1, #0]
 80a1c04:	f7ff ffde 	bl	80a1bc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1c08:	b002      	add	sp, #8
 80a1c0a:	bd10      	pop	{r4, pc}

080a1c0c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a1c0c:	b510      	push	{r4, lr}
 80a1c0e:	4604      	mov	r4, r0
 80a1c10:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <_ZN9IPAddressC1EPKh+0x10>)
 80a1c12:	6003      	str	r3, [r0, #0]
    *this = address;
 80a1c14:	f7ff fff0 	bl	80a1bf8 <_ZN9IPAddressaSEPKh>
}
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	bd10      	pop	{r4, pc}
 80a1c1c:	080a4508 	.word	0x080a4508

080a1c20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1c20:	4b01      	ldr	r3, [pc, #4]	; (80a1c28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1c22:	4a02      	ldr	r2, [pc, #8]	; (80a1c2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1c24:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1c26:	4770      	bx	lr
 80a1c28:	20000194 	.word	0x20000194
 80a1c2c:	080a4514 	.word	0x080a4514

080a1c30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1c30:	2300      	movs	r3, #0
 80a1c32:	6840      	ldr	r0, [r0, #4]
 80a1c34:	461a      	mov	r2, r3
 80a1c36:	f7ff be79 	b.w	80a192c <network_connect>

080a1c3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1c3a:	2200      	movs	r2, #0
 80a1c3c:	2102      	movs	r1, #2
 80a1c3e:	6840      	ldr	r0, [r0, #4]
 80a1c40:	f7ff be84 	b.w	80a194c <network_disconnect>

080a1c44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1c44:	2200      	movs	r2, #0
 80a1c46:	6840      	ldr	r0, [r0, #4]
 80a1c48:	4611      	mov	r1, r2
 80a1c4a:	f7ff be77 	b.w	80a193c <network_connecting>

080a1c4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1c4e:	2200      	movs	r2, #0
 80a1c50:	6840      	ldr	r0, [r0, #4]
 80a1c52:	4611      	mov	r1, r2
 80a1c54:	f7ff be82 	b.w	80a195c <network_ready>

080a1c58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1c58:	2300      	movs	r3, #0
 80a1c5a:	6840      	ldr	r0, [r0, #4]
 80a1c5c:	461a      	mov	r2, r3
 80a1c5e:	4619      	mov	r1, r3
 80a1c60:	f7ff be84 	b.w	80a196c <network_on>

080a1c64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1c64:	2300      	movs	r3, #0
 80a1c66:	6840      	ldr	r0, [r0, #4]
 80a1c68:	461a      	mov	r2, r3
 80a1c6a:	4619      	mov	r1, r3
 80a1c6c:	f7ff be86 	b.w	80a197c <network_off>

080a1c70 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1c70:	2100      	movs	r1, #0
 80a1c72:	6840      	ldr	r0, [r0, #4]
 80a1c74:	f7ff beaa 	b.w	80a19cc <network_is_on>

080a1c78 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1c78:	2100      	movs	r1, #0
 80a1c7a:	6840      	ldr	r0, [r0, #4]
 80a1c7c:	f7ff beae 	b.w	80a19dc <network_is_off>

080a1c80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1c80:	2200      	movs	r2, #0
 80a1c82:	6840      	ldr	r0, [r0, #4]
 80a1c84:	f081 0101 	eor.w	r1, r1, #1
 80a1c88:	f7ff be80 	b.w	80a198c <network_listen>

080a1c8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1c8c:	2200      	movs	r2, #0
 80a1c8e:	6840      	ldr	r0, [r0, #4]
 80a1c90:	f7ff be8c 	b.w	80a19ac <network_set_listen_timeout>

080a1c94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1c94:	2200      	movs	r2, #0
 80a1c96:	6840      	ldr	r0, [r0, #4]
 80a1c98:	4611      	mov	r1, r2
 80a1c9a:	f7ff be8f 	b.w	80a19bc <network_get_listen_timeout>

080a1c9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1c9e:	2200      	movs	r2, #0
 80a1ca0:	6840      	ldr	r0, [r0, #4]
 80a1ca2:	4611      	mov	r1, r2
 80a1ca4:	f7ff be7a 	b.w	80a199c <network_listening>

080a1ca8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1ca8:	b570      	push	{r4, r5, r6, lr}
 80a1caa:	4615      	mov	r5, r2
 80a1cac:	b08e      	sub	sp, #56	; 0x38
 80a1cae:	4604      	mov	r4, r0
    IPAddress addr;
 80a1cb0:	a808      	add	r0, sp, #32
 80a1cb2:	f7ff ff5f 	bl	80a1b74 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1cb6:	2211      	movs	r2, #17
 80a1cb8:	2100      	movs	r1, #0
 80a1cba:	a803      	add	r0, sp, #12
 80a1cbc:	f002 fa68 	bl	80a4190 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1cc0:	2600      	movs	r6, #0
 80a1cc2:	4628      	mov	r0, r5
 80a1cc4:	f002 faa2 	bl	80a420c <strlen>
 80a1cc8:	4b0a      	ldr	r3, [pc, #40]	; (80a1cf4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1cca:	9600      	str	r6, [sp, #0]
 80a1ccc:	b281      	uxth	r1, r0
 80a1cce:	685b      	ldr	r3, [r3, #4]
 80a1cd0:	4628      	mov	r0, r5
 80a1cd2:	aa03      	add	r2, sp, #12
 80a1cd4:	f7ff fdc6 	bl	80a1864 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1cd8:	b130      	cbz	r0, 80a1ce8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1cda:	4631      	mov	r1, r6
 80a1cdc:	4620      	mov	r0, r4
 80a1cde:	f7ff ff69 	bl	80a1bb4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ce2:	4620      	mov	r0, r4
 80a1ce4:	b00e      	add	sp, #56	; 0x38
 80a1ce6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ce8:	4620      	mov	r0, r4
 80a1cea:	a903      	add	r1, sp, #12
 80a1cec:	f7ff ff50 	bl	80a1b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1cf0:	e7f7      	b.n	80a1ce2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1cf2:	bf00      	nop
 80a1cf4:	20000618 	.word	0x20000618

080a1cf8 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1cf8:	4a03      	ldr	r2, [pc, #12]	; (80a1d08 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1cfa:	4b04      	ldr	r3, [pc, #16]	; (80a1d0c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1cfc:	2804      	cmp	r0, #4
 80a1cfe:	bf14      	ite	ne
 80a1d00:	4610      	movne	r0, r2
 80a1d02:	4618      	moveq	r0, r3
 80a1d04:	4770      	bx	lr
 80a1d06:	bf00      	nop
 80a1d08:	20000198 	.word	0x20000198
 80a1d0c:	20000618 	.word	0x20000618

080a1d10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1d10:	4b02      	ldr	r3, [pc, #8]	; (80a1d1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1d12:	4a03      	ldr	r2, [pc, #12]	; (80a1d20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1d14:	601a      	str	r2, [r3, #0]
 80a1d16:	2200      	movs	r2, #0
 80a1d18:	605a      	str	r2, [r3, #4]

} // spark
 80a1d1a:	4770      	bx	lr
 80a1d1c:	20000198 	.word	0x20000198
 80a1d20:	080a4520 	.word	0x080a4520

080a1d24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d26:	4606      	mov	r6, r0
 80a1d28:	460d      	mov	r5, r1
  size_t n = 0;
 80a1d2a:	2400      	movs	r4, #0
 80a1d2c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1d2e:	42bd      	cmp	r5, r7
 80a1d30:	d00c      	beq.n	80a1d4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1d32:	6833      	ldr	r3, [r6, #0]
 80a1d34:	4630      	mov	r0, r6
 80a1d36:	689b      	ldr	r3, [r3, #8]
 80a1d38:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1d3c:	4798      	blx	r3
     if (chunk>=0)
 80a1d3e:	1e03      	subs	r3, r0, #0
 80a1d40:	db01      	blt.n	80a1d46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1d42:	441c      	add	r4, r3
  while (size--) {
 80a1d44:	e7f3      	b.n	80a1d2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1d46:	2c00      	cmp	r4, #0
 80a1d48:	bf08      	it	eq
 80a1d4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1d4c:	4620      	mov	r0, r4
 80a1d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d50 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1d50:	b570      	push	{r4, r5, r6, lr}
 80a1d52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1d54:	460c      	mov	r4, r1
    }
 80a1d56:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1d58:	b149      	cbz	r1, 80a1d6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1d5a:	f002 fa57 	bl	80a420c <strlen>
 80a1d5e:	682b      	ldr	r3, [r5, #0]
 80a1d60:	4602      	mov	r2, r0
 80a1d62:	4621      	mov	r1, r4
 80a1d64:	4628      	mov	r0, r5
    }
 80a1d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1d6a:	68db      	ldr	r3, [r3, #12]
 80a1d6c:	4718      	bx	r3
    }
 80a1d6e:	bd70      	pop	{r4, r5, r6, pc}

080a1d70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1d70:	6803      	ldr	r3, [r0, #0]
 80a1d72:	689b      	ldr	r3, [r3, #8]
 80a1d74:	4718      	bx	r3

080a1d76 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1d76:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1d78:	210d      	movs	r1, #13
{
 80a1d7a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1d7c:	f7ff fff8 	bl	80a1d70 <_ZN5Print5printEc>
  n += print('\n');
 80a1d80:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1d82:	4604      	mov	r4, r0
  n += print('\n');
 80a1d84:	4628      	mov	r0, r5
 80a1d86:	f7ff fff3 	bl	80a1d70 <_ZN5Print5printEc>
  return n;
}
 80a1d8a:	4420      	add	r0, r4
 80a1d8c:	bd38      	pop	{r3, r4, r5, pc}

080a1d8e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1d8e:	b538      	push	{r3, r4, r5, lr}
 80a1d90:	4605      	mov	r5, r0
  return write(str);
 80a1d92:	f7ff ffdd 	bl	80a1d50 <_ZN5Print5writeEPKc>
 80a1d96:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1d98:	4628      	mov	r0, r5
 80a1d9a:	f7ff ffec 	bl	80a1d76 <_ZN5Print7printlnEv>
  return n;
}
 80a1d9e:	4420      	add	r0, r4
 80a1da0:	bd38      	pop	{r3, r4, r5, pc}

080a1da2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a1da2:	f7ff bff4 	b.w	80a1d8e <_ZN5Print7printlnEPKc>

080a1da6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1da6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1da8:	2a01      	cmp	r2, #1
 80a1daa:	bf98      	it	ls
 80a1dac:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1dae:	b530      	push	{r4, r5, lr}
 80a1db0:	b08b      	sub	sp, #44	; 0x2c
 80a1db2:	460c      	mov	r4, r1
  *str = '\0';
 80a1db4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1db8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1dba:	4625      	mov	r5, r4
 80a1dbc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1dc0:	fb04 5312 	mls	r3, r4, r2, r5
 80a1dc4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1dc6:	2b09      	cmp	r3, #9
 80a1dc8:	bf94      	ite	ls
 80a1dca:	3330      	addls	r3, #48	; 0x30
 80a1dcc:	3337      	addhi	r3, #55	; 0x37
 80a1dce:	b2db      	uxtb	r3, r3
  } while(n);
 80a1dd0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1dd2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1dd6:	d9f0      	bls.n	80a1dba <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1dd8:	f7ff ffba 	bl	80a1d50 <_ZN5Print5writeEPKc>
}
 80a1ddc:	b00b      	add	sp, #44	; 0x2c
 80a1dde:	bd30      	pop	{r4, r5, pc}

080a1de0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1de0:	2200      	movs	r2, #0
 80a1de2:	4b01      	ldr	r3, [pc, #4]	; (80a1de8 <_GLOBAL__sub_I_RGB+0x8>)
 80a1de4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1de6:	4770      	bx	lr
 80a1de8:	200001a0 	.word	0x200001a0

080a1dec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1dec:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1dee:	2600      	movs	r6, #0
 80a1df0:	4604      	mov	r4, r0
 80a1df2:	460d      	mov	r5, r1
 80a1df4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1df8:	f7ff fbb8 	bl	80a156c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1dfc:	4628      	mov	r0, r5
    _spi = spi;
 80a1dfe:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1e00:	f7ff fc98 	bl	80a1734 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1e04:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1e06:	6066      	str	r6, [r4, #4]
}
 80a1e08:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1e0c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a1e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e10:	4607      	mov	r7, r0
 80a1e12:	460d      	mov	r5, r1
 80a1e14:	4616      	mov	r6, r2
 80a1e16:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a1e18:	2200      	movs	r2, #0
 80a1e1a:	2300      	movs	r3, #0
 80a1e1c:	4638      	mov	r0, r7
 80a1e1e:	4629      	mov	r1, r5
 80a1e20:	f001 fcfe 	bl	80a3820 <__aeabi_dcmplt>
 80a1e24:	b120      	cbz	r0, 80a1e30 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1e26:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a1e28:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a1e2c:	f804 3b01 	strb.w	r3, [r4], #1
 80a1e30:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1e32:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1e36:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a1e38:	b2d9      	uxtb	r1, r3
 80a1e3a:	428e      	cmp	r6, r1
 80a1e3c:	d903      	bls.n	80a1e46 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a1e3e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a1e42:	3301      	adds	r3, #1
 80a1e44:	e7f8      	b.n	80a1e38 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a1e46:	4650      	mov	r0, sl
 80a1e48:	f001 fa0e 	bl	80a3268 <__aeabi_i2d>
 80a1e4c:	463a      	mov	r2, r7
 80a1e4e:	462b      	mov	r3, r5
 80a1e50:	f001 fa74 	bl	80a333c <__aeabi_dmul>
 80a1e54:	4680      	mov	r8, r0
 80a1e56:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a1e58:	f001 fff0 	bl	80a3e3c <__aeabi_d2ulz>
 80a1e5c:	4605      	mov	r5, r0
 80a1e5e:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1e60:	f001 fa36 	bl	80a32d0 <__aeabi_ul2d>
 80a1e64:	4602      	mov	r2, r0
 80a1e66:	460b      	mov	r3, r1
 80a1e68:	4640      	mov	r0, r8
 80a1e6a:	4649      	mov	r1, r9
 80a1e6c:	f001 f8ae 	bl	80a2fcc <__aeabi_dsub>
 80a1e70:	2200      	movs	r2, #0
 80a1e72:	4b12      	ldr	r3, [pc, #72]	; (80a1ebc <_Z4dtoadhPc+0xb0>)
 80a1e74:	f001 fce8 	bl	80a3848 <__aeabi_dcmpge>
 80a1e78:	b110      	cbz	r0, 80a1e80 <_Z4dtoadhPc+0x74>
        fixed++;
 80a1e7a:	3501      	adds	r5, #1
 80a1e7c:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1e80:	4652      	mov	r2, sl
 80a1e82:	4628      	mov	r0, r5
 80a1e84:	4639      	mov	r1, r7
 80a1e86:	17d3      	asrs	r3, r2, #31
 80a1e88:	f001 ffc0 	bl	80a3e0c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1e8c:	2301      	movs	r3, #1
 80a1e8e:	4615      	mov	r5, r2
 80a1e90:	4621      	mov	r1, r4
 80a1e92:	220a      	movs	r2, #10
 80a1e94:	f000 fde4 	bl	80a2a60 <ultoa>
    if (prec) {
 80a1e98:	b16e      	cbz	r6, 80a1eb6 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a1e9a:	4620      	mov	r0, r4
 80a1e9c:	f002 f9b6 	bl	80a420c <strlen>
        *sout++ = '.';
 80a1ea0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a1ea2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a1ea4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a1ea6:	220a      	movs	r2, #10
 80a1ea8:	4633      	mov	r3, r6
 80a1eaa:	4628      	mov	r0, r5
    }
}
 80a1eac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a1eb0:	3101      	adds	r1, #1
 80a1eb2:	f000 bdd5 	b.w	80a2a60 <ultoa>
}
 80a1eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1eba:	bf00      	nop
 80a1ebc:	3fe00000 	.word	0x3fe00000

080a1ec0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1ec0:	b510      	push	{r4, lr}
 80a1ec2:	4604      	mov	r4, r0
{
	free(buffer);
 80a1ec4:	6800      	ldr	r0, [r0, #0]
 80a1ec6:	f7ff fd99 	bl	80a19fc <free>
}
 80a1eca:	4620      	mov	r0, r4
 80a1ecc:	bd10      	pop	{r4, pc}

080a1ece <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ece:	b510      	push	{r4, lr}
 80a1ed0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1ed2:	6800      	ldr	r0, [r0, #0]
 80a1ed4:	b108      	cbz	r0, 80a1eda <_ZN6String10invalidateEv+0xc>
 80a1ed6:	f7ff fd91 	bl	80a19fc <free>
	buffer = NULL;
 80a1eda:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1edc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1ee0:	6023      	str	r3, [r4, #0]
}
 80a1ee2:	bd10      	pop	{r4, pc}

080a1ee4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ee4:	b538      	push	{r3, r4, r5, lr}
 80a1ee6:	4604      	mov	r4, r0
 80a1ee8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1eea:	6800      	ldr	r0, [r0, #0]
 80a1eec:	3101      	adds	r1, #1
 80a1eee:	f7ff fd8d 	bl	80a1a0c <realloc>
	if (newbuffer) {
 80a1ef2:	b110      	cbz	r0, 80a1efa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1ef4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1ef8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1efa:	bd38      	pop	{r3, r4, r5, pc}

080a1efc <_ZN6String7reserveEj>:
{
 80a1efc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1efe:	6803      	ldr	r3, [r0, #0]
{
 80a1f00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1f02:	b123      	cbz	r3, 80a1f0e <_ZN6String7reserveEj+0x12>
 80a1f04:	6843      	ldr	r3, [r0, #4]
 80a1f06:	428b      	cmp	r3, r1
 80a1f08:	d301      	bcc.n	80a1f0e <_ZN6String7reserveEj+0x12>
 80a1f0a:	2001      	movs	r0, #1
}
 80a1f0c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1f0e:	4620      	mov	r0, r4
 80a1f10:	f7ff ffe8 	bl	80a1ee4 <_ZN6String12changeBufferEj>
 80a1f14:	2800      	cmp	r0, #0
 80a1f16:	d0f9      	beq.n	80a1f0c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1f18:	68a3      	ldr	r3, [r4, #8]
 80a1f1a:	2b00      	cmp	r3, #0
 80a1f1c:	d1f5      	bne.n	80a1f0a <_ZN6String7reserveEj+0xe>
 80a1f1e:	6822      	ldr	r2, [r4, #0]
 80a1f20:	7013      	strb	r3, [r2, #0]
 80a1f22:	e7f2      	b.n	80a1f0a <_ZN6String7reserveEj+0xe>

080a1f24 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1f24:	b570      	push	{r4, r5, r6, lr}
 80a1f26:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1f28:	4611      	mov	r1, r2
{
 80a1f2a:	4604      	mov	r4, r0
 80a1f2c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1f2e:	f7ff ffe5 	bl	80a1efc <_ZN6String7reserveEj>
 80a1f32:	b920      	cbnz	r0, 80a1f3e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	f7ff ffca 	bl	80a1ece <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1f3a:	4620      	mov	r0, r4
 80a1f3c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1f3e:	462a      	mov	r2, r5
 80a1f40:	4631      	mov	r1, r6
 80a1f42:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1f44:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1f46:	f002 f915 	bl	80a4174 <memcpy>
	buffer[len] = 0;
 80a1f4a:	2100      	movs	r1, #0
 80a1f4c:	6822      	ldr	r2, [r4, #0]
 80a1f4e:	68a3      	ldr	r3, [r4, #8]
 80a1f50:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1f52:	e7f2      	b.n	80a1f3a <_ZN6String4copyEPKcj+0x16>

080a1f54 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1f54:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1f56:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1f58:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1f5a:	460d      	mov	r5, r1
	capacity = 0;
 80a1f5c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1f60:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f62:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1f64:	b139      	cbz	r1, 80a1f76 <_ZN6StringC1EPKc+0x22>
 80a1f66:	4608      	mov	r0, r1
 80a1f68:	f002 f950 	bl	80a420c <strlen>
 80a1f6c:	4629      	mov	r1, r5
 80a1f6e:	4602      	mov	r2, r0
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7ff ffd7 	bl	80a1f24 <_ZN6String4copyEPKcj>
}
 80a1f76:	4620      	mov	r0, r4
 80a1f78:	bd38      	pop	{r3, r4, r5, pc}

080a1f7a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1f7a:	4288      	cmp	r0, r1
{
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	460b      	mov	r3, r1
 80a1f80:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1f82:	d004      	beq.n	80a1f8e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1f84:	6809      	ldr	r1, [r1, #0]
 80a1f86:	b121      	cbz	r1, 80a1f92 <_ZN6StringaSERKS_+0x18>
 80a1f88:	689a      	ldr	r2, [r3, #8]
 80a1f8a:	f7ff ffcb 	bl	80a1f24 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1f8e:	4620      	mov	r0, r4
 80a1f90:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1f92:	f7ff ff9c 	bl	80a1ece <_ZN6String10invalidateEv>
 80a1f96:	e7fa      	b.n	80a1f8e <_ZN6StringaSERKS_+0x14>

080a1f98 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1f98:	2300      	movs	r3, #0
String::String(const String &value)
 80a1f9a:	b510      	push	{r4, lr}
 80a1f9c:	4604      	mov	r4, r0
	capacity = 0;
 80a1f9e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1fa2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1fa4:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1fa6:	f7ff ffe8 	bl	80a1f7a <_ZN6StringaSERKS_>
}
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	bd10      	pop	{r4, pc}

080a1fae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1fae:	b538      	push	{r3, r4, r5, lr}
 80a1fb0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1fb2:	460c      	mov	r4, r1
 80a1fb4:	b149      	cbz	r1, 80a1fca <_ZN6StringaSEPKc+0x1c>
 80a1fb6:	4608      	mov	r0, r1
 80a1fb8:	f002 f928 	bl	80a420c <strlen>
 80a1fbc:	4621      	mov	r1, r4
 80a1fbe:	4602      	mov	r2, r0
 80a1fc0:	4628      	mov	r0, r5
 80a1fc2:	f7ff ffaf 	bl	80a1f24 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1fc6:	4628      	mov	r0, r5
 80a1fc8:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1fca:	f7ff ff80 	bl	80a1ece <_ZN6String10invalidateEv>
 80a1fce:	e7fa      	b.n	80a1fc6 <_ZN6StringaSEPKc+0x18>

080a1fd0 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a1fd0:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1fd2:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a1fd4:	4604      	mov	r4, r0
 80a1fd6:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1fd8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1fdc:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1fde:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a1fe0:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1fe2:	a901      	add	r1, sp, #4
 80a1fe4:	f000 fcf9 	bl	80a29da <ltoa>
	*this = buf;
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	a901      	add	r1, sp, #4
 80a1fec:	f7ff ffdf 	bl	80a1fae <_ZN6StringaSEPKc>
}
 80a1ff0:	4620      	mov	r0, r4
 80a1ff2:	b00a      	add	sp, #40	; 0x28
 80a1ff4:	bd10      	pop	{r4, pc}

080a1ff6 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
 80a1ff6:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1ff8:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
 80a1ffa:	4604      	mov	r4, r0
 80a1ffc:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1ffe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a2002:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2004:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
 80a2006:	4608      	mov	r0, r1
	ultoa(value, buf, base);
 80a2008:	2301      	movs	r3, #1
 80a200a:	a901      	add	r1, sp, #4
 80a200c:	f000 fd28 	bl	80a2a60 <ultoa>
	*this = buf;
 80a2010:	4620      	mov	r0, r4
 80a2012:	a901      	add	r1, sp, #4
 80a2014:	f7ff ffcb 	bl	80a1fae <_ZN6StringaSEPKc>
}
 80a2018:	4620      	mov	r0, r4
 80a201a:	b00a      	add	sp, #40	; 0x28
 80a201c:	bd10      	pop	{r4, pc}

080a201e <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 80a201e:	b510      	push	{r4, lr}
 80a2020:	4619      	mov	r1, r3
 80a2022:	4604      	mov	r4, r0
	buffer = NULL;
 80a2024:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 80a2026:	b08a      	sub	sp, #40	; 0x28
 80a2028:	4610      	mov	r0, r2
	capacity = 0;
 80a202a:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 80a202e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 80a2032:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2034:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 80a2036:	ab01      	add	r3, sp, #4
 80a2038:	f7ff fee8 	bl	80a1e0c <_Z4dtoadhPc>
        *this = buf;
 80a203c:	4620      	mov	r0, r4
 80a203e:	a901      	add	r1, sp, #4
 80a2040:	f7ff ffb5 	bl	80a1fae <_ZN6StringaSEPKc>
}
 80a2044:	4620      	mov	r0, r4
 80a2046:	b00a      	add	sp, #40	; 0x28
 80a2048:	bd10      	pop	{r4, pc}

080a204a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a204a:	b570      	push	{r4, r5, r6, lr}
 80a204c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a204e:	460e      	mov	r6, r1
 80a2050:	b909      	cbnz	r1, 80a2056 <_ZN6String6concatEPKcj+0xc>
 80a2052:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2054:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2056:	b16a      	cbz	r2, 80a2074 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2058:	6884      	ldr	r4, [r0, #8]
 80a205a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a205c:	4621      	mov	r1, r4
 80a205e:	f7ff ff4d 	bl	80a1efc <_ZN6String7reserveEj>
 80a2062:	2800      	cmp	r0, #0
 80a2064:	d0f5      	beq.n	80a2052 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2066:	6828      	ldr	r0, [r5, #0]
 80a2068:	68ab      	ldr	r3, [r5, #8]
 80a206a:	4631      	mov	r1, r6
 80a206c:	4418      	add	r0, r3
 80a206e:	f002 f8c5 	bl	80a41fc <strcpy>
	len = newlen;
 80a2072:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2074:	2001      	movs	r0, #1
 80a2076:	e7ed      	b.n	80a2054 <_ZN6String6concatEPKcj+0xa>

080a2078 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a2078:	688a      	ldr	r2, [r1, #8]
 80a207a:	6809      	ldr	r1, [r1, #0]
 80a207c:	f7ff bfe5 	b.w	80a204a <_ZN6String6concatEPKcj>

080a2080 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a2080:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2082:	688a      	ldr	r2, [r1, #8]
 80a2084:	6809      	ldr	r1, [r1, #0]
{
 80a2086:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a2088:	f7ff ffdf 	bl	80a204a <_ZN6String6concatEPKcj>
 80a208c:	b910      	cbnz	r0, 80a2094 <_ZplRK15StringSumHelperRK6String+0x14>
 80a208e:	4620      	mov	r0, r4
 80a2090:	f7ff ff1d 	bl	80a1ece <_ZN6String10invalidateEv>
	return a;
}
 80a2094:	4620      	mov	r0, r4
 80a2096:	bd10      	pop	{r4, pc}

080a2098 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a2098:	b538      	push	{r3, r4, r5, lr}
 80a209a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a209c:	460d      	mov	r5, r1
 80a209e:	b921      	cbnz	r1, 80a20aa <_ZplRK15StringSumHelperPKc+0x12>
 80a20a0:	4620      	mov	r0, r4
 80a20a2:	f7ff ff14 	bl	80a1ece <_ZN6String10invalidateEv>
	return a;
}
 80a20a6:	4620      	mov	r0, r4
 80a20a8:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a20aa:	4608      	mov	r0, r1
 80a20ac:	f002 f8ae 	bl	80a420c <strlen>
 80a20b0:	4629      	mov	r1, r5
 80a20b2:	4602      	mov	r2, r0
 80a20b4:	4620      	mov	r0, r4
 80a20b6:	f7ff ffc8 	bl	80a204a <_ZN6String6concatEPKcj>
 80a20ba:	2800      	cmp	r0, #0
 80a20bc:	d0f0      	beq.n	80a20a0 <_ZplRK15StringSumHelperPKc+0x8>
 80a20be:	e7f2      	b.n	80a20a6 <_ZplRK15StringSumHelperPKc+0xe>

080a20c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a20c0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a20c2:	2000      	movs	r0, #0
 80a20c4:	4b04      	ldr	r3, [pc, #16]	; (80a20d8 <_GLOBAL__sub_I_System+0x18>)
 80a20c6:	601a      	str	r2, [r3, #0]
 80a20c8:	4b04      	ldr	r3, [pc, #16]	; (80a20dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a20ca:	4a05      	ldr	r2, [pc, #20]	; (80a20e0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a20cc:	6018      	str	r0, [r3, #0]
 80a20ce:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a20d0:	7198      	strb	r0, [r3, #6]
 80a20d2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a20d4:	f7ff bbde 	b.w	80a1894 <set_system_mode>
 80a20d8:	200001bc 	.word	0x200001bc
 80a20dc:	200001b0 	.word	0x200001b0
 80a20e0:	ffff0000 	.word	0xffff0000

080a20e4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a20e4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a20e6:	6803      	ldr	r3, [r0, #0]
{
 80a20e8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a20ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a20ee:	2201      	movs	r2, #1
 80a20f0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a20f4:	f10d 0107 	add.w	r1, sp, #7
 80a20f8:	47a0      	blx	r4
}
 80a20fa:	b002      	add	sp, #8
 80a20fc:	bd10      	pop	{r4, pc}

080a20fe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a20fe:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2100:	6803      	ldr	r3, [r0, #0]
 80a2102:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2104:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2108:	46a4      	mov	ip, r4
}
 80a210a:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a210c:	4760      	bx	ip

080a210e <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a210e:	b513      	push	{r0, r1, r4, lr}
 80a2110:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a2112:	6802      	ldr	r2, [r0, #0]
{
 80a2114:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a2118:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a211a:	f10d 0107 	add.w	r1, sp, #7
 80a211e:	2201      	movs	r2, #1
 80a2120:	47a0      	blx	r4
}
 80a2122:	b002      	add	sp, #8
 80a2124:	bd10      	pop	{r4, pc}

080a2126 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a2126:	4770      	bx	lr

080a2128 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2128:	4770      	bx	lr
	...

080a212c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      friend class __shared_count<_Lp>; // To be able to call _M_ptr().

      // No longer used, but code compiled against old libstdc++ headers
      // might still call it from __shared_ptr ctor to get the pointer out.
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a212c:	b510      	push	{r4, lr}
 80a212e:	4604      	mov	r4, r0
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 80a2130:	4b06      	ldr	r3, [pc, #24]	; (80a214c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a2132:	4608      	mov	r0, r1
	    ||
 80a2134:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a2136:	f104 040c 	add.w	r4, r4, #12
 80a213a:	d004      	beq.n	80a2146 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a213c:	f000 fe2e 	bl	80a2d9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a2140:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
 80a2142:	bf08      	it	eq
 80a2144:	2400      	moveq	r4, #0
      }
 80a2146:	4620      	mov	r0, r4
 80a2148:	bd10      	pop	{r4, pc}
 80a214a:	bf00      	nop
 80a214c:	080a458c 	.word	0x080a458c

080a2150 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a2150:	b510      	push	{r4, lr}
 80a2152:	4604      	mov	r4, r0
 80a2154:	21ac      	movs	r1, #172	; 0xac
 80a2156:	f000 fe1d 	bl	80a2d94 <_ZdlPvj>
 80a215a:	4620      	mov	r0, r4
 80a215c:	bd10      	pop	{r4, pc}

080a215e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a215e:	f7fd bfa0 	b.w	80a00a2 <_ZdlPv>
	...

080a2164 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a2164:	b538      	push	{r3, r4, r5, lr}
 80a2166:	4b0b      	ldr	r3, [pc, #44]	; (80a2194 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2168:	6984      	ldr	r4, [r0, #24]
 80a216a:	4605      	mov	r5, r0
 80a216c:	6003      	str	r3, [r0, #0]
 80a216e:	b17c      	cbz	r4, 80a2190 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a2170:	6863      	ldr	r3, [r4, #4]
 80a2172:	3b01      	subs	r3, #1
 80a2174:	6063      	str	r3, [r4, #4]
 80a2176:	b95b      	cbnz	r3, 80a2190 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a2178:	6823      	ldr	r3, [r4, #0]
 80a217a:	4620      	mov	r0, r4
 80a217c:	689b      	ldr	r3, [r3, #8]
 80a217e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2180:	68a3      	ldr	r3, [r4, #8]
 80a2182:	3b01      	subs	r3, #1
 80a2184:	60a3      	str	r3, [r4, #8]
 80a2186:	b91b      	cbnz	r3, 80a2190 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a2188:	6823      	ldr	r3, [r4, #0]
 80a218a:	4620      	mov	r0, r4
 80a218c:	68db      	ldr	r3, [r3, #12]
 80a218e:	4798      	blx	r3
 80a2190:	4628      	mov	r0, r5
 80a2192:	bd38      	pop	{r3, r4, r5, pc}
 80a2194:	080a459c 	.word	0x080a459c

080a2198 <_ZN9TCPClientD0Ev>:
 80a2198:	b510      	push	{r4, lr}
 80a219a:	4604      	mov	r4, r0
 80a219c:	f7ff ffe2 	bl	80a2164 <_ZN9TCPClientD1Ev>
 80a21a0:	4620      	mov	r0, r4
 80a21a2:	211c      	movs	r1, #28
 80a21a4:	f000 fdf6 	bl	80a2d94 <_ZdlPvj>
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	bd10      	pop	{r4, pc}

080a21ac <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a21ac:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a21ae:	4604      	mov	r4, r0
 80a21b0:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a21b2:	694d      	ldr	r5, [r1, #20]
 80a21b4:	4b04      	ldr	r3, [pc, #16]	; (80a21c8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a21b6:	358c      	adds	r5, #140	; 0x8c
 80a21b8:	f844 3b04 	str.w	r3, [r4], #4
 80a21bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a21be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a21c0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a21c2:	4630      	mov	r0, r6
 80a21c4:	7023      	strb	r3, [r4, #0]
 80a21c6:	bd70      	pop	{r4, r5, r6, pc}
 80a21c8:	080a4508 	.word	0x080a4508

080a21cc <_ZN9TCPClient4peekEv>:
{
 80a21cc:	b510      	push	{r4, lr}
 80a21ce:	6943      	ldr	r3, [r0, #20]
 80a21d0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a21d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a21d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a21da:	429a      	cmp	r2, r3
 80a21dc:	d005      	beq.n	80a21ea <_ZN9TCPClient4peekEv+0x1e>
 80a21de:	6963      	ldr	r3, [r4, #20]
 80a21e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a21e4:	4413      	add	r3, r2
 80a21e6:	7918      	ldrb	r0, [r3, #4]
}
 80a21e8:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a21ea:	6803      	ldr	r3, [r0, #0]
 80a21ec:	691b      	ldr	r3, [r3, #16]
 80a21ee:	4798      	blx	r3
 80a21f0:	2800      	cmp	r0, #0
 80a21f2:	d1f4      	bne.n	80a21de <_ZN9TCPClient4peekEv+0x12>
 80a21f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a21f8:	e7f6      	b.n	80a21e8 <_ZN9TCPClient4peekEv+0x1c>

080a21fa <_ZN9TCPClient4readEv>:
{
 80a21fa:	b510      	push	{r4, lr}
 80a21fc:	6943      	ldr	r3, [r0, #20]
 80a21fe:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2200:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2204:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2208:	429a      	cmp	r2, r3
 80a220a:	d008      	beq.n	80a221e <_ZN9TCPClient4readEv+0x24>
 80a220c:	6963      	ldr	r3, [r4, #20]
 80a220e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2212:	1c51      	adds	r1, r2, #1
 80a2214:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a2218:	4413      	add	r3, r2
 80a221a:	7918      	ldrb	r0, [r3, #4]
}
 80a221c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a221e:	6803      	ldr	r3, [r0, #0]
 80a2220:	691b      	ldr	r3, [r3, #16]
 80a2222:	4798      	blx	r3
 80a2224:	2800      	cmp	r0, #0
 80a2226:	d1f1      	bne.n	80a220c <_ZN9TCPClient4readEv+0x12>
 80a2228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a222c:	e7f6      	b.n	80a221c <_ZN9TCPClient4readEv+0x22>

080a222e <_ZN9TCPClient4readEPhj>:
{
 80a222e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2230:	6943      	ldr	r3, [r0, #20]
 80a2232:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a2234:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2238:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a223c:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a223e:	429a      	cmp	r2, r3
{
 80a2240:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a2242:	d016      	beq.n	80a2272 <_ZN9TCPClient4readEPhj+0x44>
 80a2244:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2246:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a2248:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a224c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a2250:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a2252:	42bc      	cmp	r4, r7
 80a2254:	bf28      	it	cs
 80a2256:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2258:	3304      	adds	r3, #4
 80a225a:	4622      	mov	r2, r4
 80a225c:	4419      	add	r1, r3
 80a225e:	f001 ff89 	bl	80a4174 <memcpy>
 80a2262:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a2264:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2268:	4423      	add	r3, r4
 80a226a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a226e:	4620      	mov	r0, r4
 80a2270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a2272:	6803      	ldr	r3, [r0, #0]
 80a2274:	691b      	ldr	r3, [r3, #16]
 80a2276:	4798      	blx	r3
 80a2278:	2800      	cmp	r0, #0
 80a227a:	d1e3      	bne.n	80a2244 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a227c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a2280:	e7f5      	b.n	80a226e <_ZN9TCPClient4readEPhj+0x40>

080a2282 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a2282:	2300      	movs	r3, #0
 80a2284:	6942      	ldr	r2, [r0, #20]
 80a2286:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a228a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a228c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a2290:	4770      	bx	lr
	...

080a2294 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a2294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2298:	461f      	mov	r7, r3
    stop();
 80a229a:	6803      	ldr	r3, [r0, #0]
{
 80a229c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a22a0:	4605      	mov	r5, r0
 80a22a2:	460c      	mov	r4, r1
 80a22a4:	4616      	mov	r6, r2
    stop();
 80a22a6:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a22a8:	4638      	mov	r0, r7
 80a22aa:	f7ff fd25 	bl	80a1cf8 <_ZN5spark12NetworkClass4fromEm>
 80a22ae:	6803      	ldr	r3, [r0, #0]
 80a22b0:	68db      	ldr	r3, [r3, #12]
 80a22b2:	4798      	blx	r3
 80a22b4:	2800      	cmp	r0, #0
 80a22b6:	d054      	beq.n	80a2362 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a22b8:	4633      	mov	r3, r6
 80a22ba:	2206      	movs	r2, #6
 80a22bc:	2101      	movs	r1, #1
 80a22be:	2002      	movs	r0, #2
 80a22c0:	9700      	str	r7, [sp, #0]
 80a22c2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a22c6:	f7ff fa05 	bl	80a16d4 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a22ca:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a22cc:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a22d0:	f04f 0800 	mov.w	r8, #0
 80a22d4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a22d8:	696b      	ldr	r3, [r5, #20]
 80a22da:	2001      	movs	r0, #1
 80a22dc:	681b      	ldr	r3, [r3, #0]
 80a22de:	4923      	ldr	r1, [pc, #140]	; (80a236c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a22e0:	9301      	str	r3, [sp, #4]
 80a22e2:	4b23      	ldr	r3, [pc, #140]	; (80a2370 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a22e4:	aa02      	add	r2, sp, #8
 80a22e6:	9300      	str	r3, [sp, #0]
 80a22e8:	4643      	mov	r3, r8
 80a22ea:	f7ff fac3 	bl	80a1874 <log_message>
          if (socket_handle_valid(d_->sock))
 80a22ee:	696b      	ldr	r3, [r5, #20]
 80a22f0:	6818      	ldr	r0, [r3, #0]
 80a22f2:	f7ff f9e7 	bl	80a16c4 <socket_handle_valid>
 80a22f6:	2800      	cmp	r0, #0
 80a22f8:	d033      	beq.n	80a2362 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a22fa:	4628      	mov	r0, r5
 80a22fc:	f7ff ffc1 	bl	80a2282 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a2300:	2302      	movs	r3, #2
 80a2302:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2306:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2308:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a230a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a230e:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2310:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a2314:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a2318:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a231a:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a231e:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2322:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2326:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a232a:	f7ff fa93 	bl	80a1854 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a232e:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2330:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2332:	2210      	movs	r2, #16
 80a2334:	6818      	ldr	r0, [r3, #0]
 80a2336:	a902      	add	r1, sp, #8
 80a2338:	f7ff f9d4 	bl	80a16e4 <socket_connect>
 80a233c:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a233e:	4630      	mov	r0, r6
 80a2340:	f7ff fa88 	bl	80a1854 <HAL_NET_SetNetWatchDog>
 80a2344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2346:	696e      	ldr	r6, [r5, #20]
 80a2348:	368c      	adds	r6, #140	; 0x8c
 80a234a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a234c:	6823      	ldr	r3, [r4, #0]
 80a234e:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a2350:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a2352:	f1b9 0f00 	cmp.w	r9, #0
 80a2356:	d007      	beq.n	80a2368 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a2358:	682b      	ldr	r3, [r5, #0]
 80a235a:	4628      	mov	r0, r5
 80a235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a235e:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2360:	4640      	mov	r0, r8
}
 80a2362:	b00b      	add	sp, #44	; 0x2c
 80a2364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2368:	2001      	movs	r0, #1
        return connected;
 80a236a:	e7fa      	b.n	80a2362 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a236c:	080a4554 	.word	0x080a4554
 80a2370:	080a455b 	.word	0x080a455b

080a2374 <_ZN9TCPClient9availableEv>:
{
 80a2374:	b538      	push	{r3, r4, r5, lr}
 80a2376:	6942      	ldr	r2, [r0, #20]
 80a2378:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a237a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a237e:	b12b      	cbz	r3, 80a238c <_ZN9TCPClient9availableEv+0x18>
 80a2380:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2384:	429a      	cmp	r2, r3
 80a2386:	d101      	bne.n	80a238c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a2388:	f7ff ff7b 	bl	80a2282 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a238c:	6920      	ldr	r0, [r4, #16]
 80a238e:	f7ff fcb3 	bl	80a1cf8 <_ZN5spark12NetworkClass4fromEm>
 80a2392:	6803      	ldr	r3, [r0, #0]
 80a2394:	68db      	ldr	r3, [r3, #12]
 80a2396:	4798      	blx	r3
 80a2398:	b1f8      	cbz	r0, 80a23da <_ZN9TCPClient9availableEv+0x66>
 80a239a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a239c:	6818      	ldr	r0, [r3, #0]
 80a239e:	f7ff f991 	bl	80a16c4 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a23a2:	b1d0      	cbz	r0, 80a23da <_ZN9TCPClient9availableEv+0x66>
 80a23a4:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a23a6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a23aa:	297f      	cmp	r1, #127	; 0x7f
 80a23ac:	d815      	bhi.n	80a23da <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a23ae:	1d05      	adds	r5, r0, #4
 80a23b0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a23b4:	2300      	movs	r3, #0
 80a23b6:	6800      	ldr	r0, [r0, #0]
 80a23b8:	4429      	add	r1, r5
 80a23ba:	f7ff f99b 	bl	80a16f4 <socket_receive>
            if (ret > 0)
 80a23be:	2800      	cmp	r0, #0
 80a23c0:	dd0b      	ble.n	80a23da <_ZN9TCPClient9availableEv+0x66>
 80a23c2:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a23c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a23c8:	b90a      	cbnz	r2, 80a23ce <_ZN9TCPClient9availableEv+0x5a>
 80a23ca:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a23ce:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a23d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a23d4:	4410      	add	r0, r2
 80a23d6:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a23da:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a23dc:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a23e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a23e4:	1ac0      	subs	r0, r0, r3
 80a23e6:	bd38      	pop	{r3, r4, r5, pc}

080a23e8 <_ZN9TCPClient4stopEv>:
{
 80a23e8:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a23ea:	6943      	ldr	r3, [r0, #20]
{
 80a23ec:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a23ee:	6818      	ldr	r0, [r3, #0]
 80a23f0:	f7ff f968 	bl	80a16c4 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a23f4:	b118      	cbz	r0, 80a23fe <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a23f6:	6963      	ldr	r3, [r4, #20]
 80a23f8:	6818      	ldr	r0, [r3, #0]
 80a23fa:	f7ff f983 	bl	80a1704 <socket_close>
 80a23fe:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2400:	f7ff f988 	bl	80a1714 <socket_handle_invalid>
 80a2404:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a2406:	6960      	ldr	r0, [r4, #20]
 80a2408:	2211      	movs	r2, #17
 80a240a:	2100      	movs	r1, #0
 80a240c:	308c      	adds	r0, #140	; 0x8c
 80a240e:	f001 febf 	bl	80a4190 <memset>
  flush_buffer();
 80a2412:	4620      	mov	r0, r4
}
 80a2414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a2418:	f7ff bf33 	b.w	80a2282 <_ZN9TCPClient12flush_bufferEv>

080a241c <_ZN9TCPClient6statusEv>:
{
 80a241c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a241e:	6943      	ldr	r3, [r0, #20]
{
 80a2420:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a2422:	6818      	ldr	r0, [r3, #0]
 80a2424:	f7ff f94e 	bl	80a16c4 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2428:	b908      	cbnz	r0, 80a242e <_ZN9TCPClient6statusEv+0x12>
 80a242a:	2000      	movs	r0, #0
}
 80a242c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a242e:	6920      	ldr	r0, [r4, #16]
 80a2430:	f7ff fc62 	bl	80a1cf8 <_ZN5spark12NetworkClass4fromEm>
 80a2434:	6803      	ldr	r3, [r0, #0]
 80a2436:	68db      	ldr	r3, [r3, #12]
 80a2438:	4798      	blx	r3
 80a243a:	2800      	cmp	r0, #0
 80a243c:	d0f5      	beq.n	80a242a <_ZN9TCPClient6statusEv+0xe>
 80a243e:	6963      	ldr	r3, [r4, #20]
 80a2440:	6818      	ldr	r0, [r3, #0]
 80a2442:	f7ff f937 	bl	80a16b4 <socket_active_status>
 80a2446:	fab0 f080 	clz	r0, r0
 80a244a:	0940      	lsrs	r0, r0, #5
 80a244c:	e7ee      	b.n	80a242c <_ZN9TCPClient6statusEv+0x10>

080a244e <_ZN9TCPClientcvbEv>:
{
 80a244e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2450:	f7ff ffe4 	bl	80a241c <_ZN9TCPClient6statusEv>
}
 80a2454:	3800      	subs	r0, #0
 80a2456:	bf18      	it	ne
 80a2458:	2001      	movne	r0, #1
 80a245a:	bd08      	pop	{r3, pc}

080a245c <_ZN9TCPClient5writeEPKhjm>:
{
 80a245c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a2460:	2700      	movs	r7, #0
 80a2462:	6047      	str	r7, [r0, #4]
 80a2464:	4604      	mov	r4, r0
 80a2466:	460d      	mov	r5, r1
 80a2468:	4616      	mov	r6, r2
 80a246a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a246c:	f7ff ffd6 	bl	80a241c <_ZN9TCPClient6statusEv>
 80a2470:	b170      	cbz	r0, 80a2490 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a2472:	e9cd 8700 	strd	r8, r7, [sp]
 80a2476:	6960      	ldr	r0, [r4, #20]
 80a2478:	463b      	mov	r3, r7
 80a247a:	4632      	mov	r2, r6
 80a247c:	4629      	mov	r1, r5
 80a247e:	6800      	ldr	r0, [r0, #0]
 80a2480:	f7ff f950 	bl	80a1724 <socket_send_ex>
    if (ret < 0) {
 80a2484:	2800      	cmp	r0, #0
 80a2486:	da00      	bge.n	80a248a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a2488:	6060      	str	r0, [r4, #4]
}
 80a248a:	b002      	add	sp, #8
 80a248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2494:	e7f8      	b.n	80a2488 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a2496 <_ZN9TCPClient9connectedEv>:
{
 80a2496:	b570      	push	{r4, r5, r6, lr}
 80a2498:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a249a:	f7ff ffbf 	bl	80a241c <_ZN9TCPClient6statusEv>
 80a249e:	b9e8      	cbnz	r0, 80a24dc <_ZN9TCPClient9connectedEv+0x46>
 80a24a0:	696b      	ldr	r3, [r5, #20]
 80a24a2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a24a6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a24aa:	4291      	cmp	r1, r2
 80a24ac:	d116      	bne.n	80a24dc <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a24ae:	6818      	ldr	r0, [r3, #0]
 80a24b0:	f7ff f908 	bl	80a16c4 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a24b4:	b908      	cbnz	r0, 80a24ba <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a24b6:	2000      	movs	r0, #0
}
 80a24b8:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a24ba:	696b      	ldr	r3, [r5, #20]
 80a24bc:	6818      	ldr	r0, [r3, #0]
 80a24be:	f7ff f8f9 	bl	80a16b4 <socket_active_status>
 80a24c2:	2801      	cmp	r0, #1
 80a24c4:	4604      	mov	r4, r0
 80a24c6:	d1f6      	bne.n	80a24b6 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a24c8:	682b      	ldr	r3, [r5, #0]
 80a24ca:	4628      	mov	r0, r5
 80a24cc:	691b      	ldr	r3, [r3, #16]
 80a24ce:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a24d0:	b930      	cbnz	r0, 80a24e0 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a24d2:	682b      	ldr	r3, [r5, #0]
 80a24d4:	4628      	mov	r0, r5
 80a24d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a24d8:	4798      	blx	r3
 80a24da:	e7ec      	b.n	80a24b6 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a24dc:	2001      	movs	r0, #1
 80a24de:	e7eb      	b.n	80a24b8 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a24e0:	4620      	mov	r0, r4
 80a24e2:	e7e9      	b.n	80a24b8 <_ZN9TCPClient9connectedEv+0x22>

080a24e4 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a24e4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a24e6:	b510      	push	{r4, lr}
 80a24e8:	4604      	mov	r4, r0
          total(0) {
 80a24ea:	6001      	str	r1, [r0, #0]
 80a24ec:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a24f0:	3088      	adds	r0, #136	; 0x88
 80a24f2:	f7ff fb3f 	bl	80a1b74 <_ZN9IPAddressC1Ev>
}
 80a24f6:	4620      	mov	r0, r4
 80a24f8:	bd10      	pop	{r4, pc}
	...

080a24fc <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a24fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2502:	2300      	movs	r3, #0
 80a2504:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a2508:	4a0d      	ldr	r2, [pc, #52]	; (80a2540 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a250a:	6103      	str	r3, [r0, #16]
 80a250c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a250e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a2510:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2512:	20ac      	movs	r0, #172	; 0xac
 80a2514:	460e      	mov	r6, r1
 80a2516:	f7fd fdc0 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a251a:	1e05      	subs	r5, r0, #0
 80a251c:	f105 070c 	add.w	r7, r5, #12
 80a2520:	d008      	beq.n	80a2534 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a2522:	2301      	movs	r3, #1
 80a2524:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a2528:	4b06      	ldr	r3, [pc, #24]	; (80a2544 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a252a:	4631      	mov	r1, r6
 80a252c:	4638      	mov	r0, r7
 80a252e:	602b      	str	r3, [r5, #0]
 80a2530:	f7ff ffd8 	bl	80a24e4 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a2534:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a2536:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a253a:	f7ff fea2 	bl	80a2282 <_ZN9TCPClient12flush_bufferEv>
}
 80a253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2540:	080a459c 	.word	0x080a459c
 80a2544:	080a4578 	.word	0x080a4578

080a2548 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a2548:	b510      	push	{r4, lr}
 80a254a:	4604      	mov	r4, r0
 80a254c:	f7ff f8e2 	bl	80a1714 <socket_handle_invalid>
 80a2550:	4601      	mov	r1, r0
 80a2552:	4620      	mov	r0, r4
 80a2554:	f7ff ffd2 	bl	80a24fc <_ZN9TCPClientC1Em>
}
 80a2558:	4620      	mov	r0, r4
 80a255a:	bd10      	pop	{r4, pc}

080a255c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a255c:	b510      	push	{r4, lr}
 80a255e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a2560:	6800      	ldr	r0, [r0, #0]
 80a2562:	f7ff f8af 	bl	80a16c4 <socket_handle_valid>
 80a2566:	b110      	cbz	r0, 80a256e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a2568:	6820      	ldr	r0, [r4, #0]
 80a256a:	f7ff f8cb 	bl	80a1704 <socket_close>
    }
}
 80a256e:	4620      	mov	r0, r4
 80a2570:	bd10      	pop	{r4, pc}

080a2572 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a2572:	300c      	adds	r0, #12
 80a2574:	f7ff bff2 	b.w	80a255c <_ZN9TCPClient4DataD1Ev>

080a2578 <_ZN9TCPClient7connectEPKctm>:
{
 80a2578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a257c:	461f      	mov	r7, r3
    stop();
 80a257e:	6803      	ldr	r3, [r0, #0]
{
 80a2580:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a2584:	4606      	mov	r6, r0
 80a2586:	460d      	mov	r5, r1
 80a2588:	4690      	mov	r8, r2
    stop();
 80a258a:	4798      	blx	r3
    if (Network.ready())
 80a258c:	4813      	ldr	r0, [pc, #76]	; (80a25dc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a258e:	f7ff fb5e 	bl	80a1c4e <_ZN5spark12NetworkClass5readyEv>
 80a2592:	b1f0      	cbz	r0, 80a25d2 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a2594:	a802      	add	r0, sp, #8
 80a2596:	f7ff faed 	bl	80a1b74 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a259a:	4628      	mov	r0, r5
 80a259c:	f001 fe36 	bl	80a420c <strlen>
 80a25a0:	2400      	movs	r4, #0
 80a25a2:	b281      	uxth	r1, r0
 80a25a4:	463b      	mov	r3, r7
 80a25a6:	4628      	mov	r0, r5
 80a25a8:	9400      	str	r4, [sp, #0]
 80a25aa:	aa03      	add	r2, sp, #12
 80a25ac:	f7ff f95a 	bl	80a1864 <inet_gethostbyname>
 80a25b0:	b990      	cbnz	r0, 80a25d8 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a25b2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a25b4:	ad09      	add	r5, sp, #36	; 0x24
 80a25b6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a25ba:	4b09      	ldr	r3, [pc, #36]	; (80a25e0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a25bc:	ac03      	add	r4, sp, #12
 80a25be:	9308      	str	r3, [sp, #32]
 80a25c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a25c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a25c4:	6823      	ldr	r3, [r4, #0]
 80a25c6:	4642      	mov	r2, r8
 80a25c8:	702b      	strb	r3, [r5, #0]
 80a25ca:	4630      	mov	r0, r6
 80a25cc:	463b      	mov	r3, r7
 80a25ce:	a908      	add	r1, sp, #32
 80a25d0:	47c8      	blx	r9
}
 80a25d2:	b00f      	add	sp, #60	; 0x3c
 80a25d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a25d8:	4620      	mov	r0, r4
 80a25da:	e7fa      	b.n	80a25d2 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a25dc:	20000198 	.word	0x20000198
 80a25e0:	080a4508 	.word	0x080a4508

080a25e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a25e4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a25e6:	2000      	movs	r0, #0
 80a25e8:	f7ff f990 	bl	80a190c <spark_sync_time_pending>
 80a25ec:	b128      	cbz	r0, 80a25fa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a25ee:	f7ff f985 	bl	80a18fc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a25f2:	f080 0001 	eor.w	r0, r0, #1
 80a25f6:	b2c0      	uxtb	r0, r0
    }
 80a25f8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a25fa:	2001      	movs	r0, #1
 80a25fc:	e7fc      	b.n	80a25f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a25fe <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a25fe:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2600:	2000      	movs	r0, #0
 80a2602:	f7fe ffd3 	bl	80a15ac <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2606:	4604      	mov	r4, r0
 80a2608:	b9a0      	cbnz	r0, 80a2634 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a260a:	f7ff f93b 	bl	80a1884 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a260e:	2801      	cmp	r0, #1
 80a2610:	d110      	bne.n	80a2634 <_ZN9TimeClass7isValidEv+0x36>
 80a2612:	4620      	mov	r0, r4
 80a2614:	f7ff f94e 	bl	80a18b4 <system_thread_get_state>
 80a2618:	b960      	cbnz	r0, 80a2634 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a261a:	f7ff ffe3 	bl	80a25e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a261e:	b910      	cbnz	r0, 80a2626 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2620:	f7ff f964 	bl	80a18ec <spark_process>
        while (_while() && !_condition()) {
 80a2624:	e7f9      	b.n	80a261a <_ZN9TimeClass7isValidEv+0x1c>
 80a2626:	f7ff ffdd 	bl	80a25e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a262a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a262e:	2000      	movs	r0, #0
 80a2630:	f7fe bfbc 	b.w	80a15ac <hal_rtc_time_is_valid>
}
 80a2634:	4620      	mov	r0, r4
 80a2636:	bd10      	pop	{r4, pc}

080a2638 <_ZN9TimeClass3nowEv>:
{
 80a2638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a263a:	f7ff ffe0 	bl	80a25fe <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a263e:	2210      	movs	r2, #16
 80a2640:	2100      	movs	r1, #0
 80a2642:	4668      	mov	r0, sp
 80a2644:	f001 fda4 	bl	80a4190 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2648:	2100      	movs	r1, #0
 80a264a:	4668      	mov	r0, sp
 80a264c:	f7fe ffb6 	bl	80a15bc <hal_rtc_get_time>
}
 80a2650:	9800      	ldr	r0, [sp, #0]
 80a2652:	b005      	add	sp, #20
 80a2654:	f85d fb04 	ldr.w	pc, [sp], #4

080a2658 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2658:	4b02      	ldr	r3, [pc, #8]	; (80a2664 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a265a:	681a      	ldr	r2, [r3, #0]
 80a265c:	4b02      	ldr	r3, [pc, #8]	; (80a2668 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a265e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2660:	4770      	bx	lr
 80a2662:	bf00      	nop
 80a2664:	20000028 	.word	0x20000028
 80a2668:	200001c0 	.word	0x200001c0

080a266c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a266c:	4770      	bx	lr

080a266e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a266e:	7441      	strb	r1, [r0, #17]
}
 80a2670:	4770      	bx	lr

080a2672 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2672:	4770      	bx	lr

080a2674 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a2674:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2676:	7c00      	ldrb	r0, [r0, #16]
 80a2678:	f7ff f8a4 	bl	80a17c4 <hal_usart_available_data_for_write>
}
 80a267c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2680:	bd08      	pop	{r3, pc}

080a2682 <_ZN11USARTSerial9availableEv>:
{
 80a2682:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2684:	7c00      	ldrb	r0, [r0, #16]
 80a2686:	f7ff f875 	bl	80a1774 <hal_usart_available>
}
 80a268a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a268e:	bd08      	pop	{r3, pc}

080a2690 <_ZN11USARTSerial4peekEv>:
{
 80a2690:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2692:	7c00      	ldrb	r0, [r0, #16]
 80a2694:	f7ff f87e 	bl	80a1794 <hal_usart_peek>
}
 80a2698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a269c:	bd08      	pop	{r3, pc}

080a269e <_ZN11USARTSerial4readEv>:
{
 80a269e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a26a0:	7c00      	ldrb	r0, [r0, #16]
 80a26a2:	f7ff f86f 	bl	80a1784 <hal_usart_read>
}
 80a26a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a26aa:	bd08      	pop	{r3, pc}

080a26ac <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a26ac:	7c00      	ldrb	r0, [r0, #16]
 80a26ae:	f7ff b879 	b.w	80a17a4 <hal_usart_flush>

080a26b2 <_ZN11USARTSerial5writeEh>:
{
 80a26b2:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a26b4:	7c46      	ldrb	r6, [r0, #17]
{
 80a26b6:	4604      	mov	r4, r0
 80a26b8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a26ba:	b12e      	cbz	r6, 80a26c8 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a26bc:	4629      	mov	r1, r5
 80a26be:	7c20      	ldrb	r0, [r4, #16]
}
 80a26c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a26c4:	f7ff b84e 	b.w	80a1764 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a26c8:	7c00      	ldrb	r0, [r0, #16]
 80a26ca:	f7ff f87b 	bl	80a17c4 <hal_usart_available_data_for_write>
 80a26ce:	2800      	cmp	r0, #0
 80a26d0:	dcf4      	bgt.n	80a26bc <_ZN11USARTSerial5writeEh+0xa>
}
 80a26d2:	4630      	mov	r0, r6
 80a26d4:	bd70      	pop	{r4, r5, r6, pc}

080a26d6 <_ZN11USARTSerialD0Ev>:
 80a26d6:	b510      	push	{r4, lr}
 80a26d8:	4604      	mov	r4, r0
 80a26da:	2114      	movs	r1, #20
 80a26dc:	f000 fb5a 	bl	80a2d94 <_ZdlPvj>
 80a26e0:	4620      	mov	r0, r4
 80a26e2:	bd10      	pop	{r4, pc}

080a26e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a26e4:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a26e8:	b510      	push	{r4, lr}
 80a26ea:	4604      	mov	r4, r0
 80a26ec:	4608      	mov	r0, r1
 80a26ee:	4611      	mov	r1, r2
 80a26f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a26f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a26f8:	4a04      	ldr	r2, [pc, #16]	; (80a270c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a26fa:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a26fc:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a26fe:	2201      	movs	r2, #1
 80a2700:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2702:	461a      	mov	r2, r3
 80a2704:	f7ff f826 	bl	80a1754 <hal_usart_init>
}
 80a2708:	4620      	mov	r0, r4
 80a270a:	bd10      	pop	{r4, pc}
 80a270c:	080a4604 	.word	0x080a4604

080a2710 <_Z22__fetch_global_Serial1v>:
{
 80a2710:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2712:	4d0c      	ldr	r5, [pc, #48]	; (80a2744 <_Z22__fetch_global_Serial1v+0x34>)
 80a2714:	7829      	ldrb	r1, [r5, #0]
 80a2716:	f3bf 8f5b 	dmb	ish
 80a271a:	f011 0401 	ands.w	r4, r1, #1
 80a271e:	d10f      	bne.n	80a2740 <_Z22__fetch_global_Serial1v+0x30>
 80a2720:	4628      	mov	r0, r5
 80a2722:	f7fd fcc2 	bl	80a00aa <__cxa_guard_acquire>
 80a2726:	b158      	cbz	r0, 80a2740 <_Z22__fetch_global_Serial1v+0x30>
 80a2728:	4621      	mov	r1, r4
 80a272a:	4b07      	ldr	r3, [pc, #28]	; (80a2748 <_Z22__fetch_global_Serial1v+0x38>)
 80a272c:	4a07      	ldr	r2, [pc, #28]	; (80a274c <_Z22__fetch_global_Serial1v+0x3c>)
 80a272e:	4808      	ldr	r0, [pc, #32]	; (80a2750 <_Z22__fetch_global_Serial1v+0x40>)
 80a2730:	f7ff ffd8 	bl	80a26e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2734:	4628      	mov	r0, r5
 80a2736:	f7fd fcbd 	bl	80a00b4 <__cxa_guard_release>
 80a273a:	4806      	ldr	r0, [pc, #24]	; (80a2754 <_Z22__fetch_global_Serial1v+0x44>)
 80a273c:	f001 fd00 	bl	80a4140 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2740:	4803      	ldr	r0, [pc, #12]	; (80a2750 <_Z22__fetch_global_Serial1v+0x40>)
 80a2742:	bd38      	pop	{r3, r4, r5, pc}
 80a2744:	200001c4 	.word	0x200001c4
 80a2748:	2000024c 	.word	0x2000024c
 80a274c:	200001c8 	.word	0x200001c8
 80a2750:	200002d0 	.word	0x200002d0
 80a2754:	080a2673 	.word	0x080a2673

080a2758 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2758:	7441      	strb	r1, [r0, #17]
}
 80a275a:	4770      	bx	lr

080a275c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a275c:	4770      	bx	lr

080a275e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a275e:	4770      	bx	lr

080a2760 <_ZN9USBSerial4readEv>:
{
 80a2760:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2762:	2100      	movs	r1, #0
 80a2764:	7c00      	ldrb	r0, [r0, #16]
 80a2766:	f7ff f855 	bl	80a1814 <HAL_USB_USART_Receive_Data>
}
 80a276a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a276e:	bd08      	pop	{r3, pc}

080a2770 <_ZN9USBSerial4peekEv>:
{
 80a2770:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2772:	2101      	movs	r1, #1
 80a2774:	7c00      	ldrb	r0, [r0, #16]
 80a2776:	f7ff f84d 	bl	80a1814 <HAL_USB_USART_Receive_Data>
}
 80a277a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a277e:	bd08      	pop	{r3, pc}

080a2780 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2780:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2782:	7c00      	ldrb	r0, [r0, #16]
 80a2784:	f7ff f83e 	bl	80a1804 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2788:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a278c:	bd08      	pop	{r3, pc}

080a278e <_ZN9USBSerial9availableEv>:
{
 80a278e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2790:	7c00      	ldrb	r0, [r0, #16]
 80a2792:	f7ff f82f 	bl	80a17f4 <HAL_USB_USART_Available_Data>
}
 80a2796:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a279a:	bd08      	pop	{r3, pc}

080a279c <_ZN9USBSerial5writeEh>:
{
 80a279c:	b538      	push	{r3, r4, r5, lr}
 80a279e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a27a0:	7c00      	ldrb	r0, [r0, #16]
{
 80a27a2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a27a4:	f7ff f82e 	bl	80a1804 <HAL_USB_USART_Available_Data_For_Write>
 80a27a8:	2800      	cmp	r0, #0
 80a27aa:	dc01      	bgt.n	80a27b0 <_ZN9USBSerial5writeEh+0x14>
 80a27ac:	7c60      	ldrb	r0, [r4, #17]
 80a27ae:	b128      	cbz	r0, 80a27bc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a27b0:	4629      	mov	r1, r5
 80a27b2:	7c20      	ldrb	r0, [r4, #16]
 80a27b4:	f7ff f836 	bl	80a1824 <HAL_USB_USART_Send_Data>
 80a27b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a27bc:	bd38      	pop	{r3, r4, r5, pc}

080a27be <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a27be:	7c00      	ldrb	r0, [r0, #16]
 80a27c0:	f7ff b838 	b.w	80a1834 <HAL_USB_USART_Flush_Data>

080a27c4 <_ZN9USBSerialD0Ev>:
 80a27c4:	b510      	push	{r4, lr}
 80a27c6:	4604      	mov	r4, r0
 80a27c8:	2114      	movs	r1, #20
 80a27ca:	f000 fae3 	bl	80a2d94 <_ZdlPvj>
 80a27ce:	4620      	mov	r0, r4
 80a27d0:	bd10      	pop	{r4, pc}

080a27d2 <__tcf_1>:
 80a27d2:	4770      	bx	lr

080a27d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a27d4:	b510      	push	{r4, lr}
 80a27d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27da:	4604      	mov	r4, r0
 80a27dc:	4608      	mov	r0, r1
 80a27de:	2100      	movs	r1, #0
 80a27e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a27e4:	4b04      	ldr	r3, [pc, #16]	; (80a27f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a27e6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a27e8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a27ea:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a27ec:	4611      	mov	r1, r2
  _blocking = true;
 80a27ee:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a27f0:	f7fe fff0 	bl	80a17d4 <HAL_USB_USART_Init>
}
 80a27f4:	4620      	mov	r0, r4
 80a27f6:	bd10      	pop	{r4, pc}
 80a27f8:	080a4634 	.word	0x080a4634

080a27fc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a27fc:	2200      	movs	r2, #0
 80a27fe:	7c00      	ldrb	r0, [r0, #16]
 80a2800:	f7fe bff0 	b.w	80a17e4 <HAL_USB_USART_Begin>

080a2804 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2804:	7c00      	ldrb	r0, [r0, #16]
 80a2806:	f7ff b81d 	b.w	80a1844 <HAL_USB_USART_Is_Enabled>

080a280a <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a280a:	f7ff bffb 	b.w	80a2804 <_ZN9USBSerial9isEnabledEv>
	...

080a2810 <_Z19acquireSerialBufferv>:
{
 80a2810:	b510      	push	{r4, lr}
 80a2812:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2814:	2214      	movs	r2, #20
 80a2816:	2100      	movs	r1, #0
 80a2818:	f001 fcba 	bl	80a4190 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a281c:	4b05      	ldr	r3, [pc, #20]	; (80a2834 <_Z19acquireSerialBufferv+0x24>)
}
 80a281e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2820:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2822:	4b05      	ldr	r3, [pc, #20]	; (80a2838 <_Z19acquireSerialBufferv+0x28>)
 80a2824:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2826:	f240 1301 	movw	r3, #257	; 0x101
 80a282a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a282c:	2381      	movs	r3, #129	; 0x81
 80a282e:	8223      	strh	r3, [r4, #16]
}
 80a2830:	bd10      	pop	{r4, pc}
 80a2832:	bf00      	nop
 80a2834:	20000314 	.word	0x20000314
 80a2838:	20000415 	.word	0x20000415

080a283c <_Z16_fetch_usbserialv>:
{
 80a283c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a283e:	4d0e      	ldr	r5, [pc, #56]	; (80a2878 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2840:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2842:	a801      	add	r0, sp, #4
 80a2844:	f7ff ffe4 	bl	80a2810 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2848:	7829      	ldrb	r1, [r5, #0]
 80a284a:	f3bf 8f5b 	dmb	ish
 80a284e:	f011 0401 	ands.w	r4, r1, #1
 80a2852:	d10e      	bne.n	80a2872 <_Z16_fetch_usbserialv+0x36>
 80a2854:	4628      	mov	r0, r5
 80a2856:	f7fd fc28 	bl	80a00aa <__cxa_guard_acquire>
 80a285a:	b150      	cbz	r0, 80a2872 <_Z16_fetch_usbserialv+0x36>
 80a285c:	4621      	mov	r1, r4
 80a285e:	aa01      	add	r2, sp, #4
 80a2860:	4806      	ldr	r0, [pc, #24]	; (80a287c <_Z16_fetch_usbserialv+0x40>)
 80a2862:	f7ff ffb7 	bl	80a27d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2866:	4628      	mov	r0, r5
 80a2868:	f7fd fc24 	bl	80a00b4 <__cxa_guard_release>
 80a286c:	4804      	ldr	r0, [pc, #16]	; (80a2880 <_Z16_fetch_usbserialv+0x44>)
 80a286e:	f001 fc67 	bl	80a4140 <atexit>
	return _usbserial;
}
 80a2872:	4802      	ldr	r0, [pc, #8]	; (80a287c <_Z16_fetch_usbserialv+0x40>)
 80a2874:	b007      	add	sp, #28
 80a2876:	bd30      	pop	{r4, r5, pc}
 80a2878:	200002e4 	.word	0x200002e4
 80a287c:	200002ec 	.word	0x200002ec
 80a2880:	080a275d 	.word	0x080a275d

080a2884 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2884:	b510      	push	{r4, lr}
 80a2886:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2888:	2214      	movs	r2, #20
 80a288a:	2100      	movs	r1, #0
 80a288c:	f001 fc80 	bl	80a4190 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2890:	4b05      	ldr	r3, [pc, #20]	; (80a28a8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2892:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2894:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2896:	4b05      	ldr	r3, [pc, #20]	; (80a28ac <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2898:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a289a:	f240 1301 	movw	r3, #257	; 0x101
 80a289e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a28a0:	2381      	movs	r3, #129	; 0x81
 80a28a2:	8223      	strh	r3, [r4, #16]
}
 80a28a4:	bd10      	pop	{r4, pc}
 80a28a6:	bf00      	nop
 80a28a8:	20000496 	.word	0x20000496
 80a28ac:	20000597 	.word	0x20000597

080a28b0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a28b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a28b2:	4c0e      	ldr	r4, [pc, #56]	; (80a28ec <_Z17_fetch_usbserial1v+0x3c>)
{
 80a28b4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a28b6:	a801      	add	r0, sp, #4
 80a28b8:	f7ff ffe4 	bl	80a2884 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a28bc:	7823      	ldrb	r3, [r4, #0]
 80a28be:	f3bf 8f5b 	dmb	ish
 80a28c2:	07db      	lsls	r3, r3, #31
 80a28c4:	d40e      	bmi.n	80a28e4 <_Z17_fetch_usbserial1v+0x34>
 80a28c6:	4620      	mov	r0, r4
 80a28c8:	f7fd fbef 	bl	80a00aa <__cxa_guard_acquire>
 80a28cc:	b150      	cbz	r0, 80a28e4 <_Z17_fetch_usbserial1v+0x34>
 80a28ce:	2101      	movs	r1, #1
 80a28d0:	aa01      	add	r2, sp, #4
 80a28d2:	4807      	ldr	r0, [pc, #28]	; (80a28f0 <_Z17_fetch_usbserial1v+0x40>)
 80a28d4:	f7ff ff7e 	bl	80a27d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a28d8:	4620      	mov	r0, r4
 80a28da:	f7fd fbeb 	bl	80a00b4 <__cxa_guard_release>
 80a28de:	4805      	ldr	r0, [pc, #20]	; (80a28f4 <_Z17_fetch_usbserial1v+0x44>)
 80a28e0:	f001 fc2e 	bl	80a4140 <atexit>
  return _usbserial1;
}
 80a28e4:	4802      	ldr	r0, [pc, #8]	; (80a28f0 <_Z17_fetch_usbserial1v+0x40>)
 80a28e6:	b006      	add	sp, #24
 80a28e8:	bd10      	pop	{r4, pc}
 80a28ea:	bf00      	nop
 80a28ec:	200002e8 	.word	0x200002e8
 80a28f0:	20000300 	.word	0x20000300
 80a28f4:	080a27d3 	.word	0x080a27d3

080a28f8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a28f8:	2200      	movs	r2, #0
 80a28fa:	6840      	ldr	r0, [r0, #4]
 80a28fc:	4611      	mov	r1, r2
 80a28fe:	f7ff b82d 	b.w	80a195c <network_ready>

080a2902 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2902:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2904:	4615      	mov	r5, r2
 80a2906:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2908:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a290a:	460e      	mov	r6, r1
 80a290c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a290e:	2100      	movs	r1, #0
 80a2910:	a803      	add	r0, sp, #12
 80a2912:	f001 fc3d 	bl	80a4190 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2916:	4628      	mov	r0, r5
 80a2918:	f001 fc78 	bl	80a420c <strlen>
 80a291c:	2700      	movs	r7, #0
 80a291e:	b281      	uxth	r1, r0
 80a2920:	6873      	ldr	r3, [r6, #4]
 80a2922:	4628      	mov	r0, r5
 80a2924:	9700      	str	r7, [sp, #0]
 80a2926:	aa03      	add	r2, sp, #12
 80a2928:	f7fe ff9c 	bl	80a1864 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a292c:	b130      	cbz	r0, 80a293c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a292e:	4639      	mov	r1, r7
 80a2930:	4620      	mov	r0, r4
 80a2932:	f7ff f93f 	bl	80a1bb4 <_ZN9IPAddressC1Em>
    }
 80a2936:	4620      	mov	r0, r4
 80a2938:	b009      	add	sp, #36	; 0x24
 80a293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a293c:	4620      	mov	r0, r4
 80a293e:	a903      	add	r1, sp, #12
 80a2940:	f7ff f926 	bl	80a1b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2944:	e7f7      	b.n	80a2936 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2946 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2946:	2200      	movs	r2, #0
 80a2948:	6840      	ldr	r0, [r0, #4]
 80a294a:	4611      	mov	r1, r2
 80a294c:	f7ff b826 	b.w	80a199c <network_listening>

080a2950 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2950:	2200      	movs	r2, #0
 80a2952:	6840      	ldr	r0, [r0, #4]
 80a2954:	4611      	mov	r1, r2
 80a2956:	f7ff b831 	b.w	80a19bc <network_get_listen_timeout>

080a295a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a295a:	2200      	movs	r2, #0
 80a295c:	6840      	ldr	r0, [r0, #4]
 80a295e:	f7ff b825 	b.w	80a19ac <network_set_listen_timeout>

080a2962 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2962:	2200      	movs	r2, #0
 80a2964:	6840      	ldr	r0, [r0, #4]
 80a2966:	f081 0101 	eor.w	r1, r1, #1
 80a296a:	f7ff b80f 	b.w	80a198c <network_listen>

080a296e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a296e:	2300      	movs	r3, #0
 80a2970:	6840      	ldr	r0, [r0, #4]
 80a2972:	461a      	mov	r2, r3
 80a2974:	4619      	mov	r1, r3
 80a2976:	f7ff b801 	b.w	80a197c <network_off>

080a297a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a297a:	2300      	movs	r3, #0
 80a297c:	6840      	ldr	r0, [r0, #4]
 80a297e:	461a      	mov	r2, r3
 80a2980:	4619      	mov	r1, r3
 80a2982:	f7fe bff3 	b.w	80a196c <network_on>

080a2986 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2986:	2200      	movs	r2, #0
 80a2988:	6840      	ldr	r0, [r0, #4]
 80a298a:	4611      	mov	r1, r2
 80a298c:	f7fe bfd6 	b.w	80a193c <network_connecting>

080a2990 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2990:	2200      	movs	r2, #0
 80a2992:	2102      	movs	r1, #2
 80a2994:	6840      	ldr	r0, [r0, #4]
 80a2996:	f7fe bfd9 	b.w	80a194c <network_disconnect>

080a299a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a299a:	2300      	movs	r3, #0
 80a299c:	6840      	ldr	r0, [r0, #4]
 80a299e:	461a      	mov	r2, r3
 80a29a0:	f7fe bfc4 	b.w	80a192c <network_connect>

080a29a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a29a4:	2204      	movs	r2, #4
 80a29a6:	4b02      	ldr	r3, [pc, #8]	; (80a29b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a29a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a29aa:	4a02      	ldr	r2, [pc, #8]	; (80a29b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a29ac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a29ae:	4770      	bx	lr
 80a29b0:	20000618 	.word	0x20000618
 80a29b4:	080a4664 	.word	0x080a4664

080a29b8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a29b8:	b510      	push	{r4, lr}
 80a29ba:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a29bc:	f001 fc26 	bl	80a420c <strlen>
 80a29c0:	1e43      	subs	r3, r0, #1
 80a29c2:	4620      	mov	r0, r4
 80a29c4:	4423      	add	r3, r4
	while(i<j){
 80a29c6:	4283      	cmp	r3, r0
 80a29c8:	d906      	bls.n	80a29d8 <_Z11str_reversePc+0x20>
		c = *i;
 80a29ca:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a29cc:	7819      	ldrb	r1, [r3, #0]
 80a29ce:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a29d2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a29d6:	e7f6      	b.n	80a29c6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a29d8:	bd10      	pop	{r4, pc}

080a29da <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a29da:	1e93      	subs	r3, r2, #2
 80a29dc:	2b22      	cmp	r3, #34	; 0x22
 80a29de:	f04f 0300 	mov.w	r3, #0
{
 80a29e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a29e6:	b08c      	sub	sp, #48	; 0x30
 80a29e8:	460d      	mov	r5, r1
 80a29ea:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a29ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a29f0:	d926      	bls.n	80a2a40 <ltoa+0x66>

      if (10 == base && N < 0L)
 80a29f2:	2800      	cmp	r0, #0
 80a29f4:	da29      	bge.n	80a2a4a <ltoa+0x70>
      {
            *head++ = '-';
 80a29f6:	462e      	mov	r6, r5
 80a29f8:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a29fa:	240a      	movs	r4, #10
            *head++ = '-';
 80a29fc:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a2a00:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2a02:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a2a06:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2a0a:	4622      	mov	r2, r4
 80a2a0c:	4601      	mov	r1, r0
 80a2a0e:	a801      	add	r0, sp, #4
 80a2a10:	f001 fb9c 	bl	80a414c <ldiv>
 80a2a14:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2a16:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a2a18:	2b09      	cmp	r3, #9
 80a2a1a:	bfcc      	ite	gt
 80a2a1c:	2237      	movgt	r2, #55	; 0x37
 80a2a1e:	2230      	movle	r2, #48	; 0x30
 80a2a20:	4413      	add	r3, r2
 80a2a22:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a2a26:	f108 0801 	add.w	r8, r8, #1
 80a2a2a:	2800      	cmp	r0, #0
 80a2a2c:	d1ed      	bne.n	80a2a0a <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a2a2e:	4642      	mov	r2, r8
 80a2a30:	4630      	mov	r0, r6
 80a2a32:	1c79      	adds	r1, r7, #1
 80a2a34:	f001 fb9e 	bl	80a4174 <memcpy>
      return str;
}
 80a2a38:	4628      	mov	r0, r5
 80a2a3a:	b00c      	add	sp, #48	; 0x30
 80a2a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a2a40:	2a0a      	cmp	r2, #10
 80a2a42:	d0d6      	beq.n	80a29f2 <ltoa+0x18>
      if (uarg)
 80a2a44:	b118      	cbz	r0, 80a2a4e <ltoa+0x74>
 80a2a46:	462e      	mov	r6, r5
 80a2a48:	e7db      	b.n	80a2a02 <ltoa+0x28>
 80a2a4a:	240a      	movs	r4, #10
 80a2a4c:	e7fa      	b.n	80a2a44 <ltoa+0x6a>
      else  *tail-- = '0';
 80a2a4e:	2330      	movs	r3, #48	; 0x30
 80a2a50:	462e      	mov	r6, r5
      int i = 2;
 80a2a52:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a2a56:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a2a5a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a2a5e:	e7e6      	b.n	80a2a2e <ltoa+0x54>

080a2a60 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2a60:	b570      	push	{r4, r5, r6, lr}
 80a2a62:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2a64:	1e91      	subs	r1, r2, #2
 80a2a66:	2922      	cmp	r1, #34	; 0x22
 80a2a68:	d822      	bhi.n	80a2ab0 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a2a6a:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a2a6c:	b168      	cbz	r0, 80a2a8a <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2a6e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2a72:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2a76:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2a78:	2809      	cmp	r0, #9
                *ptr += '0';
 80a2a7a:	bf94      	ite	ls
 80a2a7c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2a7e:	3157      	addhi	r1, #87	; 0x57
 80a2a80:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a2a82:	4630      	mov	r0, r6
 80a2a84:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a2a88:	e7f0      	b.n	80a2a6c <ultoa+0xc>
 80a2a8a:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a2a8c:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a2a8e:	4423      	add	r3, r4
 80a2a90:	4293      	cmp	r3, r2
 80a2a92:	d902      	bls.n	80a2a9a <ultoa+0x3a>
            *ptr++ = '0';
 80a2a94:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a2a98:	e7fa      	b.n	80a2a90 <ultoa+0x30>
 80a2a9a:	1b5a      	subs	r2, r3, r5
 80a2a9c:	42ab      	cmp	r3, r5
 80a2a9e:	bf38      	it	cc
 80a2aa0:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a2aa2:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2aa4:	4620      	mov	r0, r4
	*ptr = '\0';
 80a2aa6:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a2aa8:	f7ff ff86 	bl	80a29b8 <_Z11str_reversePc>
	return buffer;
 80a2aac:	4620      	mov	r0, r4
}
 80a2aae:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a2ab0:	2000      	movs	r0, #0
 80a2ab2:	e7fc      	b.n	80a2aae <ultoa+0x4e>

080a2ab4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2ab4:	4b01      	ldr	r3, [pc, #4]	; (80a2abc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2ab6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2ab8:	4770      	bx	lr
 80a2aba:	bf00      	nop
 80a2abc:	2000002c 	.word	0x2000002c

080a2ac0 <serialEventRun>:
{
 80a2ac0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2ac2:	4b13      	ldr	r3, [pc, #76]	; (80a2b10 <serialEventRun+0x50>)
 80a2ac4:	b143      	cbz	r3, 80a2ad8 <serialEventRun+0x18>
 80a2ac6:	f7ff feb9 	bl	80a283c <_Z16_fetch_usbserialv>
 80a2aca:	6803      	ldr	r3, [r0, #0]
 80a2acc:	691b      	ldr	r3, [r3, #16]
 80a2ace:	4798      	blx	r3
 80a2ad0:	2800      	cmp	r0, #0
 80a2ad2:	dd01      	ble.n	80a2ad8 <serialEventRun+0x18>
        serialEvent();
 80a2ad4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2ad8:	4b0e      	ldr	r3, [pc, #56]	; (80a2b14 <serialEventRun+0x54>)
 80a2ada:	b143      	cbz	r3, 80a2aee <serialEventRun+0x2e>
 80a2adc:	f7ff fe18 	bl	80a2710 <_Z22__fetch_global_Serial1v>
 80a2ae0:	6803      	ldr	r3, [r0, #0]
 80a2ae2:	691b      	ldr	r3, [r3, #16]
 80a2ae4:	4798      	blx	r3
 80a2ae6:	2800      	cmp	r0, #0
 80a2ae8:	dd01      	ble.n	80a2aee <serialEventRun+0x2e>
        serialEvent1();
 80a2aea:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2aee:	4b0a      	ldr	r3, [pc, #40]	; (80a2b18 <serialEventRun+0x58>)
 80a2af0:	b10b      	cbz	r3, 80a2af6 <serialEventRun+0x36>
 80a2af2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2af6:	4b09      	ldr	r3, [pc, #36]	; (80a2b1c <serialEventRun+0x5c>)
 80a2af8:	b143      	cbz	r3, 80a2b0c <serialEventRun+0x4c>
 80a2afa:	f7ff fed9 	bl	80a28b0 <_Z17_fetch_usbserial1v>
 80a2afe:	6803      	ldr	r3, [r0, #0]
 80a2b00:	691b      	ldr	r3, [r3, #16]
 80a2b02:	4798      	blx	r3
 80a2b04:	2800      	cmp	r0, #0
 80a2b06:	dd01      	ble.n	80a2b0c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2b08:	f3af 8000 	nop.w
}
 80a2b0c:	bd08      	pop	{r3, pc}
 80a2b0e:	bf00      	nop
	...

080a2b20 <_post_loop>:
{
 80a2b20:	b508      	push	{r3, lr}
	serialEventRun();
 80a2b22:	f7ff ffcd 	bl	80a2ac0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2b26:	f7fe fd39 	bl	80a159c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2b2a:	4b01      	ldr	r3, [pc, #4]	; (80a2b30 <_post_loop+0x10>)
 80a2b2c:	6018      	str	r0, [r3, #0]
}
 80a2b2e:	bd08      	pop	{r3, pc}
 80a2b30:	20000638 	.word	0x20000638

080a2b34 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2b34:	4805      	ldr	r0, [pc, #20]	; (80a2b4c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a2b36:	4a06      	ldr	r2, [pc, #24]	; (80a2b50 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2b38:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2b3a:	1a12      	subs	r2, r2, r0
 80a2b3c:	4905      	ldr	r1, [pc, #20]	; (80a2b54 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2b3e:	f001 fb19 	bl	80a4174 <memcpy>
    __backup_sram_signature = signature;
 80a2b42:	4b05      	ldr	r3, [pc, #20]	; (80a2b58 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2b44:	4a05      	ldr	r2, [pc, #20]	; (80a2b5c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a2b46:	601a      	str	r2, [r3, #0]
}
 80a2b48:	bd08      	pop	{r3, pc}
 80a2b4a:	bf00      	nop
 80a2b4c:	40024000 	.word	0x40024000
 80a2b50:	40024004 	.word	0x40024004
 80a2b54:	080a47b8 	.word	0x080a47b8
 80a2b58:	40024000 	.word	0x40024000
 80a2b5c:	9a271c1e 	.word	0x9a271c1e

080a2b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b60:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2b62:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b64:	461a      	mov	r2, r3
 80a2b66:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b6a:	9300      	str	r3, [sp, #0]
 80a2b6c:	f7fe feb4 	bl	80a18d8 <system_ctrl_set_result>
}
 80a2b70:	b003      	add	sp, #12
 80a2b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2b78 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2b78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2b7a:	8843      	ldrh	r3, [r0, #2]
 80a2b7c:	2b0a      	cmp	r3, #10
 80a2b7e:	d008      	beq.n	80a2b92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2b80:	2b50      	cmp	r3, #80	; 0x50
 80a2b82:	d10b      	bne.n	80a2b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2b84:	4b09      	ldr	r3, [pc, #36]	; (80a2bac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2b86:	681b      	ldr	r3, [r3, #0]
 80a2b88:	b14b      	cbz	r3, 80a2b9e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2b8a:	b003      	add	sp, #12
 80a2b8c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2b90:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2b92:	f7ff ffe5 	bl	80a2b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2b96:	b003      	add	sp, #12
 80a2b98:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b9c:	2300      	movs	r3, #0
 80a2b9e:	461a      	mov	r2, r3
 80a2ba0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ba4:	9300      	str	r3, [sp, #0]
 80a2ba6:	f7fe fe97 	bl	80a18d8 <system_ctrl_set_result>
}
 80a2baa:	e7f4      	b.n	80a2b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2bac:	20000624 	.word	0x20000624

080a2bb0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2bb0:	2100      	movs	r1, #0
{
 80a2bb2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2bb4:	4811      	ldr	r0, [pc, #68]	; (80a2bfc <module_user_init_hook+0x4c>)
 80a2bb6:	f7fe ff31 	bl	80a1a1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2bba:	4b11      	ldr	r3, [pc, #68]	; (80a2c00 <module_user_init_hook+0x50>)
 80a2bbc:	681a      	ldr	r2, [r3, #0]
 80a2bbe:	4b11      	ldr	r3, [pc, #68]	; (80a2c04 <module_user_init_hook+0x54>)
 80a2bc0:	429a      	cmp	r2, r3
 80a2bc2:	bf0c      	ite	eq
 80a2bc4:	2201      	moveq	r2, #1
 80a2bc6:	2200      	movne	r2, #0
 80a2bc8:	4b0f      	ldr	r3, [pc, #60]	; (80a2c08 <module_user_init_hook+0x58>)
 80a2bca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2bcc:	d001      	beq.n	80a2bd2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2bce:	f7ff ffb1 	bl	80a2b34 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2bd2:	f7fe fcdb 	bl	80a158c <HAL_RNG_GetRandomNumber>
 80a2bd6:	4604      	mov	r4, r0
    srand(seed);
 80a2bd8:	f001 fae2 	bl	80a41a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2bdc:	4b0b      	ldr	r3, [pc, #44]	; (80a2c0c <module_user_init_hook+0x5c>)
 80a2bde:	b113      	cbz	r3, 80a2be6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2be0:	4620      	mov	r0, r4
 80a2be2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2be6:	2100      	movs	r1, #0
 80a2be8:	4808      	ldr	r0, [pc, #32]	; (80a2c0c <module_user_init_hook+0x5c>)
 80a2bea:	f7fe fe97 	bl	80a191c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2bf2:	2100      	movs	r1, #0
 80a2bf4:	4806      	ldr	r0, [pc, #24]	; (80a2c10 <module_user_init_hook+0x60>)
 80a2bf6:	f7fe be65 	b.w	80a18c4 <system_ctrl_set_app_request_handler>
 80a2bfa:	bf00      	nop
 80a2bfc:	080a2ab5 	.word	0x080a2ab5
 80a2c00:	40024000 	.word	0x40024000
 80a2c04:	9a271c1e 	.word	0x9a271c1e
 80a2c08:	20000620 	.word	0x20000620
 80a2c0c:	00000000 	.word	0x00000000
 80a2c10:	080a2b79 	.word	0x080a2b79

080a2c14 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2c14:	4b02      	ldr	r3, [pc, #8]	; (80a2c20 <__tcf_0+0xc>)
 80a2c16:	6898      	ldr	r0, [r3, #8]
 80a2c18:	b108      	cbz	r0, 80a2c1e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2c1a:	f7fe bcaf 	b.w	80a157c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2c1e:	4770      	bx	lr
 80a2c20:	2000062c 	.word	0x2000062c

080a2c24 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2c24:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2c26:	b570      	push	{r4, r5, r6, lr}
 80a2c28:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2c2a:	d901      	bls.n	80a2c30 <pinAvailable+0xc>
    return false;
 80a2c2c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2c2e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2c30:	f1a0 030d 	sub.w	r3, r0, #13
 80a2c34:	2b02      	cmp	r3, #2
 80a2c36:	d90b      	bls.n	80a2c50 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2c38:	2801      	cmp	r0, #1
 80a2c3a:	d824      	bhi.n	80a2c86 <pinAvailable+0x62>
 80a2c3c:	f000 f878 	bl	80a2d30 <_Z19__fetch_global_Wirev>
 80a2c40:	2100      	movs	r1, #0
 80a2c42:	7c00      	ldrb	r0, [r0, #16]
 80a2c44:	f7fe fd1a 	bl	80a167c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2c48:	f080 0001 	eor.w	r0, r0, #1
 80a2c4c:	b2c0      	uxtb	r0, r0
 80a2c4e:	e7ee      	b.n	80a2c2e <pinAvailable+0xa>
 80a2c50:	4e12      	ldr	r6, [pc, #72]	; (80a2c9c <pinAvailable+0x78>)
 80a2c52:	7831      	ldrb	r1, [r6, #0]
 80a2c54:	f3bf 8f5b 	dmb	ish
 80a2c58:	f011 0501 	ands.w	r5, r1, #1
 80a2c5c:	d10d      	bne.n	80a2c7a <pinAvailable+0x56>
 80a2c5e:	4630      	mov	r0, r6
 80a2c60:	f7fd fa23 	bl	80a00aa <__cxa_guard_acquire>
 80a2c64:	b148      	cbz	r0, 80a2c7a <pinAvailable+0x56>
 80a2c66:	4629      	mov	r1, r5
 80a2c68:	480d      	ldr	r0, [pc, #52]	; (80a2ca0 <pinAvailable+0x7c>)
 80a2c6a:	f7ff f8bf 	bl	80a1dec <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2c6e:	4630      	mov	r0, r6
 80a2c70:	f7fd fa20 	bl	80a00b4 <__cxa_guard_release>
 80a2c74:	480b      	ldr	r0, [pc, #44]	; (80a2ca4 <pinAvailable+0x80>)
 80a2c76:	f001 fa63 	bl	80a4140 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2c7a:	4b09      	ldr	r3, [pc, #36]	; (80a2ca0 <pinAvailable+0x7c>)
 80a2c7c:	7818      	ldrb	r0, [r3, #0]
 80a2c7e:	f7fe fd61 	bl	80a1744 <hal_spi_is_enabled>
 80a2c82:	2800      	cmp	r0, #0
 80a2c84:	d1d2      	bne.n	80a2c2c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2c86:	3c12      	subs	r4, #18
 80a2c88:	2c01      	cmp	r4, #1
 80a2c8a:	d805      	bhi.n	80a2c98 <pinAvailable+0x74>
 80a2c8c:	f7ff fd40 	bl	80a2710 <_Z22__fetch_global_Serial1v>
 80a2c90:	7c00      	ldrb	r0, [r0, #16]
 80a2c92:	f7fe fd8f 	bl	80a17b4 <hal_usart_is_enabled>
 80a2c96:	e7d7      	b.n	80a2c48 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2c98:	2001      	movs	r0, #1
 80a2c9a:	e7c8      	b.n	80a2c2e <pinAvailable+0xa>
 80a2c9c:	20000628 	.word	0x20000628
 80a2ca0:	2000062c 	.word	0x2000062c
 80a2ca4:	080a2c15 	.word	0x080a2c15

080a2ca8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ca8:	2817      	cmp	r0, #23
{
 80a2caa:	b538      	push	{r3, r4, r5, lr}
 80a2cac:	4604      	mov	r4, r0
 80a2cae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cb0:	d80a      	bhi.n	80a2cc8 <pinMode+0x20>
 80a2cb2:	29ff      	cmp	r1, #255	; 0xff
 80a2cb4:	d008      	beq.n	80a2cc8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2cb6:	f7ff ffb5 	bl	80a2c24 <pinAvailable>
 80a2cba:	b128      	cbz	r0, 80a2cc8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2cbc:	4629      	mov	r1, r5
 80a2cbe:	4620      	mov	r0, r4
}
 80a2cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2cc4:	f7fe bc82 	b.w	80a15cc <HAL_Pin_Mode>
}
 80a2cc8:	bd38      	pop	{r3, r4, r5, pc}

080a2cca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2cca:	b538      	push	{r3, r4, r5, lr}
 80a2ccc:	4604      	mov	r4, r0
 80a2cce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2cd0:	f7fe fc84 	bl	80a15dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2cd4:	28ff      	cmp	r0, #255	; 0xff
 80a2cd6:	d010      	beq.n	80a2cfa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2cd8:	2806      	cmp	r0, #6
 80a2cda:	d804      	bhi.n	80a2ce6 <digitalWrite+0x1c>
 80a2cdc:	234d      	movs	r3, #77	; 0x4d
 80a2cde:	fa23 f000 	lsr.w	r0, r3, r0
 80a2ce2:	07c3      	lsls	r3, r0, #31
 80a2ce4:	d409      	bmi.n	80a2cfa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2ce6:	4620      	mov	r0, r4
 80a2ce8:	f7ff ff9c 	bl	80a2c24 <pinAvailable>
 80a2cec:	b128      	cbz	r0, 80a2cfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2cee:	4629      	mov	r1, r5
 80a2cf0:	4620      	mov	r0, r4
}
 80a2cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2cf6:	f7fe bc79 	b.w	80a15ec <HAL_GPIO_Write>
}
 80a2cfa:	bd38      	pop	{r3, r4, r5, pc}

080a2cfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2cfc:	4770      	bx	lr
	...

080a2d00 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2d00:	2300      	movs	r3, #0
{
 80a2d02:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2d04:	2520      	movs	r5, #32
 80a2d06:	8043      	strh	r3, [r0, #2]
 80a2d08:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d0a:	4e08      	ldr	r6, [pc, #32]	; (80a2d2c <_Z17acquireWireBufferv+0x2c>)
{
 80a2d0c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2d0e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d10:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2d12:	6085      	str	r5, [r0, #8]
 80a2d14:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d16:	4628      	mov	r0, r5
 80a2d18:	f000 f83e 	bl	80a2d98 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d1c:	4631      	mov	r1, r6
	};
 80a2d1e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d20:	4628      	mov	r0, r5
 80a2d22:	f000 f839 	bl	80a2d98 <_ZnajRKSt9nothrow_t>
	};
 80a2d26:	60e0      	str	r0, [r4, #12]
}
 80a2d28:	4620      	mov	r0, r4
 80a2d2a:	bd70      	pop	{r4, r5, r6, pc}
 80a2d2c:	080a4698 	.word	0x080a4698

080a2d30 <_Z19__fetch_global_Wirev>:
{
 80a2d30:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2d32:	4d0e      	ldr	r5, [pc, #56]	; (80a2d6c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2d34:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2d36:	7829      	ldrb	r1, [r5, #0]
 80a2d38:	f3bf 8f5b 	dmb	ish
 80a2d3c:	f011 0401 	ands.w	r4, r1, #1
 80a2d40:	d111      	bne.n	80a2d66 <_Z19__fetch_global_Wirev+0x36>
 80a2d42:	4628      	mov	r0, r5
 80a2d44:	f7fd f9b1 	bl	80a00aa <__cxa_guard_acquire>
 80a2d48:	b168      	cbz	r0, 80a2d66 <_Z19__fetch_global_Wirev+0x36>
 80a2d4a:	a801      	add	r0, sp, #4
 80a2d4c:	f7ff ffd8 	bl	80a2d00 <_Z17acquireWireBufferv>
 80a2d50:	4621      	mov	r1, r4
 80a2d52:	aa01      	add	r2, sp, #4
 80a2d54:	4806      	ldr	r0, [pc, #24]	; (80a2d70 <_Z19__fetch_global_Wirev+0x40>)
 80a2d56:	f7fe fe99 	bl	80a1a8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2d5a:	4628      	mov	r0, r5
 80a2d5c:	f7fd f9aa 	bl	80a00b4 <__cxa_guard_release>
 80a2d60:	4804      	ldr	r0, [pc, #16]	; (80a2d74 <_Z19__fetch_global_Wirev+0x44>)
 80a2d62:	f001 f9ed 	bl	80a4140 <atexit>
	return wire;
}
 80a2d66:	4802      	ldr	r0, [pc, #8]	; (80a2d70 <_Z19__fetch_global_Wirev+0x40>)
 80a2d68:	b007      	add	sp, #28
 80a2d6a:	bd30      	pop	{r4, r5, pc}
 80a2d6c:	2000063c 	.word	0x2000063c
 80a2d70:	20000640 	.word	0x20000640
 80a2d74:	080a2cfd 	.word	0x080a2cfd

080a2d78 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2d78:	2300      	movs	r3, #0
 80a2d7a:	b507      	push	{r0, r1, r2, lr}
 80a2d7c:	461a      	mov	r2, r3
 80a2d7e:	4619      	mov	r1, r3
 80a2d80:	9300      	str	r3, [sp, #0]
 80a2d82:	4803      	ldr	r0, [pc, #12]	; (80a2d90 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2d84:	f7fe ff2c 	bl	80a1be0 <_ZN9IPAddressC1Ehhhh>
 80a2d88:	b003      	add	sp, #12
 80a2d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2d8e:	bf00      	nop
 80a2d90:	20000654 	.word	0x20000654

080a2d94 <_ZdlPvj>:
 80a2d94:	f7fd b985 	b.w	80a00a2 <_ZdlPv>

080a2d98 <_ZnajRKSt9nothrow_t>:
 80a2d98:	f7fd b981 	b.w	80a009e <_Znaj>

080a2d9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a2d9c:	4901      	ldr	r1, [pc, #4]	; (80a2da4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a2d9e:	f000 b8fb 	b.w	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2da2:	bf00      	nop
 80a2da4:	080a46b4 	.word	0x080a46b4

080a2da8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a2da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2daa:	2400      	movs	r4, #0
 80a2dac:	2310      	movs	r3, #16
 80a2dae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a2db2:	6803      	ldr	r3, [r0, #0]
 80a2db4:	4615      	mov	r5, r2
 80a2db6:	699e      	ldr	r6, [r3, #24]
 80a2db8:	6812      	ldr	r2, [r2, #0]
 80a2dba:	466b      	mov	r3, sp
 80a2dbc:	9400      	str	r4, [sp, #0]
 80a2dbe:	f88d 4004 	strb.w	r4, [sp, #4]
 80a2dc2:	47b0      	blx	r6
 80a2dc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a2dc8:	f003 0306 	and.w	r3, r3, #6
 80a2dcc:	2b06      	cmp	r3, #6
 80a2dce:	bf09      	itett	eq
 80a2dd0:	2001      	moveq	r0, #1
 80a2dd2:	4620      	movne	r0, r4
 80a2dd4:	9b00      	ldreq	r3, [sp, #0]
 80a2dd6:	602b      	streq	r3, [r5, #0]
 80a2dd8:	b004      	add	sp, #16
 80a2dda:	bd70      	pop	{r4, r5, r6, pc}

080a2ddc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a2ddc:	9800      	ldr	r0, [sp, #0]
 80a2dde:	4290      	cmp	r0, r2
 80a2de0:	bf14      	ite	ne
 80a2de2:	2001      	movne	r0, #1
 80a2de4:	2006      	moveq	r0, #6
 80a2de6:	4770      	bx	lr

080a2de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a2de8:	b510      	push	{r4, lr}
 80a2dea:	4604      	mov	r4, r0
 80a2dec:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a2dee:	6003      	str	r3, [r0, #0]
 80a2df0:	f000 f8cf 	bl	80a2f92 <_ZNSt9type_infoD1Ev>
 80a2df4:	4620      	mov	r0, r4
 80a2df6:	bd10      	pop	{r4, pc}
 80a2df8:	080a46f4 	.word	0x080a46f4

080a2dfc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a2dfc:	b510      	push	{r4, lr}
 80a2dfe:	4604      	mov	r4, r0
 80a2e00:	f7ff fff2 	bl	80a2de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a2e04:	4620      	mov	r0, r4
 80a2e06:	2108      	movs	r1, #8
 80a2e08:	f7ff ffc4 	bl	80a2d94 <_ZdlPvj>
 80a2e0c:	4620      	mov	r0, r4
 80a2e0e:	bd10      	pop	{r4, pc}

080a2e10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a2e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e14:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2e18:	461f      	mov	r7, r3
 80a2e1a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a2e1e:	4598      	cmp	r8, r3
 80a2e20:	4606      	mov	r6, r0
 80a2e22:	4615      	mov	r5, r2
 80a2e24:	d107      	bne.n	80a2e36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a2e26:	9907      	ldr	r1, [sp, #28]
 80a2e28:	f000 f8b6 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2e2c:	b118      	cbz	r0, 80a2e36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a2e2e:	7165      	strb	r5, [r4, #5]
 80a2e30:	2000      	movs	r0, #0
 80a2e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2e36:	4639      	mov	r1, r7
 80a2e38:	4630      	mov	r0, r6
 80a2e3a:	f000 f8ad 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2e3e:	2800      	cmp	r0, #0
 80a2e40:	d0f6      	beq.n	80a2e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a2e42:	2301      	movs	r3, #1
 80a2e44:	f8c4 8000 	str.w	r8, [r4]
 80a2e48:	7125      	strb	r5, [r4, #4]
 80a2e4a:	71a3      	strb	r3, [r4, #6]
 80a2e4c:	e7f0      	b.n	80a2e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a2e4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a2e4e:	b538      	push	{r3, r4, r5, lr}
 80a2e50:	4615      	mov	r5, r2
 80a2e52:	461c      	mov	r4, r3
 80a2e54:	f000 f8a0 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2e58:	b120      	cbz	r0, 80a2e64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a2e5a:	2308      	movs	r3, #8
 80a2e5c:	60e3      	str	r3, [r4, #12]
 80a2e5e:	2306      	movs	r3, #6
 80a2e60:	6025      	str	r5, [r4, #0]
 80a2e62:	7123      	strb	r3, [r4, #4]
 80a2e64:	bd38      	pop	{r3, r4, r5, pc}

080a2e66 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a2e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e6a:	4605      	mov	r5, r0
 80a2e6c:	460c      	mov	r4, r1
 80a2e6e:	4616      	mov	r6, r2
 80a2e70:	461f      	mov	r7, r3
 80a2e72:	f000 f891 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2e76:	b948      	cbnz	r0, 80a2e8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a2e78:	2f03      	cmp	r7, #3
 80a2e7a:	d807      	bhi.n	80a2e8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a2e7c:	6823      	ldr	r3, [r4, #0]
 80a2e7e:	4632      	mov	r2, r6
 80a2e80:	4629      	mov	r1, r5
 80a2e82:	4620      	mov	r0, r4
 80a2e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e88:	695b      	ldr	r3, [r3, #20]
 80a2e8a:	4718      	bx	r3
 80a2e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2e90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a2e90:	b510      	push	{r4, lr}
 80a2e92:	4604      	mov	r4, r0
 80a2e94:	4b02      	ldr	r3, [pc, #8]	; (80a2ea0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a2e96:	6003      	str	r3, [r0, #0]
 80a2e98:	f7ff ffa6 	bl	80a2de8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a2e9c:	4620      	mov	r0, r4
 80a2e9e:	bd10      	pop	{r4, pc}
 80a2ea0:	080a4754 	.word	0x080a4754

080a2ea4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a2ea4:	b510      	push	{r4, lr}
 80a2ea6:	4604      	mov	r4, r0
 80a2ea8:	f7ff fff2 	bl	80a2e90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a2eac:	4620      	mov	r0, r4
 80a2eae:	210c      	movs	r1, #12
 80a2eb0:	f7ff ff70 	bl	80a2d94 <_ZdlPvj>
 80a2eb4:	4620      	mov	r0, r4
 80a2eb6:	bd10      	pop	{r4, pc}

080a2eb8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a2eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ebc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2ec0:	4606      	mov	r6, r0
 80a2ec2:	4590      	cmp	r8, r2
 80a2ec4:	460f      	mov	r7, r1
 80a2ec6:	4615      	mov	r5, r2
 80a2ec8:	461c      	mov	r4, r3
 80a2eca:	d00b      	beq.n	80a2ee4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a2ecc:	68b0      	ldr	r0, [r6, #8]
 80a2ece:	462a      	mov	r2, r5
 80a2ed0:	6803      	ldr	r3, [r0, #0]
 80a2ed2:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2ed6:	6a1e      	ldr	r6, [r3, #32]
 80a2ed8:	4639      	mov	r1, r7
 80a2eda:	4623      	mov	r3, r4
 80a2edc:	46b4      	mov	ip, r6
 80a2ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ee2:	4760      	bx	ip
 80a2ee4:	4619      	mov	r1, r3
 80a2ee6:	f000 f857 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2eea:	2800      	cmp	r0, #0
 80a2eec:	d0ee      	beq.n	80a2ecc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a2eee:	2006      	movs	r0, #6
 80a2ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a2ef4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2ef8:	460d      	mov	r5, r1
 80a2efa:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a2efe:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a2f02:	4619      	mov	r1, r3
 80a2f04:	4681      	mov	r9, r0
 80a2f06:	4617      	mov	r7, r2
 80a2f08:	4698      	mov	r8, r3
 80a2f0a:	f000 f845 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2f0e:	b190      	cbz	r0, 80a2f36 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a2f10:	2d00      	cmp	r5, #0
 80a2f12:	6034      	str	r4, [r6, #0]
 80a2f14:	7137      	strb	r7, [r6, #4]
 80a2f16:	db09      	blt.n	80a2f2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a2f18:	442c      	add	r4, r5
 80a2f1a:	45a2      	cmp	sl, r4
 80a2f1c:	bf0c      	ite	eq
 80a2f1e:	2406      	moveq	r4, #6
 80a2f20:	2401      	movne	r4, #1
 80a2f22:	71b4      	strb	r4, [r6, #6]
 80a2f24:	2000      	movs	r0, #0
 80a2f26:	b001      	add	sp, #4
 80a2f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f2c:	3502      	adds	r5, #2
 80a2f2e:	d1f9      	bne.n	80a2f24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2f30:	2301      	movs	r3, #1
 80a2f32:	71b3      	strb	r3, [r6, #6]
 80a2f34:	e7f6      	b.n	80a2f24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2f36:	4554      	cmp	r4, sl
 80a2f38:	d106      	bne.n	80a2f48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2f3a:	4659      	mov	r1, fp
 80a2f3c:	4648      	mov	r0, r9
 80a2f3e:	f000 f82b 	bl	80a2f98 <_ZNKSt9type_infoeqERKS_>
 80a2f42:	b108      	cbz	r0, 80a2f48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2f44:	7177      	strb	r7, [r6, #5]
 80a2f46:	e7ed      	b.n	80a2f24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2f48:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a2f4c:	463a      	mov	r2, r7
 80a2f4e:	6803      	ldr	r3, [r0, #0]
 80a2f50:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a2f54:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a2f58:	69dc      	ldr	r4, [r3, #28]
 80a2f5a:	4629      	mov	r1, r5
 80a2f5c:	4643      	mov	r3, r8
 80a2f5e:	46a4      	mov	ip, r4
 80a2f60:	b001      	add	sp, #4
 80a2f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f66:	4760      	bx	ip

080a2f68 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a2f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f6c:	4607      	mov	r7, r0
 80a2f6e:	460c      	mov	r4, r1
 80a2f70:	4615      	mov	r5, r2
 80a2f72:	461e      	mov	r6, r3
 80a2f74:	f7ff ff6b 	bl	80a2e4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a2f78:	b948      	cbnz	r0, 80a2f8e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a2f7a:	68b8      	ldr	r0, [r7, #8]
 80a2f7c:	462a      	mov	r2, r5
 80a2f7e:	6803      	ldr	r3, [r0, #0]
 80a2f80:	4621      	mov	r1, r4
 80a2f82:	699f      	ldr	r7, [r3, #24]
 80a2f84:	4633      	mov	r3, r6
 80a2f86:	46bc      	mov	ip, r7
 80a2f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f8c:	4760      	bx	ip
 80a2f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2f92 <_ZNSt9type_infoD1Ev>:
 80a2f92:	4770      	bx	lr

080a2f94 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a2f94:	2000      	movs	r0, #0
 80a2f96:	4770      	bx	lr

080a2f98 <_ZNKSt9type_infoeqERKS_>:
 80a2f98:	4281      	cmp	r1, r0
 80a2f9a:	b508      	push	{r3, lr}
 80a2f9c:	d00e      	beq.n	80a2fbc <_ZNKSt9type_infoeqERKS_+0x24>
 80a2f9e:	6840      	ldr	r0, [r0, #4]
 80a2fa0:	7803      	ldrb	r3, [r0, #0]
 80a2fa2:	2b2a      	cmp	r3, #42	; 0x2a
 80a2fa4:	d00c      	beq.n	80a2fc0 <_ZNKSt9type_infoeqERKS_+0x28>
 80a2fa6:	6849      	ldr	r1, [r1, #4]
 80a2fa8:	780b      	ldrb	r3, [r1, #0]
 80a2faa:	2b2a      	cmp	r3, #42	; 0x2a
 80a2fac:	bf08      	it	eq
 80a2fae:	3101      	addeq	r1, #1
 80a2fb0:	f001 f91a 	bl	80a41e8 <strcmp>
 80a2fb4:	fab0 f080 	clz	r0, r0
 80a2fb8:	0940      	lsrs	r0, r0, #5
 80a2fba:	bd08      	pop	{r3, pc}
 80a2fbc:	2001      	movs	r0, #1
 80a2fbe:	e7fc      	b.n	80a2fba <_ZNKSt9type_infoeqERKS_+0x22>
 80a2fc0:	2000      	movs	r0, #0
 80a2fc2:	e7fa      	b.n	80a2fba <_ZNKSt9type_infoeqERKS_+0x22>

080a2fc4 <__aeabi_drsub>:
 80a2fc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2fc8:	e002      	b.n	80a2fd0 <__adddf3>
 80a2fca:	bf00      	nop

080a2fcc <__aeabi_dsub>:
 80a2fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2fd0 <__adddf3>:
 80a2fd0:	b530      	push	{r4, r5, lr}
 80a2fd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2fd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2fda:	ea94 0f05 	teq	r4, r5
 80a2fde:	bf08      	it	eq
 80a2fe0:	ea90 0f02 	teqeq	r0, r2
 80a2fe4:	bf1f      	itttt	ne
 80a2fe6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2fea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2fee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2ff2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ff6:	f000 80e2 	beq.w	80a31be <__adddf3+0x1ee>
 80a2ffa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2ffe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3002:	bfb8      	it	lt
 80a3004:	426d      	neglt	r5, r5
 80a3006:	dd0c      	ble.n	80a3022 <__adddf3+0x52>
 80a3008:	442c      	add	r4, r5
 80a300a:	ea80 0202 	eor.w	r2, r0, r2
 80a300e:	ea81 0303 	eor.w	r3, r1, r3
 80a3012:	ea82 0000 	eor.w	r0, r2, r0
 80a3016:	ea83 0101 	eor.w	r1, r3, r1
 80a301a:	ea80 0202 	eor.w	r2, r0, r2
 80a301e:	ea81 0303 	eor.w	r3, r1, r3
 80a3022:	2d36      	cmp	r5, #54	; 0x36
 80a3024:	bf88      	it	hi
 80a3026:	bd30      	pophi	{r4, r5, pc}
 80a3028:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a302c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3030:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3034:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3038:	d002      	beq.n	80a3040 <__adddf3+0x70>
 80a303a:	4240      	negs	r0, r0
 80a303c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3040:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3044:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3048:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a304c:	d002      	beq.n	80a3054 <__adddf3+0x84>
 80a304e:	4252      	negs	r2, r2
 80a3050:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3054:	ea94 0f05 	teq	r4, r5
 80a3058:	f000 80a7 	beq.w	80a31aa <__adddf3+0x1da>
 80a305c:	f1a4 0401 	sub.w	r4, r4, #1
 80a3060:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3064:	db0d      	blt.n	80a3082 <__adddf3+0xb2>
 80a3066:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a306a:	fa22 f205 	lsr.w	r2, r2, r5
 80a306e:	1880      	adds	r0, r0, r2
 80a3070:	f141 0100 	adc.w	r1, r1, #0
 80a3074:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3078:	1880      	adds	r0, r0, r2
 80a307a:	fa43 f305 	asr.w	r3, r3, r5
 80a307e:	4159      	adcs	r1, r3
 80a3080:	e00e      	b.n	80a30a0 <__adddf3+0xd0>
 80a3082:	f1a5 0520 	sub.w	r5, r5, #32
 80a3086:	f10e 0e20 	add.w	lr, lr, #32
 80a308a:	2a01      	cmp	r2, #1
 80a308c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3090:	bf28      	it	cs
 80a3092:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3096:	fa43 f305 	asr.w	r3, r3, r5
 80a309a:	18c0      	adds	r0, r0, r3
 80a309c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a30a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a30a4:	d507      	bpl.n	80a30b6 <__adddf3+0xe6>
 80a30a6:	f04f 0e00 	mov.w	lr, #0
 80a30aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a30ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a30b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a30b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a30ba:	d31b      	bcc.n	80a30f4 <__adddf3+0x124>
 80a30bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a30c0:	d30c      	bcc.n	80a30dc <__adddf3+0x10c>
 80a30c2:	0849      	lsrs	r1, r1, #1
 80a30c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a30c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a30cc:	f104 0401 	add.w	r4, r4, #1
 80a30d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a30d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a30d8:	f080 809a 	bcs.w	80a3210 <__adddf3+0x240>
 80a30dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a30e0:	bf08      	it	eq
 80a30e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a30e6:	f150 0000 	adcs.w	r0, r0, #0
 80a30ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a30ee:	ea41 0105 	orr.w	r1, r1, r5
 80a30f2:	bd30      	pop	{r4, r5, pc}
 80a30f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a30f8:	4140      	adcs	r0, r0
 80a30fa:	eb41 0101 	adc.w	r1, r1, r1
 80a30fe:	3c01      	subs	r4, #1
 80a3100:	bf28      	it	cs
 80a3102:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3106:	d2e9      	bcs.n	80a30dc <__adddf3+0x10c>
 80a3108:	f091 0f00 	teq	r1, #0
 80a310c:	bf04      	itt	eq
 80a310e:	4601      	moveq	r1, r0
 80a3110:	2000      	moveq	r0, #0
 80a3112:	fab1 f381 	clz	r3, r1
 80a3116:	bf08      	it	eq
 80a3118:	3320      	addeq	r3, #32
 80a311a:	f1a3 030b 	sub.w	r3, r3, #11
 80a311e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3122:	da0c      	bge.n	80a313e <__adddf3+0x16e>
 80a3124:	320c      	adds	r2, #12
 80a3126:	dd08      	ble.n	80a313a <__adddf3+0x16a>
 80a3128:	f102 0c14 	add.w	ip, r2, #20
 80a312c:	f1c2 020c 	rsb	r2, r2, #12
 80a3130:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3134:	fa21 f102 	lsr.w	r1, r1, r2
 80a3138:	e00c      	b.n	80a3154 <__adddf3+0x184>
 80a313a:	f102 0214 	add.w	r2, r2, #20
 80a313e:	bfd8      	it	le
 80a3140:	f1c2 0c20 	rsble	ip, r2, #32
 80a3144:	fa01 f102 	lsl.w	r1, r1, r2
 80a3148:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a314c:	bfdc      	itt	le
 80a314e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3152:	4090      	lslle	r0, r2
 80a3154:	1ae4      	subs	r4, r4, r3
 80a3156:	bfa2      	ittt	ge
 80a3158:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a315c:	4329      	orrge	r1, r5
 80a315e:	bd30      	popge	{r4, r5, pc}
 80a3160:	ea6f 0404 	mvn.w	r4, r4
 80a3164:	3c1f      	subs	r4, #31
 80a3166:	da1c      	bge.n	80a31a2 <__adddf3+0x1d2>
 80a3168:	340c      	adds	r4, #12
 80a316a:	dc0e      	bgt.n	80a318a <__adddf3+0x1ba>
 80a316c:	f104 0414 	add.w	r4, r4, #20
 80a3170:	f1c4 0220 	rsb	r2, r4, #32
 80a3174:	fa20 f004 	lsr.w	r0, r0, r4
 80a3178:	fa01 f302 	lsl.w	r3, r1, r2
 80a317c:	ea40 0003 	orr.w	r0, r0, r3
 80a3180:	fa21 f304 	lsr.w	r3, r1, r4
 80a3184:	ea45 0103 	orr.w	r1, r5, r3
 80a3188:	bd30      	pop	{r4, r5, pc}
 80a318a:	f1c4 040c 	rsb	r4, r4, #12
 80a318e:	f1c4 0220 	rsb	r2, r4, #32
 80a3192:	fa20 f002 	lsr.w	r0, r0, r2
 80a3196:	fa01 f304 	lsl.w	r3, r1, r4
 80a319a:	ea40 0003 	orr.w	r0, r0, r3
 80a319e:	4629      	mov	r1, r5
 80a31a0:	bd30      	pop	{r4, r5, pc}
 80a31a2:	fa21 f004 	lsr.w	r0, r1, r4
 80a31a6:	4629      	mov	r1, r5
 80a31a8:	bd30      	pop	{r4, r5, pc}
 80a31aa:	f094 0f00 	teq	r4, #0
 80a31ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a31b2:	bf06      	itte	eq
 80a31b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a31b8:	3401      	addeq	r4, #1
 80a31ba:	3d01      	subne	r5, #1
 80a31bc:	e74e      	b.n	80a305c <__adddf3+0x8c>
 80a31be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a31c2:	bf18      	it	ne
 80a31c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a31c8:	d029      	beq.n	80a321e <__adddf3+0x24e>
 80a31ca:	ea94 0f05 	teq	r4, r5
 80a31ce:	bf08      	it	eq
 80a31d0:	ea90 0f02 	teqeq	r0, r2
 80a31d4:	d005      	beq.n	80a31e2 <__adddf3+0x212>
 80a31d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a31da:	bf04      	itt	eq
 80a31dc:	4619      	moveq	r1, r3
 80a31de:	4610      	moveq	r0, r2
 80a31e0:	bd30      	pop	{r4, r5, pc}
 80a31e2:	ea91 0f03 	teq	r1, r3
 80a31e6:	bf1e      	ittt	ne
 80a31e8:	2100      	movne	r1, #0
 80a31ea:	2000      	movne	r0, #0
 80a31ec:	bd30      	popne	{r4, r5, pc}
 80a31ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a31f2:	d105      	bne.n	80a3200 <__adddf3+0x230>
 80a31f4:	0040      	lsls	r0, r0, #1
 80a31f6:	4149      	adcs	r1, r1
 80a31f8:	bf28      	it	cs
 80a31fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a31fe:	bd30      	pop	{r4, r5, pc}
 80a3200:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3204:	bf3c      	itt	cc
 80a3206:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a320a:	bd30      	popcc	{r4, r5, pc}
 80a320c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3210:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3218:	f04f 0000 	mov.w	r0, #0
 80a321c:	bd30      	pop	{r4, r5, pc}
 80a321e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3222:	bf1a      	itte	ne
 80a3224:	4619      	movne	r1, r3
 80a3226:	4610      	movne	r0, r2
 80a3228:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a322c:	bf1c      	itt	ne
 80a322e:	460b      	movne	r3, r1
 80a3230:	4602      	movne	r2, r0
 80a3232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3236:	bf06      	itte	eq
 80a3238:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a323c:	ea91 0f03 	teqeq	r1, r3
 80a3240:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3244:	bd30      	pop	{r4, r5, pc}
 80a3246:	bf00      	nop

080a3248 <__aeabi_ui2d>:
 80a3248:	f090 0f00 	teq	r0, #0
 80a324c:	bf04      	itt	eq
 80a324e:	2100      	moveq	r1, #0
 80a3250:	4770      	bxeq	lr
 80a3252:	b530      	push	{r4, r5, lr}
 80a3254:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3258:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a325c:	f04f 0500 	mov.w	r5, #0
 80a3260:	f04f 0100 	mov.w	r1, #0
 80a3264:	e750      	b.n	80a3108 <__adddf3+0x138>
 80a3266:	bf00      	nop

080a3268 <__aeabi_i2d>:
 80a3268:	f090 0f00 	teq	r0, #0
 80a326c:	bf04      	itt	eq
 80a326e:	2100      	moveq	r1, #0
 80a3270:	4770      	bxeq	lr
 80a3272:	b530      	push	{r4, r5, lr}
 80a3274:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3278:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a327c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3280:	bf48      	it	mi
 80a3282:	4240      	negmi	r0, r0
 80a3284:	f04f 0100 	mov.w	r1, #0
 80a3288:	e73e      	b.n	80a3108 <__adddf3+0x138>
 80a328a:	bf00      	nop

080a328c <__aeabi_f2d>:
 80a328c:	0042      	lsls	r2, r0, #1
 80a328e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3292:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3296:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a329a:	bf1f      	itttt	ne
 80a329c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a32a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a32a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a32a8:	4770      	bxne	lr
 80a32aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a32ae:	bf08      	it	eq
 80a32b0:	4770      	bxeq	lr
 80a32b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a32b6:	bf04      	itt	eq
 80a32b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a32bc:	4770      	bxeq	lr
 80a32be:	b530      	push	{r4, r5, lr}
 80a32c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a32c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a32c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a32cc:	e71c      	b.n	80a3108 <__adddf3+0x138>
 80a32ce:	bf00      	nop

080a32d0 <__aeabi_ul2d>:
 80a32d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a32d4:	bf08      	it	eq
 80a32d6:	4770      	bxeq	lr
 80a32d8:	b530      	push	{r4, r5, lr}
 80a32da:	f04f 0500 	mov.w	r5, #0
 80a32de:	e00a      	b.n	80a32f6 <__aeabi_l2d+0x16>

080a32e0 <__aeabi_l2d>:
 80a32e0:	ea50 0201 	orrs.w	r2, r0, r1
 80a32e4:	bf08      	it	eq
 80a32e6:	4770      	bxeq	lr
 80a32e8:	b530      	push	{r4, r5, lr}
 80a32ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a32ee:	d502      	bpl.n	80a32f6 <__aeabi_l2d+0x16>
 80a32f0:	4240      	negs	r0, r0
 80a32f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a32f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a32fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a32fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3302:	f43f aed8 	beq.w	80a30b6 <__adddf3+0xe6>
 80a3306:	f04f 0203 	mov.w	r2, #3
 80a330a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a330e:	bf18      	it	ne
 80a3310:	3203      	addne	r2, #3
 80a3312:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3316:	bf18      	it	ne
 80a3318:	3203      	addne	r2, #3
 80a331a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a331e:	f1c2 0320 	rsb	r3, r2, #32
 80a3322:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3326:	fa20 f002 	lsr.w	r0, r0, r2
 80a332a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a332e:	ea40 000e 	orr.w	r0, r0, lr
 80a3332:	fa21 f102 	lsr.w	r1, r1, r2
 80a3336:	4414      	add	r4, r2
 80a3338:	e6bd      	b.n	80a30b6 <__adddf3+0xe6>
 80a333a:	bf00      	nop

080a333c <__aeabi_dmul>:
 80a333c:	b570      	push	{r4, r5, r6, lr}
 80a333e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3342:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3346:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a334a:	bf1d      	ittte	ne
 80a334c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3350:	ea94 0f0c 	teqne	r4, ip
 80a3354:	ea95 0f0c 	teqne	r5, ip
 80a3358:	f000 f8de 	bleq	80a3518 <__aeabi_dmul+0x1dc>
 80a335c:	442c      	add	r4, r5
 80a335e:	ea81 0603 	eor.w	r6, r1, r3
 80a3362:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3366:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a336a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a336e:	bf18      	it	ne
 80a3370:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a337c:	d038      	beq.n	80a33f0 <__aeabi_dmul+0xb4>
 80a337e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3382:	f04f 0500 	mov.w	r5, #0
 80a3386:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a338a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a338e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3392:	f04f 0600 	mov.w	r6, #0
 80a3396:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a339a:	f09c 0f00 	teq	ip, #0
 80a339e:	bf18      	it	ne
 80a33a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a33a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a33a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a33ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a33b0:	d204      	bcs.n	80a33bc <__aeabi_dmul+0x80>
 80a33b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a33b6:	416d      	adcs	r5, r5
 80a33b8:	eb46 0606 	adc.w	r6, r6, r6
 80a33bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a33c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a33c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a33c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a33cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a33d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a33d4:	bf88      	it	hi
 80a33d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a33da:	d81e      	bhi.n	80a341a <__aeabi_dmul+0xde>
 80a33dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a33e0:	bf08      	it	eq
 80a33e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a33e6:	f150 0000 	adcs.w	r0, r0, #0
 80a33ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a33ee:	bd70      	pop	{r4, r5, r6, pc}
 80a33f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a33f4:	ea46 0101 	orr.w	r1, r6, r1
 80a33f8:	ea40 0002 	orr.w	r0, r0, r2
 80a33fc:	ea81 0103 	eor.w	r1, r1, r3
 80a3400:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3404:	bfc2      	ittt	gt
 80a3406:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a340a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a340e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3414:	f04f 0e00 	mov.w	lr, #0
 80a3418:	3c01      	subs	r4, #1
 80a341a:	f300 80ab 	bgt.w	80a3574 <__aeabi_dmul+0x238>
 80a341e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3422:	bfde      	ittt	le
 80a3424:	2000      	movle	r0, #0
 80a3426:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a342a:	bd70      	pople	{r4, r5, r6, pc}
 80a342c:	f1c4 0400 	rsb	r4, r4, #0
 80a3430:	3c20      	subs	r4, #32
 80a3432:	da35      	bge.n	80a34a0 <__aeabi_dmul+0x164>
 80a3434:	340c      	adds	r4, #12
 80a3436:	dc1b      	bgt.n	80a3470 <__aeabi_dmul+0x134>
 80a3438:	f104 0414 	add.w	r4, r4, #20
 80a343c:	f1c4 0520 	rsb	r5, r4, #32
 80a3440:	fa00 f305 	lsl.w	r3, r0, r5
 80a3444:	fa20 f004 	lsr.w	r0, r0, r4
 80a3448:	fa01 f205 	lsl.w	r2, r1, r5
 80a344c:	ea40 0002 	orr.w	r0, r0, r2
 80a3450:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3458:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a345c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3460:	eb42 0106 	adc.w	r1, r2, r6
 80a3464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3468:	bf08      	it	eq
 80a346a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a346e:	bd70      	pop	{r4, r5, r6, pc}
 80a3470:	f1c4 040c 	rsb	r4, r4, #12
 80a3474:	f1c4 0520 	rsb	r5, r4, #32
 80a3478:	fa00 f304 	lsl.w	r3, r0, r4
 80a347c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3480:	fa01 f204 	lsl.w	r2, r1, r4
 80a3484:	ea40 0002 	orr.w	r0, r0, r2
 80a3488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a348c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3490:	f141 0100 	adc.w	r1, r1, #0
 80a3494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3498:	bf08      	it	eq
 80a349a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a349e:	bd70      	pop	{r4, r5, r6, pc}
 80a34a0:	f1c4 0520 	rsb	r5, r4, #32
 80a34a4:	fa00 f205 	lsl.w	r2, r0, r5
 80a34a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a34ac:	fa20 f304 	lsr.w	r3, r0, r4
 80a34b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a34b4:	ea43 0302 	orr.w	r3, r3, r2
 80a34b8:	fa21 f004 	lsr.w	r0, r1, r4
 80a34bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a34c0:	fa21 f204 	lsr.w	r2, r1, r4
 80a34c4:	ea20 0002 	bic.w	r0, r0, r2
 80a34c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a34cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a34d0:	bf08      	it	eq
 80a34d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a34d6:	bd70      	pop	{r4, r5, r6, pc}
 80a34d8:	f094 0f00 	teq	r4, #0
 80a34dc:	d10f      	bne.n	80a34fe <__aeabi_dmul+0x1c2>
 80a34de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a34e2:	0040      	lsls	r0, r0, #1
 80a34e4:	eb41 0101 	adc.w	r1, r1, r1
 80a34e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a34ec:	bf08      	it	eq
 80a34ee:	3c01      	subeq	r4, #1
 80a34f0:	d0f7      	beq.n	80a34e2 <__aeabi_dmul+0x1a6>
 80a34f2:	ea41 0106 	orr.w	r1, r1, r6
 80a34f6:	f095 0f00 	teq	r5, #0
 80a34fa:	bf18      	it	ne
 80a34fc:	4770      	bxne	lr
 80a34fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3502:	0052      	lsls	r2, r2, #1
 80a3504:	eb43 0303 	adc.w	r3, r3, r3
 80a3508:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a350c:	bf08      	it	eq
 80a350e:	3d01      	subeq	r5, #1
 80a3510:	d0f7      	beq.n	80a3502 <__aeabi_dmul+0x1c6>
 80a3512:	ea43 0306 	orr.w	r3, r3, r6
 80a3516:	4770      	bx	lr
 80a3518:	ea94 0f0c 	teq	r4, ip
 80a351c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3520:	bf18      	it	ne
 80a3522:	ea95 0f0c 	teqne	r5, ip
 80a3526:	d00c      	beq.n	80a3542 <__aeabi_dmul+0x206>
 80a3528:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a352c:	bf18      	it	ne
 80a352e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3532:	d1d1      	bne.n	80a34d8 <__aeabi_dmul+0x19c>
 80a3534:	ea81 0103 	eor.w	r1, r1, r3
 80a3538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a353c:	f04f 0000 	mov.w	r0, #0
 80a3540:	bd70      	pop	{r4, r5, r6, pc}
 80a3542:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3546:	bf06      	itte	eq
 80a3548:	4610      	moveq	r0, r2
 80a354a:	4619      	moveq	r1, r3
 80a354c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3550:	d019      	beq.n	80a3586 <__aeabi_dmul+0x24a>
 80a3552:	ea94 0f0c 	teq	r4, ip
 80a3556:	d102      	bne.n	80a355e <__aeabi_dmul+0x222>
 80a3558:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a355c:	d113      	bne.n	80a3586 <__aeabi_dmul+0x24a>
 80a355e:	ea95 0f0c 	teq	r5, ip
 80a3562:	d105      	bne.n	80a3570 <__aeabi_dmul+0x234>
 80a3564:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3568:	bf1c      	itt	ne
 80a356a:	4610      	movne	r0, r2
 80a356c:	4619      	movne	r1, r3
 80a356e:	d10a      	bne.n	80a3586 <__aeabi_dmul+0x24a>
 80a3570:	ea81 0103 	eor.w	r1, r1, r3
 80a3574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3578:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a357c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3580:	f04f 0000 	mov.w	r0, #0
 80a3584:	bd70      	pop	{r4, r5, r6, pc}
 80a3586:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a358a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a358e:	bd70      	pop	{r4, r5, r6, pc}

080a3590 <__aeabi_ddiv>:
 80a3590:	b570      	push	{r4, r5, r6, lr}
 80a3592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a359a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a359e:	bf1d      	ittte	ne
 80a35a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a35a4:	ea94 0f0c 	teqne	r4, ip
 80a35a8:	ea95 0f0c 	teqne	r5, ip
 80a35ac:	f000 f8a7 	bleq	80a36fe <__aeabi_ddiv+0x16e>
 80a35b0:	eba4 0405 	sub.w	r4, r4, r5
 80a35b4:	ea81 0e03 	eor.w	lr, r1, r3
 80a35b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a35bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a35c0:	f000 8088 	beq.w	80a36d4 <__aeabi_ddiv+0x144>
 80a35c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a35c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a35cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a35d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a35d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a35d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a35dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a35e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a35e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a35e8:	429d      	cmp	r5, r3
 80a35ea:	bf08      	it	eq
 80a35ec:	4296      	cmpeq	r6, r2
 80a35ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a35f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a35f6:	d202      	bcs.n	80a35fe <__aeabi_ddiv+0x6e>
 80a35f8:	085b      	lsrs	r3, r3, #1
 80a35fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a35fe:	1ab6      	subs	r6, r6, r2
 80a3600:	eb65 0503 	sbc.w	r5, r5, r3
 80a3604:	085b      	lsrs	r3, r3, #1
 80a3606:	ea4f 0232 	mov.w	r2, r2, rrx
 80a360a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a360e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3612:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3616:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a361a:	bf22      	ittt	cs
 80a361c:	1ab6      	subcs	r6, r6, r2
 80a361e:	4675      	movcs	r5, lr
 80a3620:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3624:	085b      	lsrs	r3, r3, #1
 80a3626:	ea4f 0232 	mov.w	r2, r2, rrx
 80a362a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a362e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3632:	bf22      	ittt	cs
 80a3634:	1ab6      	subcs	r6, r6, r2
 80a3636:	4675      	movcs	r5, lr
 80a3638:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a363c:	085b      	lsrs	r3, r3, #1
 80a363e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3642:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3646:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a364a:	bf22      	ittt	cs
 80a364c:	1ab6      	subcs	r6, r6, r2
 80a364e:	4675      	movcs	r5, lr
 80a3650:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3654:	085b      	lsrs	r3, r3, #1
 80a3656:	ea4f 0232 	mov.w	r2, r2, rrx
 80a365a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a365e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3662:	bf22      	ittt	cs
 80a3664:	1ab6      	subcs	r6, r6, r2
 80a3666:	4675      	movcs	r5, lr
 80a3668:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a366c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3670:	d018      	beq.n	80a36a4 <__aeabi_ddiv+0x114>
 80a3672:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3676:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a367a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a367e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3682:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3686:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a368a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a368e:	d1c0      	bne.n	80a3612 <__aeabi_ddiv+0x82>
 80a3690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3694:	d10b      	bne.n	80a36ae <__aeabi_ddiv+0x11e>
 80a3696:	ea41 0100 	orr.w	r1, r1, r0
 80a369a:	f04f 0000 	mov.w	r0, #0
 80a369e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a36a2:	e7b6      	b.n	80a3612 <__aeabi_ddiv+0x82>
 80a36a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a36a8:	bf04      	itt	eq
 80a36aa:	4301      	orreq	r1, r0
 80a36ac:	2000      	moveq	r0, #0
 80a36ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a36b2:	bf88      	it	hi
 80a36b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a36b8:	f63f aeaf 	bhi.w	80a341a <__aeabi_dmul+0xde>
 80a36bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a36c0:	bf04      	itt	eq
 80a36c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a36c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a36ca:	f150 0000 	adcs.w	r0, r0, #0
 80a36ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a36d2:	bd70      	pop	{r4, r5, r6, pc}
 80a36d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a36d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a36dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a36e0:	bfc2      	ittt	gt
 80a36e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a36e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a36ea:	bd70      	popgt	{r4, r5, r6, pc}
 80a36ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a36f0:	f04f 0e00 	mov.w	lr, #0
 80a36f4:	3c01      	subs	r4, #1
 80a36f6:	e690      	b.n	80a341a <__aeabi_dmul+0xde>
 80a36f8:	ea45 0e06 	orr.w	lr, r5, r6
 80a36fc:	e68d      	b.n	80a341a <__aeabi_dmul+0xde>
 80a36fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3702:	ea94 0f0c 	teq	r4, ip
 80a3706:	bf08      	it	eq
 80a3708:	ea95 0f0c 	teqeq	r5, ip
 80a370c:	f43f af3b 	beq.w	80a3586 <__aeabi_dmul+0x24a>
 80a3710:	ea94 0f0c 	teq	r4, ip
 80a3714:	d10a      	bne.n	80a372c <__aeabi_ddiv+0x19c>
 80a3716:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a371a:	f47f af34 	bne.w	80a3586 <__aeabi_dmul+0x24a>
 80a371e:	ea95 0f0c 	teq	r5, ip
 80a3722:	f47f af25 	bne.w	80a3570 <__aeabi_dmul+0x234>
 80a3726:	4610      	mov	r0, r2
 80a3728:	4619      	mov	r1, r3
 80a372a:	e72c      	b.n	80a3586 <__aeabi_dmul+0x24a>
 80a372c:	ea95 0f0c 	teq	r5, ip
 80a3730:	d106      	bne.n	80a3740 <__aeabi_ddiv+0x1b0>
 80a3732:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3736:	f43f aefd 	beq.w	80a3534 <__aeabi_dmul+0x1f8>
 80a373a:	4610      	mov	r0, r2
 80a373c:	4619      	mov	r1, r3
 80a373e:	e722      	b.n	80a3586 <__aeabi_dmul+0x24a>
 80a3740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3744:	bf18      	it	ne
 80a3746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a374a:	f47f aec5 	bne.w	80a34d8 <__aeabi_dmul+0x19c>
 80a374e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3752:	f47f af0d 	bne.w	80a3570 <__aeabi_dmul+0x234>
 80a3756:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a375a:	f47f aeeb 	bne.w	80a3534 <__aeabi_dmul+0x1f8>
 80a375e:	e712      	b.n	80a3586 <__aeabi_dmul+0x24a>

080a3760 <__gedf2>:
 80a3760:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3764:	e006      	b.n	80a3774 <__cmpdf2+0x4>
 80a3766:	bf00      	nop

080a3768 <__ledf2>:
 80a3768:	f04f 0c01 	mov.w	ip, #1
 80a376c:	e002      	b.n	80a3774 <__cmpdf2+0x4>
 80a376e:	bf00      	nop

080a3770 <__cmpdf2>:
 80a3770:	f04f 0c01 	mov.w	ip, #1
 80a3774:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3778:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a377c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3784:	bf18      	it	ne
 80a3786:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a378a:	d01b      	beq.n	80a37c4 <__cmpdf2+0x54>
 80a378c:	b001      	add	sp, #4
 80a378e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3792:	bf0c      	ite	eq
 80a3794:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3798:	ea91 0f03 	teqne	r1, r3
 80a379c:	bf02      	ittt	eq
 80a379e:	ea90 0f02 	teqeq	r0, r2
 80a37a2:	2000      	moveq	r0, #0
 80a37a4:	4770      	bxeq	lr
 80a37a6:	f110 0f00 	cmn.w	r0, #0
 80a37aa:	ea91 0f03 	teq	r1, r3
 80a37ae:	bf58      	it	pl
 80a37b0:	4299      	cmppl	r1, r3
 80a37b2:	bf08      	it	eq
 80a37b4:	4290      	cmpeq	r0, r2
 80a37b6:	bf2c      	ite	cs
 80a37b8:	17d8      	asrcs	r0, r3, #31
 80a37ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a37be:	f040 0001 	orr.w	r0, r0, #1
 80a37c2:	4770      	bx	lr
 80a37c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a37c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a37cc:	d102      	bne.n	80a37d4 <__cmpdf2+0x64>
 80a37ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a37d2:	d107      	bne.n	80a37e4 <__cmpdf2+0x74>
 80a37d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a37d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a37dc:	d1d6      	bne.n	80a378c <__cmpdf2+0x1c>
 80a37de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a37e2:	d0d3      	beq.n	80a378c <__cmpdf2+0x1c>
 80a37e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a37e8:	4770      	bx	lr
 80a37ea:	bf00      	nop

080a37ec <__aeabi_cdrcmple>:
 80a37ec:	4684      	mov	ip, r0
 80a37ee:	4610      	mov	r0, r2
 80a37f0:	4662      	mov	r2, ip
 80a37f2:	468c      	mov	ip, r1
 80a37f4:	4619      	mov	r1, r3
 80a37f6:	4663      	mov	r3, ip
 80a37f8:	e000      	b.n	80a37fc <__aeabi_cdcmpeq>
 80a37fa:	bf00      	nop

080a37fc <__aeabi_cdcmpeq>:
 80a37fc:	b501      	push	{r0, lr}
 80a37fe:	f7ff ffb7 	bl	80a3770 <__cmpdf2>
 80a3802:	2800      	cmp	r0, #0
 80a3804:	bf48      	it	mi
 80a3806:	f110 0f00 	cmnmi.w	r0, #0
 80a380a:	bd01      	pop	{r0, pc}

080a380c <__aeabi_dcmpeq>:
 80a380c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3810:	f7ff fff4 	bl	80a37fc <__aeabi_cdcmpeq>
 80a3814:	bf0c      	ite	eq
 80a3816:	2001      	moveq	r0, #1
 80a3818:	2000      	movne	r0, #0
 80a381a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a381e:	bf00      	nop

080a3820 <__aeabi_dcmplt>:
 80a3820:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3824:	f7ff ffea 	bl	80a37fc <__aeabi_cdcmpeq>
 80a3828:	bf34      	ite	cc
 80a382a:	2001      	movcc	r0, #1
 80a382c:	2000      	movcs	r0, #0
 80a382e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3832:	bf00      	nop

080a3834 <__aeabi_dcmple>:
 80a3834:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3838:	f7ff ffe0 	bl	80a37fc <__aeabi_cdcmpeq>
 80a383c:	bf94      	ite	ls
 80a383e:	2001      	movls	r0, #1
 80a3840:	2000      	movhi	r0, #0
 80a3842:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3846:	bf00      	nop

080a3848 <__aeabi_dcmpge>:
 80a3848:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a384c:	f7ff ffce 	bl	80a37ec <__aeabi_cdrcmple>
 80a3850:	bf94      	ite	ls
 80a3852:	2001      	movls	r0, #1
 80a3854:	2000      	movhi	r0, #0
 80a3856:	f85d fb08 	ldr.w	pc, [sp], #8
 80a385a:	bf00      	nop

080a385c <__aeabi_dcmpgt>:
 80a385c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3860:	f7ff ffc4 	bl	80a37ec <__aeabi_cdrcmple>
 80a3864:	bf34      	ite	cc
 80a3866:	2001      	movcc	r0, #1
 80a3868:	2000      	movcs	r0, #0
 80a386a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a386e:	bf00      	nop

080a3870 <__aeabi_d2uiz>:
 80a3870:	004a      	lsls	r2, r1, #1
 80a3872:	d211      	bcs.n	80a3898 <__aeabi_d2uiz+0x28>
 80a3874:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3878:	d211      	bcs.n	80a389e <__aeabi_d2uiz+0x2e>
 80a387a:	d50d      	bpl.n	80a3898 <__aeabi_d2uiz+0x28>
 80a387c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3880:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3884:	d40e      	bmi.n	80a38a4 <__aeabi_d2uiz+0x34>
 80a3886:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a388a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a388e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3892:	fa23 f002 	lsr.w	r0, r3, r2
 80a3896:	4770      	bx	lr
 80a3898:	f04f 0000 	mov.w	r0, #0
 80a389c:	4770      	bx	lr
 80a389e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a38a2:	d102      	bne.n	80a38aa <__aeabi_d2uiz+0x3a>
 80a38a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a38a8:	4770      	bx	lr
 80a38aa:	f04f 0000 	mov.w	r0, #0
 80a38ae:	4770      	bx	lr

080a38b0 <__aeabi_d2f>:
 80a38b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a38b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a38b8:	bf24      	itt	cs
 80a38ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a38be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a38c2:	d90d      	bls.n	80a38e0 <__aeabi_d2f+0x30>
 80a38c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a38c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a38cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a38d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a38d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a38d8:	bf08      	it	eq
 80a38da:	f020 0001 	biceq.w	r0, r0, #1
 80a38de:	4770      	bx	lr
 80a38e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a38e4:	d121      	bne.n	80a392a <__aeabi_d2f+0x7a>
 80a38e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a38ea:	bfbc      	itt	lt
 80a38ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a38f0:	4770      	bxlt	lr
 80a38f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a38f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a38fa:	f1c2 0218 	rsb	r2, r2, #24
 80a38fe:	f1c2 0c20 	rsb	ip, r2, #32
 80a3902:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3906:	fa20 f002 	lsr.w	r0, r0, r2
 80a390a:	bf18      	it	ne
 80a390c:	f040 0001 	orrne.w	r0, r0, #1
 80a3910:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3914:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3918:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a391c:	ea40 000c 	orr.w	r0, r0, ip
 80a3920:	fa23 f302 	lsr.w	r3, r3, r2
 80a3924:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3928:	e7cc      	b.n	80a38c4 <__aeabi_d2f+0x14>
 80a392a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a392e:	d107      	bne.n	80a3940 <__aeabi_d2f+0x90>
 80a3930:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3934:	bf1e      	ittt	ne
 80a3936:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a393a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a393e:	4770      	bxne	lr
 80a3940:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3944:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3948:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a394c:	4770      	bx	lr
 80a394e:	bf00      	nop

080a3950 <__aeabi_frsub>:
 80a3950:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3954:	e002      	b.n	80a395c <__addsf3>
 80a3956:	bf00      	nop

080a3958 <__aeabi_fsub>:
 80a3958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a395c <__addsf3>:
 80a395c:	0042      	lsls	r2, r0, #1
 80a395e:	bf1f      	itttt	ne
 80a3960:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3964:	ea92 0f03 	teqne	r2, r3
 80a3968:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a396c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3970:	d06a      	beq.n	80a3a48 <__addsf3+0xec>
 80a3972:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3976:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a397a:	bfc1      	itttt	gt
 80a397c:	18d2      	addgt	r2, r2, r3
 80a397e:	4041      	eorgt	r1, r0
 80a3980:	4048      	eorgt	r0, r1
 80a3982:	4041      	eorgt	r1, r0
 80a3984:	bfb8      	it	lt
 80a3986:	425b      	neglt	r3, r3
 80a3988:	2b19      	cmp	r3, #25
 80a398a:	bf88      	it	hi
 80a398c:	4770      	bxhi	lr
 80a398e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a399a:	bf18      	it	ne
 80a399c:	4240      	negne	r0, r0
 80a399e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a39a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a39a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a39aa:	bf18      	it	ne
 80a39ac:	4249      	negne	r1, r1
 80a39ae:	ea92 0f03 	teq	r2, r3
 80a39b2:	d03f      	beq.n	80a3a34 <__addsf3+0xd8>
 80a39b4:	f1a2 0201 	sub.w	r2, r2, #1
 80a39b8:	fa41 fc03 	asr.w	ip, r1, r3
 80a39bc:	eb10 000c 	adds.w	r0, r0, ip
 80a39c0:	f1c3 0320 	rsb	r3, r3, #32
 80a39c4:	fa01 f103 	lsl.w	r1, r1, r3
 80a39c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a39cc:	d502      	bpl.n	80a39d4 <__addsf3+0x78>
 80a39ce:	4249      	negs	r1, r1
 80a39d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a39d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a39d8:	d313      	bcc.n	80a3a02 <__addsf3+0xa6>
 80a39da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a39de:	d306      	bcc.n	80a39ee <__addsf3+0x92>
 80a39e0:	0840      	lsrs	r0, r0, #1
 80a39e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a39e6:	f102 0201 	add.w	r2, r2, #1
 80a39ea:	2afe      	cmp	r2, #254	; 0xfe
 80a39ec:	d251      	bcs.n	80a3a92 <__addsf3+0x136>
 80a39ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a39f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a39f6:	bf08      	it	eq
 80a39f8:	f020 0001 	biceq.w	r0, r0, #1
 80a39fc:	ea40 0003 	orr.w	r0, r0, r3
 80a3a00:	4770      	bx	lr
 80a3a02:	0049      	lsls	r1, r1, #1
 80a3a04:	eb40 0000 	adc.w	r0, r0, r0
 80a3a08:	3a01      	subs	r2, #1
 80a3a0a:	bf28      	it	cs
 80a3a0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a3a10:	d2ed      	bcs.n	80a39ee <__addsf3+0x92>
 80a3a12:	fab0 fc80 	clz	ip, r0
 80a3a16:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3a1a:	ebb2 020c 	subs.w	r2, r2, ip
 80a3a1e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3a22:	bfaa      	itet	ge
 80a3a24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3a28:	4252      	neglt	r2, r2
 80a3a2a:	4318      	orrge	r0, r3
 80a3a2c:	bfbc      	itt	lt
 80a3a2e:	40d0      	lsrlt	r0, r2
 80a3a30:	4318      	orrlt	r0, r3
 80a3a32:	4770      	bx	lr
 80a3a34:	f092 0f00 	teq	r2, #0
 80a3a38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3a3c:	bf06      	itte	eq
 80a3a3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3a42:	3201      	addeq	r2, #1
 80a3a44:	3b01      	subne	r3, #1
 80a3a46:	e7b5      	b.n	80a39b4 <__addsf3+0x58>
 80a3a48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3a4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3a50:	bf18      	it	ne
 80a3a52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3a56:	d021      	beq.n	80a3a9c <__addsf3+0x140>
 80a3a58:	ea92 0f03 	teq	r2, r3
 80a3a5c:	d004      	beq.n	80a3a68 <__addsf3+0x10c>
 80a3a5e:	f092 0f00 	teq	r2, #0
 80a3a62:	bf08      	it	eq
 80a3a64:	4608      	moveq	r0, r1
 80a3a66:	4770      	bx	lr
 80a3a68:	ea90 0f01 	teq	r0, r1
 80a3a6c:	bf1c      	itt	ne
 80a3a6e:	2000      	movne	r0, #0
 80a3a70:	4770      	bxne	lr
 80a3a72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3a76:	d104      	bne.n	80a3a82 <__addsf3+0x126>
 80a3a78:	0040      	lsls	r0, r0, #1
 80a3a7a:	bf28      	it	cs
 80a3a7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3a80:	4770      	bx	lr
 80a3a82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3a86:	bf3c      	itt	cc
 80a3a88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3a8c:	4770      	bxcc	lr
 80a3a8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3a92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a9a:	4770      	bx	lr
 80a3a9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3aa0:	bf16      	itet	ne
 80a3aa2:	4608      	movne	r0, r1
 80a3aa4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3aa8:	4601      	movne	r1, r0
 80a3aaa:	0242      	lsls	r2, r0, #9
 80a3aac:	bf06      	itte	eq
 80a3aae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3ab2:	ea90 0f01 	teqeq	r0, r1
 80a3ab6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3aba:	4770      	bx	lr

080a3abc <__aeabi_ui2f>:
 80a3abc:	f04f 0300 	mov.w	r3, #0
 80a3ac0:	e004      	b.n	80a3acc <__aeabi_i2f+0x8>
 80a3ac2:	bf00      	nop

080a3ac4 <__aeabi_i2f>:
 80a3ac4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3ac8:	bf48      	it	mi
 80a3aca:	4240      	negmi	r0, r0
 80a3acc:	ea5f 0c00 	movs.w	ip, r0
 80a3ad0:	bf08      	it	eq
 80a3ad2:	4770      	bxeq	lr
 80a3ad4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3ad8:	4601      	mov	r1, r0
 80a3ada:	f04f 0000 	mov.w	r0, #0
 80a3ade:	e01c      	b.n	80a3b1a <__aeabi_l2f+0x2a>

080a3ae0 <__aeabi_ul2f>:
 80a3ae0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3ae4:	bf08      	it	eq
 80a3ae6:	4770      	bxeq	lr
 80a3ae8:	f04f 0300 	mov.w	r3, #0
 80a3aec:	e00a      	b.n	80a3b04 <__aeabi_l2f+0x14>
 80a3aee:	bf00      	nop

080a3af0 <__aeabi_l2f>:
 80a3af0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3af4:	bf08      	it	eq
 80a3af6:	4770      	bxeq	lr
 80a3af8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3afc:	d502      	bpl.n	80a3b04 <__aeabi_l2f+0x14>
 80a3afe:	4240      	negs	r0, r0
 80a3b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3b04:	ea5f 0c01 	movs.w	ip, r1
 80a3b08:	bf02      	ittt	eq
 80a3b0a:	4684      	moveq	ip, r0
 80a3b0c:	4601      	moveq	r1, r0
 80a3b0e:	2000      	moveq	r0, #0
 80a3b10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3b14:	bf08      	it	eq
 80a3b16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3b1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3b1e:	fabc f28c 	clz	r2, ip
 80a3b22:	3a08      	subs	r2, #8
 80a3b24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3b28:	db10      	blt.n	80a3b4c <__aeabi_l2f+0x5c>
 80a3b2a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3b2e:	4463      	add	r3, ip
 80a3b30:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3b34:	f1c2 0220 	rsb	r2, r2, #32
 80a3b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3b3c:	fa20 f202 	lsr.w	r2, r0, r2
 80a3b40:	eb43 0002 	adc.w	r0, r3, r2
 80a3b44:	bf08      	it	eq
 80a3b46:	f020 0001 	biceq.w	r0, r0, #1
 80a3b4a:	4770      	bx	lr
 80a3b4c:	f102 0220 	add.w	r2, r2, #32
 80a3b50:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3b54:	f1c2 0220 	rsb	r2, r2, #32
 80a3b58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3b5c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3b60:	eb43 0002 	adc.w	r0, r3, r2
 80a3b64:	bf08      	it	eq
 80a3b66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3b6a:	4770      	bx	lr

080a3b6c <__aeabi_fmul>:
 80a3b6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3b70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3b74:	bf1e      	ittt	ne
 80a3b76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3b7a:	ea92 0f0c 	teqne	r2, ip
 80a3b7e:	ea93 0f0c 	teqne	r3, ip
 80a3b82:	d06f      	beq.n	80a3c64 <__aeabi_fmul+0xf8>
 80a3b84:	441a      	add	r2, r3
 80a3b86:	ea80 0c01 	eor.w	ip, r0, r1
 80a3b8a:	0240      	lsls	r0, r0, #9
 80a3b8c:	bf18      	it	ne
 80a3b8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3b92:	d01e      	beq.n	80a3bd2 <__aeabi_fmul+0x66>
 80a3b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3b98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3b9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3ba0:	fba0 3101 	umull	r3, r1, r0, r1
 80a3ba4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3ba8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3bac:	bf3e      	ittt	cc
 80a3bae:	0049      	lslcc	r1, r1, #1
 80a3bb0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3bb4:	005b      	lslcc	r3, r3, #1
 80a3bb6:	ea40 0001 	orr.w	r0, r0, r1
 80a3bba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3bbe:	2afd      	cmp	r2, #253	; 0xfd
 80a3bc0:	d81d      	bhi.n	80a3bfe <__aeabi_fmul+0x92>
 80a3bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3bca:	bf08      	it	eq
 80a3bcc:	f020 0001 	biceq.w	r0, r0, #1
 80a3bd0:	4770      	bx	lr
 80a3bd2:	f090 0f00 	teq	r0, #0
 80a3bd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3bda:	bf08      	it	eq
 80a3bdc:	0249      	lsleq	r1, r1, #9
 80a3bde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3be2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3be6:	3a7f      	subs	r2, #127	; 0x7f
 80a3be8:	bfc2      	ittt	gt
 80a3bea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3bee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3bf2:	4770      	bxgt	lr
 80a3bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3bf8:	f04f 0300 	mov.w	r3, #0
 80a3bfc:	3a01      	subs	r2, #1
 80a3bfe:	dc5d      	bgt.n	80a3cbc <__aeabi_fmul+0x150>
 80a3c00:	f112 0f19 	cmn.w	r2, #25
 80a3c04:	bfdc      	itt	le
 80a3c06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3c0a:	4770      	bxle	lr
 80a3c0c:	f1c2 0200 	rsb	r2, r2, #0
 80a3c10:	0041      	lsls	r1, r0, #1
 80a3c12:	fa21 f102 	lsr.w	r1, r1, r2
 80a3c16:	f1c2 0220 	rsb	r2, r2, #32
 80a3c1a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3c1e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3c22:	f140 0000 	adc.w	r0, r0, #0
 80a3c26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3c2a:	bf08      	it	eq
 80a3c2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3c30:	4770      	bx	lr
 80a3c32:	f092 0f00 	teq	r2, #0
 80a3c36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3c3a:	bf02      	ittt	eq
 80a3c3c:	0040      	lsleq	r0, r0, #1
 80a3c3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3c42:	3a01      	subeq	r2, #1
 80a3c44:	d0f9      	beq.n	80a3c3a <__aeabi_fmul+0xce>
 80a3c46:	ea40 000c 	orr.w	r0, r0, ip
 80a3c4a:	f093 0f00 	teq	r3, #0
 80a3c4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3c52:	bf02      	ittt	eq
 80a3c54:	0049      	lsleq	r1, r1, #1
 80a3c56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3c5a:	3b01      	subeq	r3, #1
 80a3c5c:	d0f9      	beq.n	80a3c52 <__aeabi_fmul+0xe6>
 80a3c5e:	ea41 010c 	orr.w	r1, r1, ip
 80a3c62:	e78f      	b.n	80a3b84 <__aeabi_fmul+0x18>
 80a3c64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3c68:	ea92 0f0c 	teq	r2, ip
 80a3c6c:	bf18      	it	ne
 80a3c6e:	ea93 0f0c 	teqne	r3, ip
 80a3c72:	d00a      	beq.n	80a3c8a <__aeabi_fmul+0x11e>
 80a3c74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3c78:	bf18      	it	ne
 80a3c7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3c7e:	d1d8      	bne.n	80a3c32 <__aeabi_fmul+0xc6>
 80a3c80:	ea80 0001 	eor.w	r0, r0, r1
 80a3c84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3c88:	4770      	bx	lr
 80a3c8a:	f090 0f00 	teq	r0, #0
 80a3c8e:	bf17      	itett	ne
 80a3c90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3c94:	4608      	moveq	r0, r1
 80a3c96:	f091 0f00 	teqne	r1, #0
 80a3c9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3c9e:	d014      	beq.n	80a3cca <__aeabi_fmul+0x15e>
 80a3ca0:	ea92 0f0c 	teq	r2, ip
 80a3ca4:	d101      	bne.n	80a3caa <__aeabi_fmul+0x13e>
 80a3ca6:	0242      	lsls	r2, r0, #9
 80a3ca8:	d10f      	bne.n	80a3cca <__aeabi_fmul+0x15e>
 80a3caa:	ea93 0f0c 	teq	r3, ip
 80a3cae:	d103      	bne.n	80a3cb8 <__aeabi_fmul+0x14c>
 80a3cb0:	024b      	lsls	r3, r1, #9
 80a3cb2:	bf18      	it	ne
 80a3cb4:	4608      	movne	r0, r1
 80a3cb6:	d108      	bne.n	80a3cca <__aeabi_fmul+0x15e>
 80a3cb8:	ea80 0001 	eor.w	r0, r0, r1
 80a3cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3cc8:	4770      	bx	lr
 80a3cca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3cce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3cd2:	4770      	bx	lr

080a3cd4 <__aeabi_fdiv>:
 80a3cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3cdc:	bf1e      	ittt	ne
 80a3cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3ce2:	ea92 0f0c 	teqne	r2, ip
 80a3ce6:	ea93 0f0c 	teqne	r3, ip
 80a3cea:	d069      	beq.n	80a3dc0 <__aeabi_fdiv+0xec>
 80a3cec:	eba2 0203 	sub.w	r2, r2, r3
 80a3cf0:	ea80 0c01 	eor.w	ip, r0, r1
 80a3cf4:	0249      	lsls	r1, r1, #9
 80a3cf6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3cfa:	d037      	beq.n	80a3d6c <__aeabi_fdiv+0x98>
 80a3cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3d00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3d04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3d0c:	428b      	cmp	r3, r1
 80a3d0e:	bf38      	it	cc
 80a3d10:	005b      	lslcc	r3, r3, #1
 80a3d12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3d16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3d1a:	428b      	cmp	r3, r1
 80a3d1c:	bf24      	itt	cs
 80a3d1e:	1a5b      	subcs	r3, r3, r1
 80a3d20:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3d24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3d28:	bf24      	itt	cs
 80a3d2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3d2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3d32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3d36:	bf24      	itt	cs
 80a3d38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3d3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3d40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3d44:	bf24      	itt	cs
 80a3d46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3d4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3d4e:	011b      	lsls	r3, r3, #4
 80a3d50:	bf18      	it	ne
 80a3d52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3d56:	d1e0      	bne.n	80a3d1a <__aeabi_fdiv+0x46>
 80a3d58:	2afd      	cmp	r2, #253	; 0xfd
 80a3d5a:	f63f af50 	bhi.w	80a3bfe <__aeabi_fmul+0x92>
 80a3d5e:	428b      	cmp	r3, r1
 80a3d60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3d64:	bf08      	it	eq
 80a3d66:	f020 0001 	biceq.w	r0, r0, #1
 80a3d6a:	4770      	bx	lr
 80a3d6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3d70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3d74:	327f      	adds	r2, #127	; 0x7f
 80a3d76:	bfc2      	ittt	gt
 80a3d78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3d7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3d80:	4770      	bxgt	lr
 80a3d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d86:	f04f 0300 	mov.w	r3, #0
 80a3d8a:	3a01      	subs	r2, #1
 80a3d8c:	e737      	b.n	80a3bfe <__aeabi_fmul+0x92>
 80a3d8e:	f092 0f00 	teq	r2, #0
 80a3d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3d96:	bf02      	ittt	eq
 80a3d98:	0040      	lsleq	r0, r0, #1
 80a3d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3d9e:	3a01      	subeq	r2, #1
 80a3da0:	d0f9      	beq.n	80a3d96 <__aeabi_fdiv+0xc2>
 80a3da2:	ea40 000c 	orr.w	r0, r0, ip
 80a3da6:	f093 0f00 	teq	r3, #0
 80a3daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3dae:	bf02      	ittt	eq
 80a3db0:	0049      	lsleq	r1, r1, #1
 80a3db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3db6:	3b01      	subeq	r3, #1
 80a3db8:	d0f9      	beq.n	80a3dae <__aeabi_fdiv+0xda>
 80a3dba:	ea41 010c 	orr.w	r1, r1, ip
 80a3dbe:	e795      	b.n	80a3cec <__aeabi_fdiv+0x18>
 80a3dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3dc4:	ea92 0f0c 	teq	r2, ip
 80a3dc8:	d108      	bne.n	80a3ddc <__aeabi_fdiv+0x108>
 80a3dca:	0242      	lsls	r2, r0, #9
 80a3dcc:	f47f af7d 	bne.w	80a3cca <__aeabi_fmul+0x15e>
 80a3dd0:	ea93 0f0c 	teq	r3, ip
 80a3dd4:	f47f af70 	bne.w	80a3cb8 <__aeabi_fmul+0x14c>
 80a3dd8:	4608      	mov	r0, r1
 80a3dda:	e776      	b.n	80a3cca <__aeabi_fmul+0x15e>
 80a3ddc:	ea93 0f0c 	teq	r3, ip
 80a3de0:	d104      	bne.n	80a3dec <__aeabi_fdiv+0x118>
 80a3de2:	024b      	lsls	r3, r1, #9
 80a3de4:	f43f af4c 	beq.w	80a3c80 <__aeabi_fmul+0x114>
 80a3de8:	4608      	mov	r0, r1
 80a3dea:	e76e      	b.n	80a3cca <__aeabi_fmul+0x15e>
 80a3dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3df0:	bf18      	it	ne
 80a3df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3df6:	d1ca      	bne.n	80a3d8e <__aeabi_fdiv+0xba>
 80a3df8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3dfc:	f47f af5c 	bne.w	80a3cb8 <__aeabi_fmul+0x14c>
 80a3e00:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3e04:	f47f af3c 	bne.w	80a3c80 <__aeabi_fmul+0x114>
 80a3e08:	e75f      	b.n	80a3cca <__aeabi_fmul+0x15e>
 80a3e0a:	bf00      	nop

080a3e0c <__aeabi_uldivmod>:
 80a3e0c:	b953      	cbnz	r3, 80a3e24 <__aeabi_uldivmod+0x18>
 80a3e0e:	b94a      	cbnz	r2, 80a3e24 <__aeabi_uldivmod+0x18>
 80a3e10:	2900      	cmp	r1, #0
 80a3e12:	bf08      	it	eq
 80a3e14:	2800      	cmpeq	r0, #0
 80a3e16:	bf1c      	itt	ne
 80a3e18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a3e1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a3e20:	f000 b98c 	b.w	80a413c <__aeabi_idiv0>
 80a3e24:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3e28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3e2c:	f000 f824 	bl	80a3e78 <__udivmoddi4>
 80a3e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3e38:	b004      	add	sp, #16
 80a3e3a:	4770      	bx	lr

080a3e3c <__aeabi_d2ulz>:
 80a3e3c:	b5d0      	push	{r4, r6, r7, lr}
 80a3e3e:	2200      	movs	r2, #0
 80a3e40:	4b0b      	ldr	r3, [pc, #44]	; (80a3e70 <__aeabi_d2ulz+0x34>)
 80a3e42:	4606      	mov	r6, r0
 80a3e44:	460f      	mov	r7, r1
 80a3e46:	f7ff fa79 	bl	80a333c <__aeabi_dmul>
 80a3e4a:	f7ff fd11 	bl	80a3870 <__aeabi_d2uiz>
 80a3e4e:	4604      	mov	r4, r0
 80a3e50:	f7ff f9fa 	bl	80a3248 <__aeabi_ui2d>
 80a3e54:	2200      	movs	r2, #0
 80a3e56:	4b07      	ldr	r3, [pc, #28]	; (80a3e74 <__aeabi_d2ulz+0x38>)
 80a3e58:	f7ff fa70 	bl	80a333c <__aeabi_dmul>
 80a3e5c:	4602      	mov	r2, r0
 80a3e5e:	460b      	mov	r3, r1
 80a3e60:	4630      	mov	r0, r6
 80a3e62:	4639      	mov	r1, r7
 80a3e64:	f7ff f8b2 	bl	80a2fcc <__aeabi_dsub>
 80a3e68:	f7ff fd02 	bl	80a3870 <__aeabi_d2uiz>
 80a3e6c:	4621      	mov	r1, r4
 80a3e6e:	bdd0      	pop	{r4, r6, r7, pc}
 80a3e70:	3df00000 	.word	0x3df00000
 80a3e74:	41f00000 	.word	0x41f00000

080a3e78 <__udivmoddi4>:
 80a3e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3e7c:	9e08      	ldr	r6, [sp, #32]
 80a3e7e:	460d      	mov	r5, r1
 80a3e80:	4604      	mov	r4, r0
 80a3e82:	468e      	mov	lr, r1
 80a3e84:	2b00      	cmp	r3, #0
 80a3e86:	f040 8083 	bne.w	80a3f90 <__udivmoddi4+0x118>
 80a3e8a:	428a      	cmp	r2, r1
 80a3e8c:	4617      	mov	r7, r2
 80a3e8e:	d947      	bls.n	80a3f20 <__udivmoddi4+0xa8>
 80a3e90:	fab2 f382 	clz	r3, r2
 80a3e94:	b14b      	cbz	r3, 80a3eaa <__udivmoddi4+0x32>
 80a3e96:	f1c3 0120 	rsb	r1, r3, #32
 80a3e9a:	fa05 fe03 	lsl.w	lr, r5, r3
 80a3e9e:	fa20 f101 	lsr.w	r1, r0, r1
 80a3ea2:	409f      	lsls	r7, r3
 80a3ea4:	ea41 0e0e 	orr.w	lr, r1, lr
 80a3ea8:	409c      	lsls	r4, r3
 80a3eaa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3eae:	fbbe fcf8 	udiv	ip, lr, r8
 80a3eb2:	fa1f f987 	uxth.w	r9, r7
 80a3eb6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a3eba:	fb0c f009 	mul.w	r0, ip, r9
 80a3ebe:	0c21      	lsrs	r1, r4, #16
 80a3ec0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a3ec4:	4290      	cmp	r0, r2
 80a3ec6:	d90a      	bls.n	80a3ede <__udivmoddi4+0x66>
 80a3ec8:	18ba      	adds	r2, r7, r2
 80a3eca:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a3ece:	f080 8118 	bcs.w	80a4102 <__udivmoddi4+0x28a>
 80a3ed2:	4290      	cmp	r0, r2
 80a3ed4:	f240 8115 	bls.w	80a4102 <__udivmoddi4+0x28a>
 80a3ed8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3edc:	443a      	add	r2, r7
 80a3ede:	1a12      	subs	r2, r2, r0
 80a3ee0:	fbb2 f0f8 	udiv	r0, r2, r8
 80a3ee4:	fb08 2210 	mls	r2, r8, r0, r2
 80a3ee8:	fb00 f109 	mul.w	r1, r0, r9
 80a3eec:	b2a4      	uxth	r4, r4
 80a3eee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3ef2:	42a1      	cmp	r1, r4
 80a3ef4:	d909      	bls.n	80a3f0a <__udivmoddi4+0x92>
 80a3ef6:	193c      	adds	r4, r7, r4
 80a3ef8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3efc:	f080 8103 	bcs.w	80a4106 <__udivmoddi4+0x28e>
 80a3f00:	42a1      	cmp	r1, r4
 80a3f02:	f240 8100 	bls.w	80a4106 <__udivmoddi4+0x28e>
 80a3f06:	3802      	subs	r0, #2
 80a3f08:	443c      	add	r4, r7
 80a3f0a:	1a64      	subs	r4, r4, r1
 80a3f0c:	2100      	movs	r1, #0
 80a3f0e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3f12:	b11e      	cbz	r6, 80a3f1c <__udivmoddi4+0xa4>
 80a3f14:	2200      	movs	r2, #0
 80a3f16:	40dc      	lsrs	r4, r3
 80a3f18:	e9c6 4200 	strd	r4, r2, [r6]
 80a3f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f20:	b902      	cbnz	r2, 80a3f24 <__udivmoddi4+0xac>
 80a3f22:	deff      	udf	#255	; 0xff
 80a3f24:	fab2 f382 	clz	r3, r2
 80a3f28:	2b00      	cmp	r3, #0
 80a3f2a:	d14f      	bne.n	80a3fcc <__udivmoddi4+0x154>
 80a3f2c:	1a8d      	subs	r5, r1, r2
 80a3f2e:	2101      	movs	r1, #1
 80a3f30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3f34:	fa1f f882 	uxth.w	r8, r2
 80a3f38:	fbb5 fcfe 	udiv	ip, r5, lr
 80a3f3c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3f40:	fb08 f00c 	mul.w	r0, r8, ip
 80a3f44:	0c22      	lsrs	r2, r4, #16
 80a3f46:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a3f4a:	42a8      	cmp	r0, r5
 80a3f4c:	d907      	bls.n	80a3f5e <__udivmoddi4+0xe6>
 80a3f4e:	197d      	adds	r5, r7, r5
 80a3f50:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80a3f54:	d202      	bcs.n	80a3f5c <__udivmoddi4+0xe4>
 80a3f56:	42a8      	cmp	r0, r5
 80a3f58:	f200 80e9 	bhi.w	80a412e <__udivmoddi4+0x2b6>
 80a3f5c:	4694      	mov	ip, r2
 80a3f5e:	1a2d      	subs	r5, r5, r0
 80a3f60:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3f64:	fb0e 5510 	mls	r5, lr, r0, r5
 80a3f68:	fb08 f800 	mul.w	r8, r8, r0
 80a3f6c:	b2a4      	uxth	r4, r4
 80a3f6e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3f72:	45a0      	cmp	r8, r4
 80a3f74:	d907      	bls.n	80a3f86 <__udivmoddi4+0x10e>
 80a3f76:	193c      	adds	r4, r7, r4
 80a3f78:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3f7c:	d202      	bcs.n	80a3f84 <__udivmoddi4+0x10c>
 80a3f7e:	45a0      	cmp	r8, r4
 80a3f80:	f200 80d9 	bhi.w	80a4136 <__udivmoddi4+0x2be>
 80a3f84:	4610      	mov	r0, r2
 80a3f86:	eba4 0408 	sub.w	r4, r4, r8
 80a3f8a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3f8e:	e7c0      	b.n	80a3f12 <__udivmoddi4+0x9a>
 80a3f90:	428b      	cmp	r3, r1
 80a3f92:	d908      	bls.n	80a3fa6 <__udivmoddi4+0x12e>
 80a3f94:	2e00      	cmp	r6, #0
 80a3f96:	f000 80b1 	beq.w	80a40fc <__udivmoddi4+0x284>
 80a3f9a:	2100      	movs	r1, #0
 80a3f9c:	e9c6 0500 	strd	r0, r5, [r6]
 80a3fa0:	4608      	mov	r0, r1
 80a3fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3fa6:	fab3 f183 	clz	r1, r3
 80a3faa:	2900      	cmp	r1, #0
 80a3fac:	d14b      	bne.n	80a4046 <__udivmoddi4+0x1ce>
 80a3fae:	42ab      	cmp	r3, r5
 80a3fb0:	d302      	bcc.n	80a3fb8 <__udivmoddi4+0x140>
 80a3fb2:	4282      	cmp	r2, r0
 80a3fb4:	f200 80b9 	bhi.w	80a412a <__udivmoddi4+0x2b2>
 80a3fb8:	1a84      	subs	r4, r0, r2
 80a3fba:	eb65 0303 	sbc.w	r3, r5, r3
 80a3fbe:	2001      	movs	r0, #1
 80a3fc0:	469e      	mov	lr, r3
 80a3fc2:	2e00      	cmp	r6, #0
 80a3fc4:	d0aa      	beq.n	80a3f1c <__udivmoddi4+0xa4>
 80a3fc6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a3fca:	e7a7      	b.n	80a3f1c <__udivmoddi4+0xa4>
 80a3fcc:	409f      	lsls	r7, r3
 80a3fce:	f1c3 0220 	rsb	r2, r3, #32
 80a3fd2:	40d1      	lsrs	r1, r2
 80a3fd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a3fd8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a3fdc:	fa1f f887 	uxth.w	r8, r7
 80a3fe0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3fe4:	fa24 f202 	lsr.w	r2, r4, r2
 80a3fe8:	409d      	lsls	r5, r3
 80a3fea:	fb00 fc08 	mul.w	ip, r0, r8
 80a3fee:	432a      	orrs	r2, r5
 80a3ff0:	0c15      	lsrs	r5, r2, #16
 80a3ff2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a3ff6:	45ac      	cmp	ip, r5
 80a3ff8:	fa04 f403 	lsl.w	r4, r4, r3
 80a3ffc:	d909      	bls.n	80a4012 <__udivmoddi4+0x19a>
 80a3ffe:	197d      	adds	r5, r7, r5
 80a4000:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a4004:	f080 808f 	bcs.w	80a4126 <__udivmoddi4+0x2ae>
 80a4008:	45ac      	cmp	ip, r5
 80a400a:	f240 808c 	bls.w	80a4126 <__udivmoddi4+0x2ae>
 80a400e:	3802      	subs	r0, #2
 80a4010:	443d      	add	r5, r7
 80a4012:	eba5 050c 	sub.w	r5, r5, ip
 80a4016:	fbb5 f1fe 	udiv	r1, r5, lr
 80a401a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a401e:	fb01 f908 	mul.w	r9, r1, r8
 80a4022:	b295      	uxth	r5, r2
 80a4024:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a4028:	45a9      	cmp	r9, r5
 80a402a:	d907      	bls.n	80a403c <__udivmoddi4+0x1c4>
 80a402c:	197d      	adds	r5, r7, r5
 80a402e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80a4032:	d274      	bcs.n	80a411e <__udivmoddi4+0x2a6>
 80a4034:	45a9      	cmp	r9, r5
 80a4036:	d972      	bls.n	80a411e <__udivmoddi4+0x2a6>
 80a4038:	3902      	subs	r1, #2
 80a403a:	443d      	add	r5, r7
 80a403c:	eba5 0509 	sub.w	r5, r5, r9
 80a4040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a4044:	e778      	b.n	80a3f38 <__udivmoddi4+0xc0>
 80a4046:	f1c1 0720 	rsb	r7, r1, #32
 80a404a:	408b      	lsls	r3, r1
 80a404c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4050:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4054:	fa25 f407 	lsr.w	r4, r5, r7
 80a4058:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a405c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a4060:	fa1f f88c 	uxth.w	r8, ip
 80a4064:	fb0e 4419 	mls	r4, lr, r9, r4
 80a4068:	fa20 f307 	lsr.w	r3, r0, r7
 80a406c:	fb09 fa08 	mul.w	sl, r9, r8
 80a4070:	408d      	lsls	r5, r1
 80a4072:	431d      	orrs	r5, r3
 80a4074:	0c2b      	lsrs	r3, r5, #16
 80a4076:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a407a:	45a2      	cmp	sl, r4
 80a407c:	fa02 f201 	lsl.w	r2, r2, r1
 80a4080:	fa00 f301 	lsl.w	r3, r0, r1
 80a4084:	d909      	bls.n	80a409a <__udivmoddi4+0x222>
 80a4086:	eb1c 0404 	adds.w	r4, ip, r4
 80a408a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a408e:	d248      	bcs.n	80a4122 <__udivmoddi4+0x2aa>
 80a4090:	45a2      	cmp	sl, r4
 80a4092:	d946      	bls.n	80a4122 <__udivmoddi4+0x2aa>
 80a4094:	f1a9 0902 	sub.w	r9, r9, #2
 80a4098:	4464      	add	r4, ip
 80a409a:	eba4 040a 	sub.w	r4, r4, sl
 80a409e:	fbb4 f0fe 	udiv	r0, r4, lr
 80a40a2:	fb0e 4410 	mls	r4, lr, r0, r4
 80a40a6:	fb00 fa08 	mul.w	sl, r0, r8
 80a40aa:	b2ad      	uxth	r5, r5
 80a40ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a40b0:	45a2      	cmp	sl, r4
 80a40b2:	d908      	bls.n	80a40c6 <__udivmoddi4+0x24e>
 80a40b4:	eb1c 0404 	adds.w	r4, ip, r4
 80a40b8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a40bc:	d22d      	bcs.n	80a411a <__udivmoddi4+0x2a2>
 80a40be:	45a2      	cmp	sl, r4
 80a40c0:	d92b      	bls.n	80a411a <__udivmoddi4+0x2a2>
 80a40c2:	3802      	subs	r0, #2
 80a40c4:	4464      	add	r4, ip
 80a40c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a40ca:	fba0 8902 	umull	r8, r9, r0, r2
 80a40ce:	eba4 040a 	sub.w	r4, r4, sl
 80a40d2:	454c      	cmp	r4, r9
 80a40d4:	46c6      	mov	lr, r8
 80a40d6:	464d      	mov	r5, r9
 80a40d8:	d319      	bcc.n	80a410e <__udivmoddi4+0x296>
 80a40da:	d016      	beq.n	80a410a <__udivmoddi4+0x292>
 80a40dc:	b15e      	cbz	r6, 80a40f6 <__udivmoddi4+0x27e>
 80a40de:	ebb3 020e 	subs.w	r2, r3, lr
 80a40e2:	eb64 0405 	sbc.w	r4, r4, r5
 80a40e6:	fa04 f707 	lsl.w	r7, r4, r7
 80a40ea:	fa22 f301 	lsr.w	r3, r2, r1
 80a40ee:	431f      	orrs	r7, r3
 80a40f0:	40cc      	lsrs	r4, r1
 80a40f2:	e9c6 7400 	strd	r7, r4, [r6]
 80a40f6:	2100      	movs	r1, #0
 80a40f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a40fc:	4631      	mov	r1, r6
 80a40fe:	4630      	mov	r0, r6
 80a4100:	e70c      	b.n	80a3f1c <__udivmoddi4+0xa4>
 80a4102:	468c      	mov	ip, r1
 80a4104:	e6eb      	b.n	80a3ede <__udivmoddi4+0x66>
 80a4106:	4610      	mov	r0, r2
 80a4108:	e6ff      	b.n	80a3f0a <__udivmoddi4+0x92>
 80a410a:	4543      	cmp	r3, r8
 80a410c:	d2e6      	bcs.n	80a40dc <__udivmoddi4+0x264>
 80a410e:	ebb8 0e02 	subs.w	lr, r8, r2
 80a4112:	eb69 050c 	sbc.w	r5, r9, ip
 80a4116:	3801      	subs	r0, #1
 80a4118:	e7e0      	b.n	80a40dc <__udivmoddi4+0x264>
 80a411a:	4628      	mov	r0, r5
 80a411c:	e7d3      	b.n	80a40c6 <__udivmoddi4+0x24e>
 80a411e:	4611      	mov	r1, r2
 80a4120:	e78c      	b.n	80a403c <__udivmoddi4+0x1c4>
 80a4122:	4681      	mov	r9, r0
 80a4124:	e7b9      	b.n	80a409a <__udivmoddi4+0x222>
 80a4126:	4608      	mov	r0, r1
 80a4128:	e773      	b.n	80a4012 <__udivmoddi4+0x19a>
 80a412a:	4608      	mov	r0, r1
 80a412c:	e749      	b.n	80a3fc2 <__udivmoddi4+0x14a>
 80a412e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4132:	443d      	add	r5, r7
 80a4134:	e713      	b.n	80a3f5e <__udivmoddi4+0xe6>
 80a4136:	3802      	subs	r0, #2
 80a4138:	443c      	add	r4, r7
 80a413a:	e724      	b.n	80a3f86 <__udivmoddi4+0x10e>

080a413c <__aeabi_idiv0>:
 80a413c:	4770      	bx	lr
 80a413e:	bf00      	nop

080a4140 <atexit>:
 80a4140:	2300      	movs	r3, #0
 80a4142:	4601      	mov	r1, r0
 80a4144:	461a      	mov	r2, r3
 80a4146:	4618      	mov	r0, r3
 80a4148:	f000 b868 	b.w	80a421c <__register_exitproc>

080a414c <ldiv>:
 80a414c:	b510      	push	{r4, lr}
 80a414e:	fb91 f4f2 	sdiv	r4, r1, r2
 80a4152:	2900      	cmp	r1, #0
 80a4154:	fb02 1314 	mls	r3, r2, r4, r1
 80a4158:	db06      	blt.n	80a4168 <ldiv+0x1c>
 80a415a:	2b00      	cmp	r3, #0
 80a415c:	da01      	bge.n	80a4162 <ldiv+0x16>
 80a415e:	3401      	adds	r4, #1
 80a4160:	1a9b      	subs	r3, r3, r2
 80a4162:	e9c0 4300 	strd	r4, r3, [r0]
 80a4166:	bd10      	pop	{r4, pc}
 80a4168:	2b00      	cmp	r3, #0
 80a416a:	bfc4      	itt	gt
 80a416c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a4170:	189b      	addgt	r3, r3, r2
 80a4172:	e7f6      	b.n	80a4162 <ldiv+0x16>

080a4174 <memcpy>:
 80a4174:	440a      	add	r2, r1
 80a4176:	4291      	cmp	r1, r2
 80a4178:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a417c:	d100      	bne.n	80a4180 <memcpy+0xc>
 80a417e:	4770      	bx	lr
 80a4180:	b510      	push	{r4, lr}
 80a4182:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4186:	4291      	cmp	r1, r2
 80a4188:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a418c:	d1f9      	bne.n	80a4182 <memcpy+0xe>
 80a418e:	bd10      	pop	{r4, pc}

080a4190 <memset>:
 80a4190:	4603      	mov	r3, r0
 80a4192:	4402      	add	r2, r0
 80a4194:	4293      	cmp	r3, r2
 80a4196:	d100      	bne.n	80a419a <memset+0xa>
 80a4198:	4770      	bx	lr
 80a419a:	f803 1b01 	strb.w	r1, [r3], #1
 80a419e:	e7f9      	b.n	80a4194 <memset+0x4>

080a41a0 <srand>:
 80a41a0:	b538      	push	{r3, r4, r5, lr}
 80a41a2:	4b0d      	ldr	r3, [pc, #52]	; (80a41d8 <srand+0x38>)
 80a41a4:	4604      	mov	r4, r0
 80a41a6:	681d      	ldr	r5, [r3, #0]
 80a41a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a41aa:	b97b      	cbnz	r3, 80a41cc <srand+0x2c>
 80a41ac:	2018      	movs	r0, #24
 80a41ae:	f7fd fc1d 	bl	80a19ec <malloc>
 80a41b2:	4a0a      	ldr	r2, [pc, #40]	; (80a41dc <srand+0x3c>)
 80a41b4:	4b0a      	ldr	r3, [pc, #40]	; (80a41e0 <srand+0x40>)
 80a41b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a41b8:	e9c0 2300 	strd	r2, r3, [r0]
 80a41bc:	4b09      	ldr	r3, [pc, #36]	; (80a41e4 <srand+0x44>)
 80a41be:	2201      	movs	r2, #1
 80a41c0:	6083      	str	r3, [r0, #8]
 80a41c2:	230b      	movs	r3, #11
 80a41c4:	8183      	strh	r3, [r0, #12]
 80a41c6:	2300      	movs	r3, #0
 80a41c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a41cc:	2200      	movs	r2, #0
 80a41ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a41d0:	611c      	str	r4, [r3, #16]
 80a41d2:	615a      	str	r2, [r3, #20]
 80a41d4:	bd38      	pop	{r3, r4, r5, pc}
 80a41d6:	bf00      	nop
 80a41d8:	2000002c 	.word	0x2000002c
 80a41dc:	abcd330e 	.word	0xabcd330e
 80a41e0:	e66d1234 	.word	0xe66d1234
 80a41e4:	0005deec 	.word	0x0005deec

080a41e8 <strcmp>:
 80a41e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a41ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a41f0:	2a01      	cmp	r2, #1
 80a41f2:	bf28      	it	cs
 80a41f4:	429a      	cmpcs	r2, r3
 80a41f6:	d0f7      	beq.n	80a41e8 <strcmp>
 80a41f8:	1ad0      	subs	r0, r2, r3
 80a41fa:	4770      	bx	lr

080a41fc <strcpy>:
 80a41fc:	4603      	mov	r3, r0
 80a41fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4202:	f803 2b01 	strb.w	r2, [r3], #1
 80a4206:	2a00      	cmp	r2, #0
 80a4208:	d1f9      	bne.n	80a41fe <strcpy+0x2>
 80a420a:	4770      	bx	lr

080a420c <strlen>:
 80a420c:	4603      	mov	r3, r0
 80a420e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4212:	2a00      	cmp	r2, #0
 80a4214:	d1fb      	bne.n	80a420e <strlen+0x2>
 80a4216:	1a18      	subs	r0, r3, r0
 80a4218:	3801      	subs	r0, #1
 80a421a:	4770      	bx	lr

080a421c <__register_exitproc>:
 80a421c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4220:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a42e0 <__register_exitproc+0xc4>
 80a4224:	4606      	mov	r6, r0
 80a4226:	f8d8 0000 	ldr.w	r0, [r8]
 80a422a:	461f      	mov	r7, r3
 80a422c:	460d      	mov	r5, r1
 80a422e:	4691      	mov	r9, r2
 80a4230:	f000 f858 	bl	80a42e4 <__retarget_lock_acquire_recursive>
 80a4234:	4b26      	ldr	r3, [pc, #152]	; (80a42d0 <__register_exitproc+0xb4>)
 80a4236:	681c      	ldr	r4, [r3, #0]
 80a4238:	b934      	cbnz	r4, 80a4248 <__register_exitproc+0x2c>
 80a423a:	4c26      	ldr	r4, [pc, #152]	; (80a42d4 <__register_exitproc+0xb8>)
 80a423c:	601c      	str	r4, [r3, #0]
 80a423e:	4b26      	ldr	r3, [pc, #152]	; (80a42d8 <__register_exitproc+0xbc>)
 80a4240:	b113      	cbz	r3, 80a4248 <__register_exitproc+0x2c>
 80a4242:	681b      	ldr	r3, [r3, #0]
 80a4244:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a4248:	6863      	ldr	r3, [r4, #4]
 80a424a:	2b1f      	cmp	r3, #31
 80a424c:	dd07      	ble.n	80a425e <__register_exitproc+0x42>
 80a424e:	f8d8 0000 	ldr.w	r0, [r8]
 80a4252:	f000 f849 	bl	80a42e8 <__retarget_lock_release_recursive>
 80a4256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a425e:	b35e      	cbz	r6, 80a42b8 <__register_exitproc+0x9c>
 80a4260:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a4264:	b988      	cbnz	r0, 80a428a <__register_exitproc+0x6e>
 80a4266:	4b1d      	ldr	r3, [pc, #116]	; (80a42dc <__register_exitproc+0xc0>)
 80a4268:	b923      	cbnz	r3, 80a4274 <__register_exitproc+0x58>
 80a426a:	f8d8 0000 	ldr.w	r0, [r8]
 80a426e:	f000 f83a 	bl	80a42e6 <__retarget_lock_release>
 80a4272:	e7f0      	b.n	80a4256 <__register_exitproc+0x3a>
 80a4274:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a4278:	f7fd fbb8 	bl	80a19ec <malloc>
 80a427c:	2800      	cmp	r0, #0
 80a427e:	d0f4      	beq.n	80a426a <__register_exitproc+0x4e>
 80a4280:	2300      	movs	r3, #0
 80a4282:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a4286:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a428a:	2201      	movs	r2, #1
 80a428c:	6863      	ldr	r3, [r4, #4]
 80a428e:	2e02      	cmp	r6, #2
 80a4290:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a4294:	fa02 f203 	lsl.w	r2, r2, r3
 80a4298:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a429c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a42a0:	ea43 0302 	orr.w	r3, r3, r2
 80a42a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a42a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a42ac:	bf02      	ittt	eq
 80a42ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a42b2:	431a      	orreq	r2, r3
 80a42b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a42b8:	6863      	ldr	r3, [r4, #4]
 80a42ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a42be:	1c5a      	adds	r2, r3, #1
 80a42c0:	3302      	adds	r3, #2
 80a42c2:	6062      	str	r2, [r4, #4]
 80a42c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a42c8:	f000 f80e 	bl	80a42e8 <__retarget_lock_release_recursive>
 80a42cc:	2000      	movs	r0, #0
 80a42ce:	e7c4      	b.n	80a425a <__register_exitproc+0x3e>
 80a42d0:	200006f8 	.word	0x200006f8
 80a42d4:	2000066c 	.word	0x2000066c
 80a42d8:	00000000 	.word	0x00000000
 80a42dc:	080a19ed 	.word	0x080a19ed
 80a42e0:	20000090 	.word	0x20000090

080a42e4 <__retarget_lock_acquire_recursive>:
 80a42e4:	4770      	bx	lr

080a42e6 <__retarget_lock_release>:
 80a42e6:	4770      	bx	lr

080a42e8 <__retarget_lock_release_recursive>:
 80a42e8:	4770      	bx	lr

080a42ea <link_code_end>:
	...

080a42ec <dynalib_user>:
 80a42ec:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a42fc:	0000 0000 7277 7369 2f74 6162 7474 612f     ....wrist/batt/a
 80a430c:	6b73 2c00 7700 6972 7473 622f 7461 2f74     sk.,.wrist/batt/
 80a431c:	6573 736e 726f 0073 6146 6c69 6465 7420     sensors.Failed t
 80a432c:	206f 6f62 746f 6620 7269 7473 5620 364c     o boot first VL6
 80a433c:	3831 5830 4600 6961 656c 2064 6f74 6220     180X.Failed to b
 80a434c:	6f6f 2074 6573 6f63 646e 5620 364c 3831     oot second VL618
 80a435c:	5830 4600 6961 656c 2064 6f74 6220 6f6f     0X.Failed to boo
 80a436c:	2074 6874 7269 2064 4c56 3136 3038 0058     t third VL6180X.
 80a437c:	6146 6c69 6465 7420 206f 6f62 746f 6620     Failed to boot f
 80a438c:	756f 7472 2068 4c56 3136 3038 0058 6146     ourth VL6180X.Fa
 80a439c:	6c69 6465 7420 206f 6f62 746f 6620 6669     iled to boot fif
 80a43ac:	6874 5620 364c 3831 5830 4600 6961 656c     th VL6180X.Faile
 80a43bc:	2064 6f74 6220 6f6f 2074 6973 7478 2068     d to boot sixth 
 80a43cc:	4c56 3136 3038 0058 6146 6c69 6465 7420     VL6180X.Failed t
 80a43dc:	206f 6f62 746f 7320 7665 6e65 6874 5620     o boot seventh V
 80a43ec:	364c 3831 5830 4600 6961 656c 2064 6f74     L6180X.Failed to
 80a43fc:	6220 6f6f 2074 6965 7467 2068 4c56 3136      boot eigth VL61
 80a440c:	3038 0058 6146 6c69 6465 7420 206f 6f62     80X.Failed to bo
 80a441c:	746f 6e20 6e69 6874 5620 364c 3831 5830     ot ninth VL6180X
 80a442c:	4600 6961 656c 2064 6f74 6220 6f6f 2074     .Failed to boot 
 80a443c:	6574 746e 2068 4c56 3136 3038 0058 6f43     tenth VL6180X.Co
 80a444c:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
 80a445c:	6820 736f 2e74 2e2e 7700 6972 7473 772d      host....wrist-w
 80a446c:	7461 6863 5300 7568 6474 776f 206e 6970     atch.Shutdown pi
 80a447c:	736e 6920 696e 6574 2e64 2e2e 5300 6174     ns inited....Sta
 80a448c:	7472 6e69 2e67 2e2e 5200 6165 7964 0021     rting....Ready!.
 80a449c:	7277 7369 2f74 6164 6174 732f 6e65 6f73     wrist/data/senso
 80a44ac:	7372 6d00 7471 2e74 6365 696c 7370 7065     rs.mqtt.eclipsep
 80a44bc:	6f72 656a 7463 2e73 6f69 0000 4d04 5451     rojects.io...MQT
 80a44cc:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

080a44d8 <_ZTV7TwoWire>:
	...
 80a44e0:	1a33 080a 1a7d 080a 1a55 080a 1a35 080a     3...}...U...5...
 80a44f0:	1a5d 080a 1a65 080a 1a6d 080a 1a75 080a     ]...e...m...u...

080a4500 <_ZTV9IPAddress>:
	...
 80a4508:	1b41 080a 1b31 080a 1b33 080a 7061 0070     A...1...3...app.

080a4518 <_ZTVN5spark12NetworkClassE>:
	...
 80a4520:	1c31 080a 1c3b 080a 1c45 080a 1c4f 080a     1...;...E...O...
 80a4530:	1c59 080a 1c65 080a 1c71 080a 1c79 080a     Y...e...q...y...
 80a4540:	1c81 080a 1c8d 080a 1c95 080a 1c9f 080a     ................
 80a4550:	1ca9 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a4560:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a4570 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4578:	2129 080a 2151 080a 2573 080a 215f 080a     )!..Q!..s%.._!..
 80a4588:	212d 080a                                   -!..

080a458c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a4594 <_ZTV9TCPClient>:
	...
 80a459c:	2165 080a 2199 080a 20e5 080a 20ff 080a     e!...!... ... ..
 80a45ac:	2375 080a 21fb 080a 21cd 080a 2127 080a     u#...!...!..'!..
 80a45bc:	2295 080a 2579 080a 222f 080a 23e9 080a     ."..y%../"...#..
 80a45cc:	2497 080a 244f 080a 210f 080a 245d 080a     .$..O$...!..]$..
 80a45dc:	21ad 080a 5925 252d 2d6d 6425 2554 3a48     .!..%Y-%m-%dT%H:
 80a45ec:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a45fc <_ZTV11USARTSerial>:
	...
 80a4604:	266d 080a 26d7 080a 26b3 080a 1d25 080a     m&...&...&..%...
 80a4614:	2683 080a 269f 080a 2691 080a 26ad 080a     .&...&...&...&..
 80a4624:	266f 080a 2675 080a                         o&..u&..

080a462c <_ZTV9USBSerial>:
	...
 80a4634:	275f 080a 27c5 080a 279d 080a 1d25 080a     _'...'...'..%...
 80a4644:	278f 080a 2761 080a 2771 080a 27bf 080a     .'..a'..q'...'..
 80a4654:	2781 080a 2759 080a                         .'..Y'..

080a465c <_ZTVN5spark9WiFiClassE>:
	...
 80a4664:	299b 080a 2991 080a 2987 080a 28f9 080a     .)...)...)...(..
 80a4674:	297b 080a 296f 080a 1c71 080a 1c79 080a     {)..o)..q...y...
 80a4684:	2963 080a 295b 080a 2951 080a 2947 080a     c)..[)..Q)..G)..
 80a4694:	2903 080a                                   .)..

080a4698 <_ZSt7nothrow>:
	...

080a4699 <_ZTSSt19_Sp_make_shared_tag>:
 80a4699:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a46a9:	6572 5f64 6174 0067 0000                     red_tag....

080a46b4 <_ZTISt19_Sp_make_shared_tag>:
 80a46b4:	46f4 080a 4699 080a                         .F...F..

080a46bc <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a46bc:	4754 080a 46c8 080a 4778 080a               TG...F..xG..

080a46c8 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a46c8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a46d8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a46e8:	0045 0000                                   E...

080a46ec <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a46ec:	0000 0000 46bc 080a 2de9 080a 2dfd 080a     .....F...-...-..
 80a46fc:	2f95 080a 2f95 080a 2e67 080a 2da9 080a     ./.../..g....-..
 80a470c:	2e4f 080a 2e11 080a 2ddd 080a               O........-..

080a4718 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a4718:	4754 080a 4724 080a 46bc 080a               TG..$G...F..

080a4724 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a4724:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a4734:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a4744:	666e 456f 0000 0000                         nfoE....

080a474c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a474c:	0000 0000 4718 080a 2e91 080a 2ea5 080a     .....G..........
 80a475c:	2f95 080a 2f95 080a 2e67 080a 2da9 080a     ./.../..g....-..
 80a476c:	2f69 080a 2ef5 080a 2eb9 080a               i/..........

080a4778 <_ZTISt9type_info>:
 80a4778:	46f4 080a 4780 080a                         .F...G..

080a4780 <_ZTSSt9type_info>:
 80a4780:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a478d <link_const_variable_data_end>:
 80a478d:	00          	.byte	0x00
	...

080a4790 <link_constructors_location>:
 80a4790:	080a0ac5 	.word	0x080a0ac5
 80a4794:	080a1c21 	.word	0x080a1c21
 80a4798:	080a1d11 	.word	0x080a1d11
 80a479c:	080a1de1 	.word	0x080a1de1
 80a47a0:	080a20c1 	.word	0x080a20c1
 80a47a4:	080a2659 	.word	0x080a2659
 80a47a8:	080a29a5 	.word	0x080a29a5
 80a47ac:	080a2d79 	.word	0x080a2d79
