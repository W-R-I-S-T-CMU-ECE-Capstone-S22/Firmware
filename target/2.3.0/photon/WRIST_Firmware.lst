
/Users/Edward/Desktop/WRIST_Firmware/WRIST_Firmware/target/2.3.0/photon/WRIST_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2e80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a2e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000620  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2efc  080a2efc  00022efc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2f24  080a2f24  00022f24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012e31d  00000000  00000000  00022f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015b58  00000000  00000000  00151245  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b7f1  00000000  00000000  00166d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002410  00000000  00000000  0018258e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005078  00000000  00000000  0018499e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a904  00000000  00000000  00189a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003050a  00000000  00000000  001b431a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b461d  00000000  00000000  001e4824  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005e64  00000000  00000000  00298e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fc77 	bl	80a2920 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fc7f 	bl	80a293c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2e84 	.word	0x080a2e84
 80a004c:	20000078 	.word	0x20000078
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000695 	.word	0x20000695
 80a0058:	20000695 	.word	0x20000695

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fa3b 	bl	80a24d8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2e58 	.word	0x080a2e58
 80a0080:	080a2e78 	.word	0x080a2e78

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 baf8 	b.w	80a0678 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fb85 	bl	80a0798 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b9d9 	b.w	80a2448 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 ba33 	b.w	80a1500 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 ba31 	b.w	80a1500 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 ba37 	b.w	80a1510 <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f001 ba35 	b.w	80a1510 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a00b6:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a00b8:	2200      	movs	r2, #0
 80a00ba:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a00bc:	2220      	movs	r2, #32
  _addr = addr;
 80a00be:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a00c0:	60c2      	str	r2, [r0, #12]
#endif
}
 80a00c2:	4770      	bx	lr

080a00c4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a00c4:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a00c6:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a00c8:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a00ca:	b153      	cbz	r3, 80a00e2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a00cc:	7821      	ldrb	r1, [r4, #0]
 80a00ce:	6860      	ldr	r0, [r4, #4]
 80a00d0:	f001 faa7 	bl	80a1622 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a00d4:	6860      	ldr	r0, [r4, #4]
 80a00d6:	f001 faac 	bl	80a1632 <_ZN7TwoWire15endTransmissionEv>
 80a00da:	fab0 f080 	clz	r0, r0
 80a00de:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a00e0:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	f000 f803 	bl	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>
 80a00e8:	2800      	cmp	r0, #0
 80a00ea:	d1ef      	bne.n	80a00cc <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a00ec:	e7f8      	b.n	80a00e0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a00ee <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00ee:	b538      	push	{r3, r4, r5, lr}
 80a00f0:	4604      	mov	r4, r0
  _wire->begin();
 80a00f2:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00f4:	460d      	mov	r5, r1
  _wire->begin();
 80a00f6:	f001 fa65 	bl	80a15c4 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a00fa:	2001      	movs	r0, #1
 80a00fc:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a00fe:	b125      	cbz	r5, 80a010a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a0100:	4620      	mov	r0, r4
}
 80a0102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a0106:	f7ff bfdd 	b.w	80a00c4 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a010a:	bd38      	pop	{r3, r4, r5, pc}

080a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a010c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0110:	461f      	mov	r7, r3
 80a0112:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a0116:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a0118:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a011a:	4432      	add	r2, r6
 80a011c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a011e:	4604      	mov	r4, r0
 80a0120:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a0122:	d902      	bls.n	80a012a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0124:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 80a0126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a012a:	7801      	ldrb	r1, [r0, #0]
 80a012c:	6840      	ldr	r0, [r0, #4]
 80a012e:	f001 fa78 	bl	80a1622 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0132:	b97e      	cbnz	r6, 80a0154 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a0134:	6860      	ldr	r0, [r4, #4]
 80a0136:	462a      	mov	r2, r5
 80a0138:	6803      	ldr	r3, [r0, #0]
 80a013a:	4641      	mov	r1, r8
 80a013c:	68db      	ldr	r3, [r3, #12]
 80a013e:	4798      	blx	r3
 80a0140:	4285      	cmp	r5, r0
 80a0142:	d1ef      	bne.n	80a0124 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a0144:	4639      	mov	r1, r7
 80a0146:	6860      	ldr	r0, [r4, #4]
 80a0148:	f001 fa6f 	bl	80a162a <_ZN7TwoWire15endTransmissionEh>
 80a014c:	fab0 f080 	clz	r0, r0
 80a0150:	0940      	lsrs	r0, r0, #5
 80a0152:	e7e8      	b.n	80a0126 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0154:	f1b9 0f00 	cmp.w	r9, #0
 80a0158:	d0ec      	beq.n	80a0134 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a015a:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a015c:	4632      	mov	r2, r6
 80a015e:	6803      	ldr	r3, [r0, #0]
 80a0160:	4649      	mov	r1, r9
 80a0162:	68db      	ldr	r3, [r3, #12]
 80a0164:	4798      	blx	r3
 80a0166:	42b0      	cmp	r0, r6
 80a0168:	d1dc      	bne.n	80a0124 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a016a:	e7e3      	b.n	80a0134 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a016c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0170:	4615      	mov	r5, r2
 80a0172:	4604      	mov	r4, r0
 80a0174:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a0176:	b2d2      	uxtb	r2, r2
 80a0178:	7801      	ldrb	r1, [r0, #0]
 80a017a:	6840      	ldr	r0, [r0, #4]
 80a017c:	f001 fa3f 	bl	80a15fe <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a0180:	4285      	cmp	r5, r0
 80a0182:	d10d      	bne.n	80a01a0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a0184:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a0186:	fa1f f887 	uxth.w	r8, r7
 80a018a:	45a8      	cmp	r8, r5
 80a018c:	f107 0701 	add.w	r7, r7, #1
 80a0190:	d209      	bcs.n	80a01a6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a0192:	6860      	ldr	r0, [r4, #4]
 80a0194:	6803      	ldr	r3, [r0, #0]
 80a0196:	695b      	ldr	r3, [r3, #20]
 80a0198:	4798      	blx	r3
 80a019a:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a019e:	e7f2      	b.n	80a0186 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a01a0:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a01a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01a6:	2001      	movs	r0, #1
 80a01a8:	e7fb      	b.n	80a01a2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a01aa <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a01aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01ae:	4607      	mov	r7, r0
 80a01b0:	4688      	mov	r8, r1
 80a01b2:	4616      	mov	r6, r2
 80a01b4:	4699      	mov	r9, r3
  size_t pos = 0;
 80a01b6:	2500      	movs	r5, #0
  while (pos < len) {
 80a01b8:	42b5      	cmp	r5, r6
 80a01ba:	d212      	bcs.n	80a01e2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a01bc:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a01be:	1b74      	subs	r4, r6, r5
 80a01c0:	4294      	cmp	r4, r2
 80a01c2:	bf28      	it	cs
 80a01c4:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a01c6:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a01c8:	42ab      	cmp	r3, r5
 80a01ca:	bf94      	ite	ls
 80a01cc:	464b      	movls	r3, r9
 80a01ce:	2300      	movhi	r3, #0
 80a01d0:	4622      	mov	r2, r4
 80a01d2:	4638      	mov	r0, r7
 80a01d4:	eb08 0105 	add.w	r1, r8, r5
 80a01d8:	f7ff ffc8 	bl	80a016c <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a01dc:	b110      	cbz	r0, 80a01e4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a01de:	4425      	add	r5, r4
  while (pos < len) {
 80a01e0:	e7ea      	b.n	80a01b8 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a01e2:	2001      	movs	r0, #1
}
 80a01e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a01e8 <_ZN16Adafruit_VL6180XC1Eh>:
    @brief  Instantiates a new VL6180X class
    @param  i2caddr Optional initial i2c address of the chip,
   VL6180X_DEFAULT_I2C_ADDR is used by default
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(uint8_t i2caddr) : _i2caddr(i2caddr) {}
 80a01e8:	2200      	movs	r2, #0
 80a01ea:	7201      	strb	r1, [r0, #8]
 80a01ec:	6002      	str	r2, [r0, #0]
 80a01ee:	4770      	bx	lr

080a01f0 <_ZN16Adafruit_VL6180X5read8Et>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  i2c_dev->write(buffer, 2);
 80a01f2:	2300      	movs	r3, #0
 80a01f4:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a01f8:	ba49      	rev16	r1, r1
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01fa:	4604      	mov	r4, r0
  buffer[0] = uint8_t(address >> 8);
 80a01fc:	f8ad 100c 	strh.w	r1, [sp, #12]
  i2c_dev->write(buffer, 2);
 80a0200:	2301      	movs	r3, #1
 80a0202:	a903      	add	r1, sp, #12
 80a0204:	2202      	movs	r2, #2
 80a0206:	6800      	ldr	r0, [r0, #0]
 80a0208:	f7ff ff80 	bl	80a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 80a020c:	2301      	movs	r3, #1
 80a020e:	6820      	ldr	r0, [r4, #0]
 80a0210:	461a      	mov	r2, r3
 80a0212:	a903      	add	r1, sp, #12
 80a0214:	f7ff ffc9 	bl	80a01aa <_ZN18Adafruit_I2CDevice4readEPhjb>
  return buffer[0];
}
 80a0218:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a021c:	b004      	add	sp, #16
 80a021e:	bd10      	pop	{r4, pc}

080a0220 <_ZN16Adafruit_VL6180X15readRangeStatusEv>:
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0220:	214d      	movs	r1, #77	; 0x4d
uint8_t Adafruit_VL6180X::readRangeStatus(void) {
 80a0222:	b508      	push	{r3, lr}
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0224:	f7ff ffe4 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
}
 80a0228:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80a022c:	bd08      	pop	{r3, pc}

080a022e <_ZN16Adafruit_VL6180X6write8Eth>:
  i2c_dev->read(buffer, 2);
  return uint16_t(buffer[0]) << 8 | uint16_t(buffer[1]);
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data) {
 80a022e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[3];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  buffer[2] = data;
  i2c_dev->write(buffer, 3);
 80a0230:	2300      	movs	r3, #0
 80a0232:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a0236:	ba49      	rev16	r1, r1
 80a0238:	f8ad 100c 	strh.w	r1, [sp, #12]
  buffer[2] = data;
 80a023c:	f88d 200e 	strb.w	r2, [sp, #14]
  i2c_dev->write(buffer, 3);
 80a0240:	2301      	movs	r3, #1
 80a0242:	2203      	movs	r2, #3
 80a0244:	a903      	add	r1, sp, #12
 80a0246:	6800      	ldr	r0, [r0, #0]
 80a0248:	f7ff ff60 	bl	80a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a024c:	b005      	add	sp, #20
 80a024e:	f85d fb04 	ldr.w	pc, [sp], #4

080a0252 <_ZN16Adafruit_VL6180X10setAddressEh>:
boolean Adafruit_VL6180X::setAddress(uint8_t newAddr) {
 80a0252:	b538      	push	{r3, r4, r5, lr}
 80a0254:	4604      	mov	r4, r0
 80a0256:	460d      	mov	r5, r1
  write8(VL6180X_REG_SLAVE_DEVICE_ADDRESS, newAddr & 0x7F);
 80a0258:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a025c:	f240 2112 	movw	r1, #530	; 0x212
 80a0260:	f7ff ffe5 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  if (i2c_dev)
 80a0264:	6820      	ldr	r0, [r4, #0]
  _i2caddr = newAddr;
 80a0266:	7225      	strb	r5, [r4, #8]
  if (i2c_dev)
 80a0268:	b110      	cbz	r0, 80a0270 <_ZN16Adafruit_VL6180X10setAddressEh+0x1e>
    delete i2c_dev;
 80a026a:	2110      	movs	r1, #16
 80a026c:	f002 fa26 	bl	80a26bc <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0270:	2010      	movs	r0, #16
 80a0272:	f7ff ff10 	bl	80a0096 <_Znwj>
 80a0276:	4605      	mov	r5, r0
 80a0278:	b118      	cbz	r0, 80a0282 <_ZN16Adafruit_VL6180X10setAddressEh+0x30>
 80a027a:	6862      	ldr	r2, [r4, #4]
 80a027c:	7a21      	ldrb	r1, [r4, #8]
 80a027e:	f7ff ff1a 	bl	80a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return i2c_dev->begin();
 80a0282:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0284:	6025      	str	r5, [r4, #0]
  return i2c_dev->begin();
 80a0286:	2101      	movs	r1, #1
}
 80a0288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return i2c_dev->begin();
 80a028c:	f7ff bf2f 	b.w	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>

080a0290 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
 80a0290:	b510      	push	{r4, lr}
 80a0292:	4604      	mov	r4, r0
  write8(0x0207, 0x01);
 80a0294:	2201      	movs	r2, #1
 80a0296:	f240 2107 	movw	r1, #519	; 0x207
 80a029a:	f7ff ffc8 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0208, 0x01);
 80a029e:	4620      	mov	r0, r4
 80a02a0:	2201      	movs	r2, #1
 80a02a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80a02a6:	f7ff ffc2 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0096, 0x00);
 80a02aa:	4620      	mov	r0, r4
 80a02ac:	2200      	movs	r2, #0
 80a02ae:	2196      	movs	r1, #150	; 0x96
 80a02b0:	f7ff ffbd 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0097, 0xfd);
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	22fd      	movs	r2, #253	; 0xfd
 80a02b8:	2197      	movs	r1, #151	; 0x97
 80a02ba:	f7ff ffb8 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e3, 0x00);
 80a02be:	4620      	mov	r0, r4
 80a02c0:	2200      	movs	r2, #0
 80a02c2:	21e3      	movs	r1, #227	; 0xe3
 80a02c4:	f7ff ffb3 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e4, 0x04);
 80a02c8:	4620      	mov	r0, r4
 80a02ca:	2204      	movs	r2, #4
 80a02cc:	21e4      	movs	r1, #228	; 0xe4
 80a02ce:	f7ff ffae 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e5, 0x02);
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	2202      	movs	r2, #2
 80a02d6:	21e5      	movs	r1, #229	; 0xe5
 80a02d8:	f7ff ffa9 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e6, 0x01);
 80a02dc:	4620      	mov	r0, r4
 80a02de:	2201      	movs	r2, #1
 80a02e0:	21e6      	movs	r1, #230	; 0xe6
 80a02e2:	f7ff ffa4 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e7, 0x03);
 80a02e6:	4620      	mov	r0, r4
 80a02e8:	2203      	movs	r2, #3
 80a02ea:	21e7      	movs	r1, #231	; 0xe7
 80a02ec:	f7ff ff9f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00f5, 0x02);
 80a02f0:	4620      	mov	r0, r4
 80a02f2:	2202      	movs	r2, #2
 80a02f4:	21f5      	movs	r1, #245	; 0xf5
 80a02f6:	f7ff ff9a 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00d9, 0x05);
 80a02fa:	4620      	mov	r0, r4
 80a02fc:	2205      	movs	r2, #5
 80a02fe:	21d9      	movs	r1, #217	; 0xd9
 80a0300:	f7ff ff95 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00db, 0xce);
 80a0304:	4620      	mov	r0, r4
 80a0306:	22ce      	movs	r2, #206	; 0xce
 80a0308:	21db      	movs	r1, #219	; 0xdb
 80a030a:	f7ff ff90 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dc, 0x03);
 80a030e:	4620      	mov	r0, r4
 80a0310:	2203      	movs	r2, #3
 80a0312:	21dc      	movs	r1, #220	; 0xdc
 80a0314:	f7ff ff8b 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dd, 0xf8);
 80a0318:	4620      	mov	r0, r4
 80a031a:	22f8      	movs	r2, #248	; 0xf8
 80a031c:	21dd      	movs	r1, #221	; 0xdd
 80a031e:	f7ff ff86 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x009f, 0x00);
 80a0322:	4620      	mov	r0, r4
 80a0324:	2200      	movs	r2, #0
 80a0326:	219f      	movs	r1, #159	; 0x9f
 80a0328:	f7ff ff81 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00a3, 0x3c);
 80a032c:	4620      	mov	r0, r4
 80a032e:	223c      	movs	r2, #60	; 0x3c
 80a0330:	21a3      	movs	r1, #163	; 0xa3
 80a0332:	f7ff ff7c 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b7, 0x00);
 80a0336:	4620      	mov	r0, r4
 80a0338:	2200      	movs	r2, #0
 80a033a:	21b7      	movs	r1, #183	; 0xb7
 80a033c:	f7ff ff77 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00bb, 0x3c);
 80a0340:	4620      	mov	r0, r4
 80a0342:	223c      	movs	r2, #60	; 0x3c
 80a0344:	21bb      	movs	r1, #187	; 0xbb
 80a0346:	f7ff ff72 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b2, 0x09);
 80a034a:	4620      	mov	r0, r4
 80a034c:	2209      	movs	r2, #9
 80a034e:	21b2      	movs	r1, #178	; 0xb2
 80a0350:	f7ff ff6d 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ca, 0x09);
 80a0354:	4620      	mov	r0, r4
 80a0356:	2209      	movs	r2, #9
 80a0358:	21ca      	movs	r1, #202	; 0xca
 80a035a:	f7ff ff68 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0198, 0x01);
 80a035e:	4620      	mov	r0, r4
 80a0360:	2201      	movs	r2, #1
 80a0362:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80a0366:	f7ff ff62 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01b0, 0x17);
 80a036a:	4620      	mov	r0, r4
 80a036c:	2217      	movs	r2, #23
 80a036e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80a0372:	f7ff ff5c 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ad, 0x00);
 80a0376:	4620      	mov	r0, r4
 80a0378:	2200      	movs	r2, #0
 80a037a:	f240 11ad 	movw	r1, #429	; 0x1ad
 80a037e:	f7ff ff56 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ff, 0x05);
 80a0382:	4620      	mov	r0, r4
 80a0384:	2205      	movs	r2, #5
 80a0386:	21ff      	movs	r1, #255	; 0xff
 80a0388:	f7ff ff51 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0100, 0x05);
 80a038c:	4620      	mov	r0, r4
 80a038e:	2205      	movs	r2, #5
 80a0390:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0394:	f7ff ff4b 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0199, 0x05);
 80a0398:	4620      	mov	r0, r4
 80a039a:	2205      	movs	r2, #5
 80a039c:	f240 1199 	movw	r1, #409	; 0x199
 80a03a0:	f7ff ff45 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a6, 0x1b);
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	221b      	movs	r2, #27
 80a03a8:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80a03ac:	f7ff ff3f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ac, 0x3e);
 80a03b0:	4620      	mov	r0, r4
 80a03b2:	223e      	movs	r2, #62	; 0x3e
 80a03b4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80a03b8:	f7ff ff39 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a7, 0x1f);
 80a03bc:	4620      	mov	r0, r4
 80a03be:	221f      	movs	r2, #31
 80a03c0:	f240 11a7 	movw	r1, #423	; 0x1a7
 80a03c4:	f7ff ff33 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0030, 0x00);
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	2200      	movs	r2, #0
 80a03cc:	2130      	movs	r1, #48	; 0x30
 80a03ce:	f7ff ff2e 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0011, 0x10); // Enables polling for 'New Sample ready'
 80a03d2:	4620      	mov	r0, r4
 80a03d4:	2210      	movs	r2, #16
 80a03d6:	2111      	movs	r1, #17
 80a03d8:	f7ff ff29 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x010a, 0x30); // Set the averaging sample period
 80a03dc:	4620      	mov	r0, r4
 80a03de:	2230      	movs	r2, #48	; 0x30
 80a03e0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80a03e4:	f7ff ff23 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003f, 0x46); // Sets the light and dark gain (upper
 80a03e8:	4620      	mov	r0, r4
 80a03ea:	2246      	movs	r2, #70	; 0x46
 80a03ec:	213f      	movs	r1, #63	; 0x3f
 80a03ee:	f7ff ff1e 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0031, 0xFF); // sets the # of range measurements after
 80a03f2:	4620      	mov	r0, r4
 80a03f4:	22ff      	movs	r2, #255	; 0xff
 80a03f6:	2131      	movs	r1, #49	; 0x31
 80a03f8:	f7ff ff19 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0041, 0x63); // Set ALS integration time to 100ms
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	2263      	movs	r2, #99	; 0x63
 80a0400:	2141      	movs	r1, #65	; 0x41
 80a0402:	f7ff ff14 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x002e, 0x01); // perform a single temperature calibration
 80a0406:	4620      	mov	r0, r4
 80a0408:	2201      	movs	r2, #1
 80a040a:	212e      	movs	r1, #46	; 0x2e
 80a040c:	f7ff ff0f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD,
 80a0410:	4620      	mov	r0, r4
 80a0412:	2209      	movs	r2, #9
 80a0414:	211b      	movs	r1, #27
 80a0416:	f7ff ff0a 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003e, 0x31); // Set default ALS inter-measurement period
 80a041a:	4620      	mov	r0, r4
 80a041c:	2231      	movs	r2, #49	; 0x31
 80a041e:	213e      	movs	r1, #62	; 0x3e
 80a0420:	f7ff ff05 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a0424:	4620      	mov	r0, r4
}
 80a0426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a042a:	2224      	movs	r2, #36	; 0x24
 80a042c:	2114      	movs	r1, #20
 80a042e:	f7ff befe 	b.w	80a022e <_ZN16Adafruit_VL6180X6write8Eth>

080a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
 80a0432:	b538      	push	{r3, r4, r5, lr}
 80a0434:	4604      	mov	r4, r0
  _i2c = theWire;
 80a0436:	6041      	str	r1, [r0, #4]
  if (i2c_dev)
 80a0438:	6800      	ldr	r0, [r0, #0]
 80a043a:	b110      	cbz	r0, 80a0442 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    delete i2c_dev;
 80a043c:	2110      	movs	r1, #16
 80a043e:	f002 f93d 	bl	80a26bc <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0442:	2010      	movs	r0, #16
 80a0444:	f7ff fe27 	bl	80a0096 <_Znwj>
 80a0448:	4605      	mov	r5, r0
 80a044a:	b118      	cbz	r0, 80a0454 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x22>
 80a044c:	6862      	ldr	r2, [r4, #4]
 80a044e:	7a21      	ldrb	r1, [r4, #8]
 80a0450:	f7ff fe31 	bl	80a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 80a0454:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0456:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin())
 80a0458:	2101      	movs	r1, #1
 80a045a:	f7ff fe48 	bl	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>
 80a045e:	4605      	mov	r5, r0
 80a0460:	b910      	cbnz	r0, 80a0468 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    return false;
 80a0462:	2500      	movs	r5, #0
}
 80a0464:	4628      	mov	r0, r5
 80a0466:	bd38      	pop	{r3, r4, r5, pc}
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 80a0468:	2100      	movs	r1, #0
 80a046a:	4620      	mov	r0, r4
 80a046c:	f7ff fec0 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a0470:	28b4      	cmp	r0, #180	; 0xb4
 80a0472:	d1f6      	bne.n	80a0462 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x30>
  if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 80a0474:	2116      	movs	r1, #22
 80a0476:	4620      	mov	r0, r4
 80a0478:	f7ff feba 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a047c:	07c3      	lsls	r3, r0, #31
 80a047e:	d5f1      	bpl.n	80a0464 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>
    loadSettings();
 80a0480:	4620      	mov	r0, r4
 80a0482:	f7ff ff05 	bl	80a0290 <_ZN16Adafruit_VL6180X12loadSettingsEv>
    write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80a0486:	2200      	movs	r2, #0
 80a0488:	2116      	movs	r1, #22
 80a048a:	4620      	mov	r0, r4
 80a048c:	f7ff fecf 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
 80a0490:	e7e8      	b.n	80a0464 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>

080a0492 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
 80a0492:	b538      	push	{r3, r4, r5, lr}
 80a0494:	4604      	mov	r4, r0
  while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80a0496:	214d      	movs	r1, #77	; 0x4d
 80a0498:	4620      	mov	r0, r4
 80a049a:	f7ff fea9 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a049e:	07c2      	lsls	r2, r0, #31
 80a04a0:	d5f9      	bpl.n	80a0496 <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80a04a2:	2201      	movs	r2, #1
 80a04a4:	2118      	movs	r1, #24
 80a04a6:	4620      	mov	r0, r4
 80a04a8:	f7ff fec1 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80a04ac:	214f      	movs	r1, #79	; 0x4f
 80a04ae:	4620      	mov	r0, r4
 80a04b0:	f7ff fe9e 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a04b4:	0743      	lsls	r3, r0, #29
 80a04b6:	d5f9      	bpl.n	80a04ac <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 80a04b8:	2162      	movs	r1, #98	; 0x62
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	f7ff fe98 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a04c0:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 80a04c2:	2207      	movs	r2, #7
 80a04c4:	4620      	mov	r0, r4
 80a04c6:	2115      	movs	r1, #21
 80a04c8:	f7ff feb1 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
}
 80a04cc:	4628      	mov	r0, r5
 80a04ce:	bd38      	pop	{r3, r4, r5, pc}

080a04d0 <_Z8callbackPcPhj>:
uint32_t sensor_range_sums[COUNT_SENSORS];
uint8_t sensor_status[COUNT_SENSORS];

char data[COUNT_SENSORS];

void callback(char *topic, byte *payload, unsigned int length) {
 80a04d0:	b510      	push	{r4, lr}
 80a04d2:	4604      	mov	r4, r0
    Serial.println(topic);
 80a04d4:	f001 fe80 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a04d8:	4621      	mov	r1, r4
}
 80a04da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(topic);
 80a04de:	f001 b9da 	b.w	80a1896 <_ZN5Print7printlnEPKc>
	...

080a04e4 <_Z6setIDsv>:

void setIDs() {
 80a04e4:	b508      	push	{r3, lr}
    // all reset
    digitalWrite(SHT_LOX1, LOW);
 80a04e6:	2100      	movs	r1, #0
 80a04e8:	2004      	movs	r0, #4
 80a04ea:	f002 f882 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a04ee:	2100      	movs	r1, #0
 80a04f0:	2003      	movs	r0, #3
 80a04f2:	f002 f87e 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a04f6:	2100      	movs	r1, #0
 80a04f8:	2002      	movs	r0, #2
 80a04fa:	f002 f87a 	bl	80a25f2 <digitalWrite>
    delay(10);
 80a04fe:	200a      	movs	r0, #10
 80a0500:	f001 f81e 	bl	80a1540 <delay>

    // all unreset
    digitalWrite(SHT_LOX1, HIGH);
 80a0504:	2101      	movs	r1, #1
 80a0506:	2004      	movs	r0, #4
 80a0508:	f002 f873 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX2, HIGH);
 80a050c:	2101      	movs	r1, #1
 80a050e:	2003      	movs	r0, #3
 80a0510:	f002 f86f 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX3, HIGH);
 80a0514:	2101      	movs	r1, #1
 80a0516:	2002      	movs	r0, #2
 80a0518:	f002 f86b 	bl	80a25f2 <digitalWrite>
    delay(10);
 80a051c:	200a      	movs	r0, #10
 80a051e:	f001 f80f 	bl	80a1540 <delay>

    // activating LOX1 and reseting LOX2
    digitalWrite(SHT_LOX1, HIGH);
 80a0522:	2101      	movs	r1, #1
 80a0524:	2004      	movs	r0, #4
 80a0526:	f002 f864 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a052a:	2100      	movs	r1, #0
 80a052c:	2003      	movs	r0, #3
 80a052e:	f002 f860 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a0532:	2100      	movs	r1, #0
 80a0534:	2002      	movs	r0, #2
 80a0536:	f002 f85c 	bl	80a25f2 <digitalWrite>

    // initing LOX1
    if (!lox1.begin()) {
 80a053a:	f002 f88d 	bl	80a2658 <_Z19__fetch_global_Wirev>
 80a053e:	4601      	mov	r1, r0
 80a0540:	4821      	ldr	r0, [pc, #132]	; (80a05c8 <_Z6setIDsv+0xe4>)
 80a0542:	f7ff ff76 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a0546:	b928      	cbnz	r0, 80a0554 <_Z6setIDsv+0x70>
        Serial.println(F("Failed to boot first VL6180X"));
 80a0548:	f001 fe46 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a054c:	491f      	ldr	r1, [pc, #124]	; (80a05cc <_Z6setIDsv+0xe8>)
 80a054e:	f001 f9ac 	bl	80a18aa <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0552:	e7fe      	b.n	80a0552 <_Z6setIDsv+0x6e>
    }
    lox1.setAddress(LOX1_ADDRESS);
 80a0554:	2130      	movs	r1, #48	; 0x30
 80a0556:	481c      	ldr	r0, [pc, #112]	; (80a05c8 <_Z6setIDsv+0xe4>)
 80a0558:	f7ff fe7b 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>
    delay(10);
 80a055c:	200a      	movs	r0, #10
 80a055e:	f000 ffef 	bl	80a1540 <delay>

    // activating LOX2
    digitalWrite(SHT_LOX2, HIGH);
 80a0562:	2101      	movs	r1, #1
 80a0564:	2003      	movs	r0, #3
 80a0566:	f002 f844 	bl	80a25f2 <digitalWrite>
    delay(10);
 80a056a:	200a      	movs	r0, #10
 80a056c:	f000 ffe8 	bl	80a1540 <delay>

    //initing LOX2
    if (!lox2.begin()) {
 80a0570:	f002 f872 	bl	80a2658 <_Z19__fetch_global_Wirev>
 80a0574:	4601      	mov	r1, r0
 80a0576:	4816      	ldr	r0, [pc, #88]	; (80a05d0 <_Z6setIDsv+0xec>)
 80a0578:	f7ff ff5b 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a057c:	b928      	cbnz	r0, 80a058a <_Z6setIDsv+0xa6>
        Serial.println(F("Failed to boot second VL6180X"));
 80a057e:	f001 fe2b 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a0582:	4914      	ldr	r1, [pc, #80]	; (80a05d4 <_Z6setIDsv+0xf0>)
 80a0584:	f001 f991 	bl	80a18aa <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0588:	e7fe      	b.n	80a0588 <_Z6setIDsv+0xa4>
    }
    lox2.setAddress(LOX2_ADDRESS);
 80a058a:	2131      	movs	r1, #49	; 0x31
 80a058c:	4810      	ldr	r0, [pc, #64]	; (80a05d0 <_Z6setIDsv+0xec>)
 80a058e:	f7ff fe60 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX3
    digitalWrite(SHT_LOX3, HIGH);
 80a0592:	2101      	movs	r1, #1
 80a0594:	2002      	movs	r0, #2
 80a0596:	f002 f82c 	bl	80a25f2 <digitalWrite>
    delay(10);
 80a059a:	200a      	movs	r0, #10
 80a059c:	f000 ffd0 	bl	80a1540 <delay>

    //initing LOX3
    if (!lox3.begin()) {
 80a05a0:	f002 f85a 	bl	80a2658 <_Z19__fetch_global_Wirev>
 80a05a4:	4601      	mov	r1, r0
 80a05a6:	480c      	ldr	r0, [pc, #48]	; (80a05d8 <_Z6setIDsv+0xf4>)
 80a05a8:	f7ff ff43 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a05ac:	b928      	cbnz	r0, 80a05ba <_Z6setIDsv+0xd6>
        Serial.println(F("Failed to boot third VL6180X"));
 80a05ae:	f001 fe13 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a05b2:	490a      	ldr	r1, [pc, #40]	; (80a05dc <_Z6setIDsv+0xf8>)
 80a05b4:	f001 f979 	bl	80a18aa <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a05b8:	e7fe      	b.n	80a05b8 <_Z6setIDsv+0xd4>
    }
    lox3.setAddress(LOX3_ADDRESS);
 80a05ba:	2132      	movs	r1, #50	; 0x32
}
 80a05bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lox3.setAddress(LOX3_ADDRESS);
 80a05c0:	4805      	ldr	r0, [pc, #20]	; (80a05d8 <_Z6setIDsv+0xf4>)
 80a05c2:	f7ff be46 	b.w	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>
 80a05c6:	bf00      	nop
 80a05c8:	200000dc 	.word	0x200000dc
 80a05cc:	080a2aac 	.word	0x080a2aac
 80a05d0:	200000e8 	.word	0x200000e8
 80a05d4:	080a2ac9 	.word	0x080a2ac9
 80a05d8:	200000f4 	.word	0x200000f4
 80a05dc:	080a2ae7 	.word	0x080a2ae7

080a05e0 <_Z24round_robin_read_sensorsv>:

void round_robin_read_sensors() {
 80a05e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a05e2:	4d1e      	ldr	r5, [pc, #120]	; (80a065c <_Z24round_robin_read_sensorsv+0x7c>)
 80a05e4:	4e1e      	ldr	r6, [pc, #120]	; (80a0660 <_Z24round_robin_read_sensorsv+0x80>)
 80a05e6:	782b      	ldrb	r3, [r5, #0]
 80a05e8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80a05ec:	f7ff ff51 	bl	80a0492 <_ZN16Adafruit_VL6180X9readRangeEv>
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a05f0:	782b      	ldrb	r3, [r5, #0]
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a05f2:	4604      	mov	r4, r0
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a05f4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80a05f8:	f7ff fe12 	bl	80a0220 <_ZN16Adafruit_VL6180X15readRangeStatusEv>

    sensor_status[sensor_idx] = status_lox;
 80a05fc:	782b      	ldrb	r3, [r5, #0]
 80a05fe:	4a19      	ldr	r2, [pc, #100]	; (80a0664 <_Z24round_robin_read_sensorsv+0x84>)
 80a0600:	4629      	mov	r1, r5
 80a0602:	4e19      	ldr	r6, [pc, #100]	; (80a0668 <_Z24round_robin_read_sensorsv+0x88>)
 80a0604:	54d0      	strb	r0, [r2, r3]
    if (status_lox == VL6180X_ERROR_NONE) {
 80a0606:	bb28      	cbnz	r0, 80a0654 <_Z24round_robin_read_sensorsv+0x74>
        uint8_t range_idx = sensor_range_idxs[sensor_idx];
 80a0608:	4f18      	ldr	r7, [pc, #96]	; (80a066c <_Z24round_robin_read_sensorsv+0x8c>)

        sensor_range_sums[sensor_idx] -= sensor_range_samples[sensor_idx][range_idx]; // Remove the oldest entry from the sum
 80a060a:	4d19      	ldr	r5, [pc, #100]	; (80a0670 <_Z24round_robin_read_sensorsv+0x90>)
 80a060c:	5cfa      	ldrb	r2, [r7, r3]
 80a060e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80a0612:	4405      	add	r5, r0
 80a0614:	f815 e002 	ldrb.w	lr, [r5, r2]
        sensor_range_samples[sensor_idx][range_idx] = range_lox; // Add the newest reading to the window
 80a0618:	54ac      	strb	r4, [r5, r2]

        sensor_range_sums[sensor_idx] += range_lox; // Add the newest reading to the sum

        sensor_range_idxs[sensor_idx] = (range_idx + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size
 80a061a:	2505      	movs	r5, #5
        sensor_range_sums[sensor_idx] -= sensor_range_samples[sensor_idx][range_idx]; // Remove the oldest entry from the sum
 80a061c:	f8df c054 	ldr.w	ip, [pc, #84]	; 80a0674 <_Z24round_robin_read_sensorsv+0x94>
        sensor_range_idxs[sensor_idx] = (range_idx + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size
 80a0620:	3201      	adds	r2, #1
        sensor_range_sums[sensor_idx] -= sensor_range_samples[sensor_idx][range_idx]; // Remove the oldest entry from the sum
 80a0622:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 80a0626:	eba0 000e 	sub.w	r0, r0, lr
        sensor_range_sums[sensor_idx] += range_lox; // Add the newest reading to the sum
 80a062a:	4404      	add	r4, r0
        sensor_range_idxs[sensor_idx] = (range_idx + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size
 80a062c:	fbb2 f0f5 	udiv	r0, r2, r5
        sensor_range_sums[sensor_idx] += range_lox; // Add the newest reading to the sum
 80a0630:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]

        data[sensor_idx] = sensor_range_sums[sensor_idx] / WINDOW_SIZE;
 80a0634:	fbb4 f4f5 	udiv	r4, r4, r5
        sensor_range_idxs[sensor_idx] = (range_idx + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size
 80a0638:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a063c:	1a12      	subs	r2, r2, r0
 80a063e:	54fa      	strb	r2, [r7, r3]
        data[sensor_idx] = sensor_range_sums[sensor_idx] / WINDOW_SIZE;
 80a0640:	54f4      	strb	r4, [r6, r3]
    }
    else {
        data[sensor_idx] = -1;
    }

    sensor_idx = (sensor_idx + 1) % COUNT_SENSORS;
 80a0642:	2203      	movs	r2, #3
 80a0644:	3301      	adds	r3, #1
 80a0646:	fbb3 f2f2 	udiv	r2, r3, r2
 80a064a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a064e:	1a9b      	subs	r3, r3, r2
 80a0650:	700b      	strb	r3, [r1, #0]
}
 80a0652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data[sensor_idx] = -1;
 80a0654:	22ff      	movs	r2, #255	; 0xff
 80a0656:	54f2      	strb	r2, [r6, r3]
 80a0658:	e7f3      	b.n	80a0642 <_Z24round_robin_read_sensorsv+0x62>
 80a065a:	bf00      	nop
 80a065c:	20000100 	.word	0x20000100
 80a0660:	20000000 	.word	0x20000000
 80a0664:	20000120 	.word	0x20000120
 80a0668:	200000d8 	.word	0x200000d8
 80a066c:	20000101 	.word	0x20000101
 80a0670:	20000104 	.word	0x20000104
 80a0674:	20000114 	.word	0x20000114

080a0678 <setup>:

void setup() {
 80a0678:	b570      	push	{r4, r5, r6, lr}
 80a067a:	b088      	sub	sp, #32
    Serial.begin(115200);
 80a067c:	f001 fdac 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a0680:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0684:	f001 fd88 	bl	80a2198 <_ZN9USBSerial5beginEl>

    // wait until serial port opens for native USB devices
    while (!Serial) {
 80a0688:	f001 fda6 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a068c:	f001 fd8b 	bl	80a21a6 <_ZN9USBSerialcvbEv>
 80a0690:	b918      	cbnz	r0, 80a069a <setup+0x22>
        delay(1);
 80a0692:	2001      	movs	r0, #1
 80a0694:	f000 ff54 	bl	80a1540 <delay>
    while (!Serial) {
 80a0698:	e7f6      	b.n	80a0688 <setup+0x10>
    }

    Serial.println("Connecting...");
 80a069a:	f001 fd9d 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a069e:	4938      	ldr	r1, [pc, #224]	; (80a0780 <setup+0x108>)
 80a06a0:	f001 f8f9 	bl	80a1896 <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a06a4:	4937      	ldr	r1, [pc, #220]	; (80a0784 <setup+0x10c>)
 80a06a6:	a804      	add	r0, sp, #16
 80a06a8:	f001 f97d 	bl	80a19a6 <_ZN6StringC1EPKc>
    client.connect(MQTT_NAME);
 80a06ac:	f001 fc92 	bl	80a1fd4 <_ZN9TimeClass3nowEv>
 80a06b0:	220a      	movs	r2, #10
 80a06b2:	4601      	mov	r1, r0
 80a06b4:	4668      	mov	r0, sp
 80a06b6:	f001 f99a 	bl	80a19ee <_ZN6StringC1Elh>
 80a06ba:	4669      	mov	r1, sp
 80a06bc:	a804      	add	r0, sp, #16
 80a06be:	f001 f9c0 	bl	80a1a42 <_ZplRK15StringSumHelperRK6String>
 80a06c2:	6801      	ldr	r1, [r0, #0]
 80a06c4:	4830      	ldr	r0, [pc, #192]	; (80a0788 <setup+0x110>)
 80a06c6:	f000 facb 	bl	80a0c60 <_ZN4MQTT7connectEPKc>
 80a06ca:	4668      	mov	r0, sp
 80a06cc:	f001 f921 	bl	80a1912 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a06d0:	a804      	add	r0, sp, #16
 80a06d2:	f001 f91e 	bl	80a1912 <_ZN6StringD1Ev>
    while (!client.isConnected()) {
 80a06d6:	4c2c      	ldr	r4, [pc, #176]	; (80a0788 <setup+0x110>)
        Serial.println("Connecting...");
 80a06d8:	4e29      	ldr	r6, [pc, #164]	; (80a0780 <setup+0x108>)
	StringSumHelper(const char *p) : String(p) {}
 80a06da:	4d2a      	ldr	r5, [pc, #168]	; (80a0784 <setup+0x10c>)
    while (!client.isConnected()) {
 80a06dc:	4620      	mov	r0, r4
 80a06de:	f000 f9ce 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a06e2:	bb10      	cbnz	r0, 80a072a <setup+0xb2>
        Serial.println("Connecting...");
 80a06e4:	f001 fd78 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a06e8:	4631      	mov	r1, r6
 80a06ea:	f001 f8d4 	bl	80a1896 <_ZN5Print7printlnEPKc>
 80a06ee:	4629      	mov	r1, r5
 80a06f0:	a804      	add	r0, sp, #16
 80a06f2:	f001 f958 	bl	80a19a6 <_ZN6StringC1EPKc>
        client.connect(MQTT_NAME);
 80a06f6:	f001 fc6d 	bl	80a1fd4 <_ZN9TimeClass3nowEv>
 80a06fa:	220a      	movs	r2, #10
 80a06fc:	4601      	mov	r1, r0
 80a06fe:	4668      	mov	r0, sp
 80a0700:	f001 f975 	bl	80a19ee <_ZN6StringC1Elh>
 80a0704:	4669      	mov	r1, sp
 80a0706:	a804      	add	r0, sp, #16
 80a0708:	f001 f99b 	bl	80a1a42 <_ZplRK15StringSumHelperRK6String>
 80a070c:	6801      	ldr	r1, [r0, #0]
 80a070e:	4620      	mov	r0, r4
 80a0710:	f000 faa6 	bl	80a0c60 <_ZN4MQTT7connectEPKc>
 80a0714:	4668      	mov	r0, sp
 80a0716:	f001 f8fc 	bl	80a1912 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a071a:	a804      	add	r0, sp, #16
 80a071c:	f001 f8f9 	bl	80a1912 <_ZN6StringD1Ev>
        delay(1000);
 80a0720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0724:	f000 ff0c 	bl	80a1540 <delay>
    while (!client.isConnected()) {
 80a0728:	e7d8      	b.n	80a06dc <setup+0x64>
    }

    pinMode(SHT_LOX1, OUTPUT);
 80a072a:	2101      	movs	r1, #1
 80a072c:	2004      	movs	r0, #4
 80a072e:	f001 ff4f 	bl	80a25d0 <pinMode>
    pinMode(SHT_LOX2, OUTPUT);
 80a0732:	2101      	movs	r1, #1
 80a0734:	2003      	movs	r0, #3
 80a0736:	f001 ff4b 	bl	80a25d0 <pinMode>
    pinMode(SHT_LOX3, OUTPUT);
 80a073a:	2101      	movs	r1, #1
 80a073c:	2002      	movs	r0, #2
 80a073e:	f001 ff47 	bl	80a25d0 <pinMode>
    pinMode(GPIO_LOX1, INPUT_PULLUP);
    pinMode(GPIO_LOX2, INPUT_PULLUP);
    pinMode(GPIO_LOX3, INPUT_PULLUP);
#endif

    Serial.println("Shutdown pins inited...");
 80a0742:	f001 fd49 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a0746:	4911      	ldr	r1, [pc, #68]	; (80a078c <setup+0x114>)
 80a0748:	f001 f8a5 	bl	80a1896 <_ZN5Print7printlnEPKc>

    digitalWrite(SHT_LOX1, LOW);
 80a074c:	2100      	movs	r1, #0
 80a074e:	2004      	movs	r0, #4
 80a0750:	f001 ff4f 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a0754:	2100      	movs	r1, #0
 80a0756:	2003      	movs	r0, #3
 80a0758:	f001 ff4b 	bl	80a25f2 <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a075c:	2100      	movs	r1, #0
 80a075e:	2002      	movs	r0, #2
 80a0760:	f001 ff47 	bl	80a25f2 <digitalWrite>
    Serial.println("All in reset mode...(pins are low)");
 80a0764:	f001 fd38 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a0768:	4909      	ldr	r1, [pc, #36]	; (80a0790 <setup+0x118>)
 80a076a:	f001 f894 	bl	80a1896 <_ZN5Print7printlnEPKc>


    Serial.println("Starting...");
 80a076e:	f001 fd33 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a0772:	4908      	ldr	r1, [pc, #32]	; (80a0794 <setup+0x11c>)
 80a0774:	f001 f88f 	bl	80a1896 <_ZN5Print7printlnEPKc>
    setIDs();
 80a0778:	f7ff feb4 	bl	80a04e4 <_Z6setIDsv>
}
 80a077c:	b008      	add	sp, #32
 80a077e:	bd70      	pop	{r4, r5, r6, pc}
 80a0780:	080a2b04 	.word	0x080a2b04
 80a0784:	080a2b12 	.word	0x080a2b12
 80a0788:	20000078 	.word	0x20000078
 80a078c:	080a2b1e 	.word	0x080a2b1e
 80a0790:	080a2b36 	.word	0x080a2b36
 80a0794:	080a2b59 	.word	0x080a2b59

080a0798 <loop>:

void loop() {
 80a0798:	b508      	push	{r3, lr}
    if (client.isConnected()) client.loop();
 80a079a:	480b      	ldr	r0, [pc, #44]	; (80a07c8 <loop+0x30>)
 80a079c:	f000 f96f 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a07a0:	b110      	cbz	r0, 80a07a8 <loop+0x10>
 80a07a2:	4809      	ldr	r0, [pc, #36]	; (80a07c8 <loop+0x30>)
 80a07a4:	f000 fb42 	bl	80a0e2c <_ZN4MQTT4loopEv>

    round_robin_read_sensors();
 80a07a8:	f7ff ff1a 	bl	80a05e0 <_Z24round_robin_read_sensorsv>

    if (sensor_idx == COUNT_SENSORS - 1) {
 80a07ac:	4b07      	ldr	r3, [pc, #28]	; (80a07cc <loop+0x34>)
 80a07ae:	781b      	ldrb	r3, [r3, #0]
 80a07b0:	2b02      	cmp	r3, #2
 80a07b2:	d104      	bne.n	80a07be <loop+0x26>

            if (i != COUNT_SENSORS-1) Serial.print(" : ");
        }
        Serial.println();
#endif
        client.publish("wrist/data/sensors", data);
 80a07b4:	4a06      	ldr	r2, [pc, #24]	; (80a07d0 <loop+0x38>)
 80a07b6:	4907      	ldr	r1, [pc, #28]	; (80a07d4 <loop+0x3c>)
 80a07b8:	4803      	ldr	r0, [pc, #12]	; (80a07c8 <loop+0x30>)
 80a07ba:	f000 fadc 	bl	80a0d76 <_ZN4MQTT7publishEPKcS1_>
    }

    delay(20);
}
 80a07be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
 80a07c2:	2014      	movs	r0, #20
 80a07c4:	f000 bebc 	b.w	80a1540 <delay>
 80a07c8:	20000078 	.word	0x20000078
 80a07cc:	20000100 	.word	0x20000100
 80a07d0:	200000d8 	.word	0x200000d8
 80a07d4:	080a2b65 	.word	0x080a2b65

080a07d8 <_GLOBAL__sub_I_client>:
MQTT client(MQTT_HOST, MQTT_PORT, callback);
 80a07d8:	2300      	movs	r3, #0
}
 80a07da:	b507      	push	{r0, r1, r2, lr}
MQTT client(MQTT_HOST, MQTT_PORT, callback);
 80a07dc:	f240 725b 	movw	r2, #1883	; 0x75b
 80a07e0:	9300      	str	r3, [sp, #0]
 80a07e2:	490a      	ldr	r1, [pc, #40]	; (80a080c <_GLOBAL__sub_I_client+0x34>)
 80a07e4:	4b0a      	ldr	r3, [pc, #40]	; (80a0810 <_GLOBAL__sub_I_client+0x38>)
 80a07e6:	480b      	ldr	r0, [pc, #44]	; (80a0814 <_GLOBAL__sub_I_client+0x3c>)
 80a07e8:	f000 f860 	bl	80a08ac <_ZN4MQTTC1EPKctPFvPcPhjEb>
Adafruit_VL6180X lox1 = Adafruit_VL6180X();
 80a07ec:	2129      	movs	r1, #41	; 0x29
 80a07ee:	480a      	ldr	r0, [pc, #40]	; (80a0818 <_GLOBAL__sub_I_client+0x40>)
 80a07f0:	f7ff fcfa 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox2 = Adafruit_VL6180X();
 80a07f4:	2129      	movs	r1, #41	; 0x29
 80a07f6:	4809      	ldr	r0, [pc, #36]	; (80a081c <_GLOBAL__sub_I_client+0x44>)
 80a07f8:	f7ff fcf6 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox3 = Adafruit_VL6180X();
 80a07fc:	2129      	movs	r1, #41	; 0x29
 80a07fe:	4808      	ldr	r0, [pc, #32]	; (80a0820 <_GLOBAL__sub_I_client+0x48>)
}
 80a0800:	b003      	add	sp, #12
 80a0802:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_VL6180X lox3 = Adafruit_VL6180X();
 80a0806:	f7ff bcef 	b.w	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
 80a080a:	bf00      	nop
 80a080c:	080a2b78 	.word	0x080a2b78
 80a0810:	080a04d1 	.word	0x080a04d1
 80a0814:	20000078 	.word	0x20000078
 80a0818:	200000dc 	.word	0x200000dc
 80a081c:	200000e8 	.word	0x200000e8
 80a0820:	200000f4 	.word	0x200000f4

080a0824 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a0824:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a0828:	b510      	push	{r4, lr}
 80a082a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a082c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a082e:	b113      	cbz	r3, 80a0836 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a0830:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a0832:	f000 fc15 	bl	80a1060 <os_mutex_lock>
#endif
#endif
#endif
        }
 80a0836:	4620      	mov	r0, r4
 80a0838:	bd10      	pop	{r4, pc}

080a083a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a083a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a083c:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a083e:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a0840:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a0844:	b112      	cbz	r2, 80a084c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a0846:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a0848:	f000 fc12 	bl	80a1070 <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a084c:	4620      	mov	r0, r4
 80a084e:	bd10      	pop	{r4, pc}

080a0850 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a0850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0852:	461f      	mov	r7, r3
 80a0854:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a0858:	4604      	mov	r4, r0
 80a085a:	460d      	mov	r5, r1
 80a085c:	4616      	mov	r6, r2
    if (thread) {
 80a085e:	b123      	cbz	r3, 80a086a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 80a0860:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a0862:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a0864:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a0866:	f000 fbf3 	bl	80a1050 <os_mutex_create>
    }
    this->callback = callback;
 80a086a:	9b08      	ldr	r3, [sp, #32]
 80a086c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a086e:	2300      	movs	r3, #0
 80a0870:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0872:	b106      	cbz	r6, 80a0876 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 80a0874:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a0876:	b125      	cbz	r5, 80a0882 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 80a0878:	4629      	mov	r1, r5
 80a087a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a087e:	f001 f8a5 	bl	80a19cc <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0882:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0884:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a0886:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0888:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a088a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a088e:	2bff      	cmp	r3, #255	; 0xff
 80a0890:	bfb8      	it	lt
 80a0892:	23ff      	movlt	r3, #255	; 0xff
 80a0894:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0898:	b108      	cbz	r0, 80a089e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 80a089a:	f7ff fc02 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a089e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a08a2:	f7ff fbfa 	bl	80a009a <_Znaj>
 80a08a6:	61e0      	str	r0, [r4, #28]
}
 80a08a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a08ac <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a08ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a08b0:	4604      	mov	r4, r0
            bool thread) {
 80a08b2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a08b4:	4698      	mov	r8, r3
 80a08b6:	4617      	mov	r7, r2
 80a08b8:	460e      	mov	r6, r1
            bool thread) {
 80a08ba:	f001 fb13 	bl	80a1ee4 <_ZN9TCPClientC1Ev>
 80a08be:	490d      	ldr	r1, [pc, #52]	; (80a08f4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 80a08c0:	61e5      	str	r5, [r4, #28]
 80a08c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a08c6:	f001 f86e 	bl	80a19a6 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a08ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a08ce:	22ff      	movs	r2, #255	; 0xff
 80a08d0:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a08d4:	230f      	movs	r3, #15
 80a08d6:	4620      	mov	r0, r4
 80a08d8:	e9cd 3200 	strd	r3, r2, [sp]
 80a08dc:	4631      	mov	r1, r6
 80a08de:	463b      	mov	r3, r7
 80a08e0:	462a      	mov	r2, r5
            bool thread) {
 80a08e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80a08e4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a08e8:	f7ff ffb2 	bl	80a0850 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 80a08ec:	4620      	mov	r0, r4
 80a08ee:	b004      	add	sp, #16
 80a08f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a08f4:	080a2b58 	.word	0x080a2b58

080a08f8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a08f8:	b510      	push	{r4, lr}
 80a08fa:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a08fc:	4620      	mov	r0, r4
 80a08fe:	f001 fa07 	bl	80a1d10 <_ZN9TCPClient9availableEv>
 80a0902:	2800      	cmp	r0, #0
 80a0904:	d0fa      	beq.n	80a08fc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0906:	4620      	mov	r0, r4
 80a0908:	f001 f945 	bl	80a1b96 <_ZN9TCPClient4readEv>
}
 80a090c:	b2c0      	uxtb	r0, r0
 80a090e:	bd10      	pop	{r4, pc}

080a0910 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0914:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0916:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0918:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a091a:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a091c:	f7ff ffec 	bl	80a08f8 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a0920:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a0924:	7020      	strb	r0, [r4, #0]
 80a0926:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0928:	69eb      	ldr	r3, [r5, #28]
 80a092a:	f893 a000 	ldrb.w	sl, [r3]
 80a092e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0932:	4628      	mov	r0, r5
 80a0934:	f7ff ffe0 	bl	80a08f8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0938:	4626      	mov	r6, r4
 80a093a:	69eb      	ldr	r3, [r5, #28]
 80a093c:	3401      	adds	r4, #1
 80a093e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0940:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0944:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0948:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a094a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a094c:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a0950:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a0954:	d4ed      	bmi.n	80a0932 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a0956:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0958:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a095c:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a0960:	d124      	bne.n	80a09ac <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0962:	4628      	mov	r0, r5
 80a0964:	69ef      	ldr	r7, [r5, #28]
 80a0966:	f7ff ffc7 	bl	80a08f8 <_ZN4MQTT8readByteEv>
 80a096a:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a096c:	4628      	mov	r0, r5
 80a096e:	69ef      	ldr	r7, [r5, #28]
 80a0970:	f7ff ffc2 	bl	80a08f8 <_ZN4MQTT8readByteEv>
 80a0974:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a0976:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a0978:	b2b6      	uxth	r6, r6
 80a097a:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a097c:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a097e:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0980:	b2b6      	uxth	r6, r6
 80a0982:	46b1      	mov	r9, r6
 80a0984:	4627      	mov	r7, r4
 80a0986:	45c1      	cmp	r9, r8
 80a0988:	d212      	bcs.n	80a09b0 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a098a:	4628      	mov	r0, r5
 80a098c:	f7ff ffb4 	bl	80a08f8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0990:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a0994:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a0998:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a099a:	bf88      	it	hi
 80a099c:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a099e:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a09a2:	bf88      	it	hi
 80a09a4:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a09a6:	3701      	adds	r7, #1
 80a09a8:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a09aa:	e7ec      	b.n	80a0986 <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a09ac:	2600      	movs	r6, #0
 80a09ae:	e7e7      	b.n	80a0980 <_ZN4MQTT10readPacketEPh+0x70>
 80a09b0:	eba8 0006 	sub.w	r0, r8, r6
 80a09b4:	45b0      	cmp	r8, r6
 80a09b6:	bf2c      	ite	cs
 80a09b8:	4606      	movcs	r6, r0
 80a09ba:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a09bc:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a09c0:	4434      	add	r4, r6
 80a09c2:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a09c4:	42a0      	cmp	r0, r4
 80a09c6:	bf2c      	ite	cs
 80a09c8:	4620      	movcs	r0, r4
 80a09ca:	2000      	movcc	r0, #0
 80a09cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a09d0 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a09d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a09d2:	468c      	mov	ip, r1
 80a09d4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a09d6:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a09d8:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a09da:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a09dc:	46ae      	mov	lr, r5
 80a09de:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a09e2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a09e6:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a09e8:	bf88      	it	hi
 80a09ea:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a09ee:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a09f0:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a09f4:	4403      	add	r3, r0
        len = len / 128;
 80a09f6:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a09fa:	b2e4      	uxtb	r4, r4
 80a09fc:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a0a00:	d810      	bhi.n	80a0a24 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a0a02:	f1c4 0304 	rsb	r3, r4, #4
 80a0a06:	18d1      	adds	r1, r2, r3
 80a0a08:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0a0c:	f1c4 0305 	rsb	r3, r4, #5
 80a0a10:	4413      	add	r3, r2
 80a0a12:	a801      	add	r0, sp, #4
 80a0a14:	3205      	adds	r2, #5
 80a0a16:	4293      	cmp	r3, r2
 80a0a18:	d006      	beq.n	80a0a28 <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a0a1a:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a0a1e:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a0a22:	e7f8      	b.n	80a0a16 <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a0a24:	4623      	mov	r3, r4
 80a0a26:	e7d9      	b.n	80a09dc <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0a28:	1c72      	adds	r2, r6, #1
 80a0a2a:	4422      	add	r2, r4
 80a0a2c:	4638      	mov	r0, r7
 80a0a2e:	f001 f834 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
 80a0a32:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0a34:	f000 fb3c 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0a38:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a0a3a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0a3c:	4434      	add	r4, r6
 80a0a3e:	b2a8      	uxth	r0, r5
}
 80a0a40:	1a23      	subs	r3, r4, r0
 80a0a42:	4258      	negs	r0, r3
 80a0a44:	4158      	adcs	r0, r3
 80a0a46:	b003      	add	sp, #12
 80a0a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a4a <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0a4a:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a4e:	4604      	mov	r4, r0
    pos += 2;
 80a0a50:	b298      	uxth	r0, r3
 80a0a52:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a0a54:	5ccd      	ldrb	r5, [r1, r3]
 80a0a56:	b14d      	cbz	r5, 80a0a6c <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0a58:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0a5c:	1c5f      	adds	r7, r3, #1
 80a0a5e:	4286      	cmp	r6, r0
 80a0a60:	d904      	bls.n	80a0a6c <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0a62:	1c46      	adds	r6, r0, #1
 80a0a64:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a0a66:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a0a68:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a0a6a:	e7f3      	b.n	80a0a54 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0a6c:	b299      	uxth	r1, r3
 80a0a6e:	1a44      	subs	r4, r0, r1
 80a0a70:	4422      	add	r2, r4
 80a0a72:	1209      	asrs	r1, r1, #8
 80a0a74:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0a78:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a0a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a7e <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0a7e:	b538      	push	{r3, r4, r5, lr}
 80a0a80:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0a82:	f001 f9d6 	bl	80a1e32 <_ZN9TCPClient9connectedEv>
 80a0a86:	2800      	cmp	r0, #0
 80a0a88:	bf14      	ite	ne
 80a0a8a:	2501      	movne	r5, #1
 80a0a8c:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a0a8e:	d102      	bne.n	80a0a96 <_ZN4MQTT11isConnectedEv+0x18>
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f001 f977 	bl	80a1d84 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0a96:	4628      	mov	r0, r5
 80a0a98:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0a9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0aa0:	b088      	sub	sp, #32
 80a0aa2:	4604      	mov	r4, r0
 80a0aa4:	4689      	mov	r9, r1
 80a0aa6:	4617      	mov	r7, r2
 80a0aa8:	461e      	mov	r6, r3
 80a0aaa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a0aae:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a0ab2:	f7ff ffe4 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a0ab6:	4605      	mov	r5, r0
 80a0ab8:	2800      	cmp	r0, #0
 80a0aba:	f040 80cb 	bne.w	80a0c54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
 80a0abe:	4621      	mov	r1, r4
 80a0ac0:	a801      	add	r0, sp, #4
 80a0ac2:	f7ff feaf 	bl	80a0824 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a0ac6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0ac8:	2900      	cmp	r1, #0
 80a0aca:	f040 8087 	bne.w	80a0bdc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0ace:	462b      	mov	r3, r5
 80a0ad0:	4620      	mov	r0, r4
 80a0ad2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0ad6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0ad8:	f001 fa1c 	bl	80a1f14 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0adc:	2800      	cmp	r0, #0
 80a0ade:	d079      	beq.n	80a0bd4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
 80a0ae0:	2301      	movs	r3, #1
 80a0ae2:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a0ae4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a0ae8:	69e2      	ldr	r2, [r4, #28]
 80a0aea:	2b04      	cmp	r3, #4
 80a0aec:	f040 8081 	bne.w	80a0bf2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0af0:	4b59      	ldr	r3, [pc, #356]	; (80a0c58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
 80a0af2:	6818      	ldr	r0, [r3, #0]
 80a0af4:	8899      	ldrh	r1, [r3, #4]
 80a0af6:	799b      	ldrb	r3, [r3, #6]
 80a0af8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a0afc:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0b00:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0b02:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0b06:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a0b0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a0b0e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a0b10:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0b12:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a0b16:	f1b8 0f00 	cmp.w	r8, #0
 80a0b1a:	d07f      	beq.n	80a0c1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0b1c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a0b20:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a0b24:	0140      	lsls	r0, r0, #5
 80a0b26:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a0b2a:	f040 0006 	orr.w	r0, r0, #6
 80a0b2e:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a0b30:	f1ba 0f00 	cmp.w	sl, #0
 80a0b34:	d101      	bne.n	80a0b3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
 80a0b36:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a0b3a:	b11f      	cbz	r7, 80a0b44 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
 80a0b3c:	2e00      	cmp	r6, #0
 80a0b3e:	d16f      	bne.n	80a0c20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
 80a0b40:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a0b44:	69e2      	ldr	r2, [r4, #28]
 80a0b46:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a0b48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0b4a:	69e1      	ldr	r1, [r4, #28]
 80a0b4c:	1c58      	adds	r0, r3, #1
 80a0b4e:	1212      	asrs	r2, r2, #8
 80a0b50:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0b52:	69e1      	ldr	r1, [r4, #28]
 80a0b54:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0b56:	1c9a      	adds	r2, r3, #2
 80a0b58:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0b5a:	3303      	adds	r3, #3
 80a0b5c:	4649      	mov	r1, r9
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	69e2      	ldr	r2, [r4, #28]
 80a0b62:	f7ff ff72 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
 80a0b66:	4603      	mov	r3, r0
            if (willTopic) {
 80a0b68:	f1b8 0f00 	cmp.w	r8, #0
 80a0b6c:	d00b      	beq.n	80a0b86 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
 80a0b6e:	4641      	mov	r1, r8
 80a0b70:	69e2      	ldr	r2, [r4, #28]
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	f7ff ff69 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0b78:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a0b7a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a0b7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0b7e:	4620      	mov	r0, r4
 80a0b80:	f7ff ff63 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
 80a0b84:	4603      	mov	r3, r0
            if(user != NULL) {
 80a0b86:	b167      	cbz	r7, 80a0ba2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
 80a0b88:	4639      	mov	r1, r7
 80a0b8a:	4620      	mov	r0, r4
 80a0b8c:	69e2      	ldr	r2, [r4, #28]
 80a0b8e:	f7ff ff5c 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
 80a0b92:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a0b94:	b12e      	cbz	r6, 80a0ba2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
 80a0b96:	4631      	mov	r1, r6
 80a0b98:	4620      	mov	r0, r4
 80a0b9a:	69e2      	ldr	r2, [r4, #28]
 80a0b9c:	f7ff ff55 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
 80a0ba0:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0ba2:	3b05      	subs	r3, #5
 80a0ba4:	2110      	movs	r1, #16
 80a0ba6:	69e2      	ldr	r2, [r4, #28]
 80a0ba8:	b29b      	uxth	r3, r3
 80a0baa:	4620      	mov	r0, r4
 80a0bac:	f7ff ff10 	bl	80a09d0 <_ZN4MQTT5writeEhPht>
 80a0bb0:	f000 fa7e 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0bb4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a0bb8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a0bbc:	4620      	mov	r0, r4
 80a0bbe:	f001 f8a7 	bl	80a1d10 <_ZN9TCPClient9availableEv>
 80a0bc2:	bb80      	cbnz	r0, 80a0c26 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
 80a0bc4:	f000 fa74 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0bca:	1ac0      	subs	r0, r0, r3
 80a0bcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0bce:	4373      	muls	r3, r6
 80a0bd0:	4298      	cmp	r0, r3
 80a0bd2:	d9f3      	bls.n	80a0bbc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	f001 f8d5 	bl	80a1d84 <_ZN9TCPClient4stopEv>
 80a0bda:	e034      	b.n	80a0c46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
 80a0bdc:	a802      	add	r0, sp, #8
 80a0bde:	f000 fd99 	bl	80a1714 <_ZN9IPAddressC1EPKh>
 80a0be2:	462b      	mov	r3, r5
 80a0be4:	4620      	mov	r0, r4
 80a0be6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0bea:	a902      	add	r1, sp, #8
 80a0bec:	f001 f820 	bl	80a1c30 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0bf0:	e774      	b.n	80a0adc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0bf2:	4b1a      	ldr	r3, [pc, #104]	; (80a0c5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a0bf4:	f10d 0c08 	add.w	ip, sp, #8
 80a0bf8:	6818      	ldr	r0, [r3, #0]
 80a0bfa:	6859      	ldr	r1, [r3, #4]
 80a0bfc:	7a1b      	ldrb	r3, [r3, #8]
 80a0bfe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0c02:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0c06:	ab02      	add	r3, sp, #8
 80a0c08:	cb03      	ldmia	r3!, {r0, r1}
 80a0c0a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0c0e:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0c12:	f89c 3000 	ldrb.w	r3, [ip]
 80a0c16:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0c18:	230e      	movs	r3, #14
 80a0c1a:	e77c      	b.n	80a0b16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a0c1c:	2002      	movs	r0, #2
 80a0c1e:	e787      	b.n	80a0b30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
 80a0c20:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a0c24:	e78e      	b.n	80a0b44 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
 80a0c26:	4620      	mov	r0, r4
 80a0c28:	a902      	add	r1, sp, #8
 80a0c2a:	f7ff fe71 	bl	80a0910 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a0c2e:	2804      	cmp	r0, #4
 80a0c30:	d1d0      	bne.n	80a0bd4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
 80a0c32:	69e3      	ldr	r3, [r4, #28]
 80a0c34:	78de      	ldrb	r6, [r3, #3]
 80a0c36:	2e00      	cmp	r6, #0
 80a0c38:	d1cc      	bne.n	80a0bd4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
 80a0c3a:	f000 fa39 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a0c3e:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a0c40:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0c42:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a0c46:	a801      	add	r0, sp, #4
 80a0c48:	f7ff fdf7 	bl	80a083a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0c4c:	4628      	mov	r0, r5
 80a0c4e:	b008      	add	sp, #32
 80a0c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a0c54:	2500      	movs	r5, #0
 80a0c56:	e7f9      	b.n	80a0c4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
 80a0c58:	080a2b90 	.word	0x080a2b90
 80a0c5c:	080a2b97 	.word	0x080a2b97

080a0c60 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a0c60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0c62:	2301      	movs	r3, #1
 80a0c64:	2204      	movs	r2, #4
 80a0c66:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a0c6a:	2300      	movs	r3, #0
 80a0c6c:	461a      	mov	r2, r3
 80a0c6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a0c72:	e9cd 3300 	strd	r3, r3, [sp]
 80a0c76:	f7ff ff11 	bl	80a0a9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0c7a:	b007      	add	sp, #28
 80a0c7c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0c80 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c84:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80a0c88:	4604      	mov	r4, r0
 80a0c8a:	468b      	mov	fp, r1
 80a0c8c:	4616      	mov	r6, r2
 80a0c8e:	461f      	mov	r7, r3
 80a0c90:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80a0c94:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 80a0c98:	f7ff fef1 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a0c9c:	4682      	mov	sl, r0
 80a0c9e:	2800      	cmp	r0, #0
 80a0ca0:	d051      	beq.n	80a0d46 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 80a0ca2:	4621      	mov	r1, r4
 80a0ca4:	a801      	add	r0, sp, #4
 80a0ca6:	f7ff fdbd 	bl	80a0824 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 80a0caa:	2100      	movs	r1, #0
 80a0cac:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0cb0:	69e0      	ldr	r0, [r4, #28]
 80a0cb2:	f001 fe43 	bl	80a293c <memset>
        length = writeString(topic, buffer, length);
 80a0cb6:	2305      	movs	r3, #5
 80a0cb8:	4659      	mov	r1, fp
 80a0cba:	4620      	mov	r0, r4
 80a0cbc:	69e2      	ldr	r2, [r4, #28]
 80a0cbe:	f7ff fec4 	bl	80a0a4a <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a0cc2:	1e6b      	subs	r3, r5, #1
 80a0cc4:	2b01      	cmp	r3, #1
 80a0cc6:	d815      	bhi.n	80a0cf4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 80a0cc8:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0cca:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 80a0ccc:	3101      	adds	r1, #1
 80a0cce:	b289      	uxth	r1, r1
 80a0cd0:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0cd2:	1209      	asrs	r1, r1, #8
 80a0cd4:	5419      	strb	r1, [r3, r0]
 80a0cd6:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0cd8:	69e3      	ldr	r3, [r4, #28]
 80a0cda:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0cdc:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 80a0cde:	3002      	adds	r0, #2
 80a0ce0:	b280      	uxth	r0, r0
 80a0ce2:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 80a0ce4:	f1b8 0f00 	cmp.w	r8, #0
 80a0ce8:	d004      	beq.n	80a0cf4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 80a0cea:	8c23      	ldrh	r3, [r4, #32]
 80a0cec:	1c5a      	adds	r2, r3, #1
 80a0cee:	8422      	strh	r2, [r4, #32]
 80a0cf0:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0cf4:	2100      	movs	r1, #0
 80a0cf6:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0cf8:	428f      	cmp	r7, r1
 80a0cfa:	69e2      	ldr	r2, [r4, #28]
 80a0cfc:	b29b      	uxth	r3, r3
 80a0cfe:	d90a      	bls.n	80a0d16 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 80a0d00:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a0d04:	459c      	cmp	ip, r3
 80a0d06:	d906      	bls.n	80a0d16 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 80a0d08:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0d0c:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a0d0e:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0d12:	b289      	uxth	r1, r1
 80a0d14:	e7ef      	b.n	80a0cf6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 80a0d16:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a0d1a:	2900      	cmp	r1, #0
 80a0d1c:	bf0c      	ite	eq
 80a0d1e:	2130      	moveq	r1, #48	; 0x30
 80a0d20:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a0d22:	f1b9 0f00 	cmp.w	r9, #0
 80a0d26:	d001      	beq.n	80a0d2c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 80a0d28:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a0d2c:	2d02      	cmp	r5, #2
 80a0d2e:	d10e      	bne.n	80a0d4e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 80a0d30:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a0d34:	3b05      	subs	r3, #5
 80a0d36:	4620      	mov	r0, r4
 80a0d38:	b29b      	uxth	r3, r3
 80a0d3a:	f7ff fe49 	bl	80a09d0 <_ZN4MQTT5writeEhPht>
 80a0d3e:	4682      	mov	sl, r0
        MutexLocker lock(this);
 80a0d40:	a801      	add	r0, sp, #4
 80a0d42:	f7ff fd7a 	bl	80a083a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0d46:	4650      	mov	r0, sl
 80a0d48:	b003      	add	sp, #12
 80a0d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 80a0d4e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0d50:	bf08      	it	eq
 80a0d52:	f041 0102 	orreq.w	r1, r1, #2
 80a0d56:	e7ed      	b.n	80a0d34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

080a0d58 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0d5a:	9c08      	ldr	r4, [sp, #32]
 80a0d5c:	9403      	str	r4, [sp, #12]
 80a0d5e:	2400      	movs	r4, #0
 80a0d60:	9402      	str	r4, [sp, #8]
 80a0d62:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0d66:	9401      	str	r4, [sp, #4]
 80a0d68:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0d6c:	9400      	str	r4, [sp, #0]
 80a0d6e:	f7ff ff87 	bl	80a0c80 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0d72:	b004      	add	sp, #16
 80a0d74:	bd10      	pop	{r4, pc}

080a0d76 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a0d76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0d78:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0d7a:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a0d7c:	4614      	mov	r4, r2
 80a0d7e:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0d80:	f001 fe1a 	bl	80a29b8 <strlen>
 80a0d84:	2200      	movs	r2, #0
 80a0d86:	4603      	mov	r3, r0
 80a0d88:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a0d8c:	9200      	str	r2, [sp, #0]
 80a0d8e:	4631      	mov	r1, r6
 80a0d90:	4622      	mov	r2, r4
 80a0d92:	4628      	mov	r0, r5
 80a0d94:	f7ff ffe0 	bl	80a0d58 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0d98:	b004      	add	sp, #16
 80a0d9a:	bd70      	pop	{r4, r5, r6, pc}

080a0d9c <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a0d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0d9e:	4604      	mov	r4, r0
 80a0da0:	460e      	mov	r6, r1
    if (isConnected()) {
 80a0da2:	f7ff fe6c 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a0da6:	4605      	mov	r5, r0
 80a0da8:	b1c8      	cbz	r0, 80a0dde <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 80a0daa:	4621      	mov	r1, r4
 80a0dac:	a801      	add	r0, sp, #4
 80a0dae:	f7ff fd39 	bl	80a0824 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a0db2:	2262      	movs	r2, #98	; 0x62
 80a0db4:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0db6:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a0db8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0dba:	2202      	movs	r2, #2
 80a0dbc:	69e3      	ldr	r3, [r4, #28]
 80a0dbe:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0dc0:	69e3      	ldr	r3, [r4, #28]
 80a0dc2:	1232      	asrs	r2, r6, #8
 80a0dc4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0dc6:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0dc8:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a0dca:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a0dcc:	69e1      	ldr	r1, [r4, #28]
 80a0dce:	f000 fe64 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
 80a0dd2:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a0dd4:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a0dd6:	bf18      	it	ne
 80a0dd8:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a0dda:	f7ff fd2e 	bl	80a083a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0dde:	4628      	mov	r0, r5
 80a0de0:	b002      	add	sp, #8
 80a0de2:	bd70      	pop	{r4, r5, r6, pc}

080a0de4 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a0de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0de6:	4604      	mov	r4, r0
 80a0de8:	460e      	mov	r6, r1
    if (isConnected()) {
 80a0dea:	f7ff fe48 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a0dee:	4605      	mov	r5, r0
 80a0df0:	b1c8      	cbz	r0, 80a0e26 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 80a0df2:	4621      	mov	r1, r4
 80a0df4:	a801      	add	r0, sp, #4
 80a0df6:	f7ff fd15 	bl	80a0824 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a0dfa:	2272      	movs	r2, #114	; 0x72
 80a0dfc:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0dfe:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a0e00:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0e02:	2202      	movs	r2, #2
 80a0e04:	69e3      	ldr	r3, [r4, #28]
 80a0e06:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0e08:	69e3      	ldr	r3, [r4, #28]
 80a0e0a:	1232      	asrs	r2, r6, #8
 80a0e0c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0e0e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0e10:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a0e12:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a0e14:	69e1      	ldr	r1, [r4, #28]
 80a0e16:	f000 fe40 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
 80a0e1a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a0e1c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a0e1e:	bf18      	it	ne
 80a0e20:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a0e22:	f7ff fd0a 	bl	80a083a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0e26:	4628      	mov	r0, r5
 80a0e28:	b002      	add	sp, #8
 80a0e2a:	bd70      	pop	{r4, r5, r6, pc}

080a0e2c <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a0e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e30:	b087      	sub	sp, #28
 80a0e32:	af00      	add	r7, sp, #0
 80a0e34:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0e36:	f7ff fe22 	bl	80a0a7e <_ZN4MQTT11isConnectedEv>
 80a0e3a:	4681      	mov	r9, r0
 80a0e3c:	b1f8      	cbz	r0, 80a0e7e <_ZN4MQTT4loopEv+0x52>
        MutexLocker lock(this);
 80a0e3e:	4621      	mov	r1, r4
 80a0e40:	f107 0014 	add.w	r0, r7, #20
 80a0e44:	f7ff fcee 	bl	80a0824 <_ZN4MQTT11MutexLockerC1EPS_>
 80a0e48:	f000 f932 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a0e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0e52:	4606      	mov	r6, r0
 80a0e54:	4353      	muls	r3, r2
 80a0e56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a0e58:	1a82      	subs	r2, r0, r2
 80a0e5a:	429a      	cmp	r2, r3
 80a0e5c:	d803      	bhi.n	80a0e66 <_ZN4MQTT4loopEv+0x3a>
 80a0e5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0e60:	1a82      	subs	r2, r0, r2
 80a0e62:	4293      	cmp	r3, r2
 80a0e64:	d21f      	bcs.n	80a0ea6 <_ZN4MQTT4loopEv+0x7a>
            if (pingOutstanding) {
 80a0e66:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a0e6a:	b16b      	cbz	r3, 80a0e88 <_ZN4MQTT4loopEv+0x5c>
                _client.stop();
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	f000 ff89 	bl	80a1d84 <_ZN9TCPClient4stopEv>
                return false;
 80a0e72:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 80a0e76:	f107 0014 	add.w	r0, r7, #20
 80a0e7a:	f7ff fcde 	bl	80a083a <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0e7e:	4648      	mov	r0, r9
 80a0e80:	371c      	adds	r7, #28
 80a0e82:	46bd      	mov	sp, r7
 80a0e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a0e88:	21c0      	movs	r1, #192	; 0xc0
 80a0e8a:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a0e8c:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a0e8e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a0e90:	69e2      	ldr	r2, [r4, #28]
 80a0e92:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a0e94:	69e1      	ldr	r1, [r4, #28]
 80a0e96:	2202      	movs	r2, #2
 80a0e98:	f000 fdff 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a0e9c:	2301      	movs	r3, #1
                lastInActivity = t;
 80a0e9e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a0ea2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a0ea6:	4620      	mov	r0, r4
 80a0ea8:	f000 ff32 	bl	80a1d10 <_ZN9TCPClient9availableEv>
 80a0eac:	2800      	cmp	r0, #0
 80a0eae:	d0e2      	beq.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
 80a0eb0:	4620      	mov	r0, r4
 80a0eb2:	f107 0113 	add.w	r1, r7, #19
 80a0eb6:	f7ff fd2b 	bl	80a0910 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a0eba:	4683      	mov	fp, r0
 80a0ebc:	2800      	cmp	r0, #0
 80a0ebe:	d0da      	beq.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
 80a0ec0:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a0ec2:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a0ec4:	7819      	ldrb	r1, [r3, #0]
 80a0ec6:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a0eca:	2a30      	cmp	r2, #48	; 0x30
 80a0ecc:	d17d      	bne.n	80a0fca <_ZN4MQTT4loopEv+0x19e>
                    if (callback) {
 80a0ece:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a0ed2:	f1ba 0f00 	cmp.w	sl, #0
 80a0ed6:	d0ce      	beq.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a0ed8:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 80a0edc:	f8c7 d004 	str.w	sp, [r7, #4]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a0ee0:	eb03 020c 	add.w	r2, r3, ip
 80a0ee4:	7855      	ldrb	r5, [r2, #1]
 80a0ee6:	7891      	ldrb	r1, [r2, #2]
 80a0ee8:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a0eec:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a0eee:	4669      	mov	r1, sp
 80a0ef0:	f105 0208 	add.w	r2, r5, #8
 80a0ef4:	08d2      	lsrs	r2, r2, #3
 80a0ef6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a0efa:	4695      	mov	sp, r2
 80a0efc:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a0efe:	f10c 0203 	add.w	r2, ip, #3
 80a0f02:	60fa      	str	r2, [r7, #12]
 80a0f04:	eb03 0e02 	add.w	lr, r3, r2
 80a0f08:	eb0d 0205 	add.w	r2, sp, r5
 80a0f0c:	f8c7 d008 	str.w	sp, [r7, #8]
 80a0f10:	603a      	str	r2, [r7, #0]
 80a0f12:	683a      	ldr	r2, [r7, #0]
 80a0f14:	68b9      	ldr	r1, [r7, #8]
 80a0f16:	428a      	cmp	r2, r1
 80a0f18:	d006      	beq.n	80a0f28 <_ZN4MQTT4loopEv+0xfc>
                            topic[i] = buffer[llen+3+i];
 80a0f1a:	460a      	mov	r2, r1
 80a0f1c:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a0f20:	f802 8b01 	strb.w	r8, [r2], #1
 80a0f24:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a0f26:	e7f4      	b.n	80a0f12 <_ZN4MQTT4loopEv+0xe6>
                        topic[tl] = 0;
 80a0f28:	2200      	movs	r2, #0
 80a0f2a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a0f2c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0f30:	68f9      	ldr	r1, [r7, #12]
 80a0f32:	f008 0806 	and.w	r8, r8, #6
 80a0f36:	ebab 020c 	sub.w	r2, fp, ip
 80a0f3a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a0f3c:	f1b8 0f02 	cmp.w	r8, #2
 80a0f40:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0f44:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a0f46:	d124      	bne.n	80a0f92 <_ZN4MQTT4loopEv+0x166>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0f48:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a0f4c:	4419      	add	r1, r3
 80a0f4e:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a0f52:	f10c 0105 	add.w	r1, ip, #5
 80a0f56:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a0f58:	3a02      	subs	r2, #2
 80a0f5a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0f5c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a0f60:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a0f62:	2240      	movs	r2, #64	; 0x40
 80a0f64:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0f66:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a0f6a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a0f6c:	69e3      	ldr	r3, [r4, #28]
 80a0f6e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a0f72:	69e3      	ldr	r3, [r4, #28]
 80a0f74:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a0f78:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a0f7a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a0f7c:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a0f7e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a0f82:	4620      	mov	r0, r4
 80a0f84:	69e1      	ldr	r1, [r4, #28]
 80a0f86:	f000 fd88 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a0f8a:	6266      	str	r6, [r4, #36]	; 0x24
 80a0f8c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80a0f90:	e771      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a0f92:	f1b8 0f04 	cmp.w	r8, #4
 80a0f96:	d115      	bne.n	80a0fc4 <_ZN4MQTT4loopEv+0x198>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0f98:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a0f9c:	4419      	add	r1, r3
 80a0f9e:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 80a0fa2:	f10c 0105 	add.w	r1, ip, #5
 80a0fa6:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a0fa8:	3a02      	subs	r2, #2
 80a0faa:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0fac:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a0fb0:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a0fb2:	2250      	movs	r2, #80	; 0x50
 80a0fb4:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0fb6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a0fba:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 80a0fbc:	2202      	movs	r2, #2
 80a0fbe:	69e3      	ldr	r3, [r4, #28]
 80a0fc0:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 80a0fc2:	e7d6      	b.n	80a0f72 <_ZN4MQTT4loopEv+0x146>
                            callback(topic,payload,len-llen-3-tl);
 80a0fc4:	4419      	add	r1, r3
 80a0fc6:	47d0      	blx	sl
 80a0fc8:	e7e0      	b.n	80a0f8c <_ZN4MQTT4loopEv+0x160>
                } else if (type == MQTTPUBREC) {
 80a0fca:	2a50      	cmp	r2, #80	; 0x50
 80a0fcc:	d108      	bne.n	80a0fe0 <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a0fce:	789a      	ldrb	r2, [r3, #2]
 80a0fd0:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a0fd2:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a0fd4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a0fd8:	b289      	uxth	r1, r1
 80a0fda:	f7ff fedf 	bl	80a0d9c <_ZN4MQTT14publishReleaseEt>
 80a0fde:	e74a      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBACK) {
 80a0fe0:	2a40      	cmp	r2, #64	; 0x40
 80a0fe2:	d112      	bne.n	80a100a <_ZN4MQTT4loopEv+0x1de>
                if (qoscallback) {
 80a0fe4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a0fe6:	2a00      	cmp	r2, #0
 80a0fe8:	f43f af45 	beq.w	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a0fec:	f1bb 0f04 	cmp.w	fp, #4
 80a0ff0:	f47f af41 	bne.w	80a0e76 <_ZN4MQTT4loopEv+0x4a>
 80a0ff4:	f011 0f06 	tst.w	r1, #6
 80a0ff8:	f47f af3d 	bne.w	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                        msgId = (buffer[2]<<8)+buffer[3];
 80a0ffc:	7899      	ldrb	r1, [r3, #2]
 80a0ffe:	78d8      	ldrb	r0, [r3, #3]
 80a1000:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 80a1004:	b280      	uxth	r0, r0
 80a1006:	4790      	blx	r2
 80a1008:	e735      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBREL) {
 80a100a:	2a60      	cmp	r2, #96	; 0x60
 80a100c:	d108      	bne.n	80a1020 <_ZN4MQTT4loopEv+0x1f4>
                msgId = (buffer[2] << 8) + buffer[3];
 80a100e:	789a      	ldrb	r2, [r3, #2]
 80a1010:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 80a1012:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 80a1014:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 80a1018:	b289      	uxth	r1, r1
 80a101a:	f7ff fee3 	bl	80a0de4 <_ZN4MQTT15publishCompleteEt>
 80a101e:	e72a      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBCOMP) {
 80a1020:	2a70      	cmp	r2, #112	; 0x70
 80a1022:	d0df      	beq.n	80a0fe4 <_ZN4MQTT4loopEv+0x1b8>
                } else if (type == MQTTSUBACK) {
 80a1024:	2a90      	cmp	r2, #144	; 0x90
 80a1026:	f43f af26 	beq.w	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGREQ) {
 80a102a:	2ac0      	cmp	r2, #192	; 0xc0
 80a102c:	d10a      	bne.n	80a1044 <_ZN4MQTT4loopEv+0x218>
                    buffer[0] = MQTTPINGRESP;
 80a102e:	22d0      	movs	r2, #208	; 0xd0
 80a1030:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a1032:	2200      	movs	r2, #0
 80a1034:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a1036:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a1038:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a103a:	69e1      	ldr	r1, [r4, #28]
 80a103c:	2202      	movs	r2, #2
 80a103e:	f000 fd2c 	bl	80a1a9a <_ZN9TCPClient5writeEPKhj>
 80a1042:	e718      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
 80a1044:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a1046:	bf04      	itt	eq
 80a1048:	2300      	moveq	r3, #0
 80a104a:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a104e:	e712      	b.n	80a0e76 <_ZN4MQTT4loopEv+0x4a>

080a1050 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <os_mutex_create+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601d0 	.word	0x080601d0

080a1060 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <os_mutex_lock+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	080601d0 	.word	0x080601d0

080a1070 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <os_mutex_unlock+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601d0 	.word	0x080601d0

080a1080 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <os_mutex_recursive_create+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	080601d0 	.word	0x080601d0

080a1090 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1090:	b508      	push	{r3, lr}
 80a1092:	4b02      	ldr	r3, [pc, #8]	; (80a109c <os_mutex_recursive_destroy+0xc>)
 80a1094:	681b      	ldr	r3, [r3, #0]
 80a1096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1098:	9301      	str	r3, [sp, #4]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	080601d0 	.word	0x080601d0

080a10a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a10a0:	b508      	push	{r3, lr}
 80a10a2:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <HAL_RNG_GetRandomNumber+0xc>)
 80a10a4:	681b      	ldr	r3, [r3, #0]
 80a10a6:	685b      	ldr	r3, [r3, #4]
 80a10a8:	9301      	str	r3, [sp, #4]
 80a10aa:	bd08      	pop	{r3, pc}
 80a10ac:	0806019c 	.word	0x0806019c

080a10b0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a10b0:	b508      	push	{r3, lr}
 80a10b2:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a10b4:	681b      	ldr	r3, [r3, #0]
 80a10b6:	695b      	ldr	r3, [r3, #20]
 80a10b8:	9301      	str	r3, [sp, #4]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	0806019c 	.word	0x0806019c

080a10c0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a10c0:	b508      	push	{r3, lr}
 80a10c2:	4b02      	ldr	r3, [pc, #8]	; (80a10cc <hal_rtc_time_is_valid+0xc>)
 80a10c4:	681b      	ldr	r3, [r3, #0]
 80a10c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	bd08      	pop	{r3, pc}
 80a10cc:	0806019c 	.word	0x0806019c

080a10d0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <hal_rtc_get_time+0xc>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a10d8:	9301      	str	r3, [sp, #4]
 80a10da:	bd08      	pop	{r3, pc}
 80a10dc:	0806019c 	.word	0x0806019c

080a10e0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a10e0:	b508      	push	{r3, lr}
 80a10e2:	4b02      	ldr	r3, [pc, #8]	; (80a10ec <HAL_Pin_Mode+0xc>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	689b      	ldr	r3, [r3, #8]
 80a10e8:	9301      	str	r3, [sp, #4]
 80a10ea:	bd08      	pop	{r3, pc}
 80a10ec:	080601b0 	.word	0x080601b0

080a10f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a10f0:	b508      	push	{r3, lr}
 80a10f2:	4b02      	ldr	r3, [pc, #8]	; (80a10fc <HAL_Get_Pin_Mode+0xc>)
 80a10f4:	681b      	ldr	r3, [r3, #0]
 80a10f6:	68db      	ldr	r3, [r3, #12]
 80a10f8:	9301      	str	r3, [sp, #4]
 80a10fa:	bd08      	pop	{r3, pc}
 80a10fc:	080601b0 	.word	0x080601b0

080a1100 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1100:	b508      	push	{r3, lr}
 80a1102:	4b02      	ldr	r3, [pc, #8]	; (80a110c <HAL_GPIO_Write+0xc>)
 80a1104:	681b      	ldr	r3, [r3, #0]
 80a1106:	691b      	ldr	r3, [r3, #16]
 80a1108:	9301      	str	r3, [sp, #4]
 80a110a:	bd08      	pop	{r3, pc}
 80a110c:	080601b0 	.word	0x080601b0

080a1110 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1110:	b508      	push	{r3, lr}
 80a1112:	4b02      	ldr	r3, [pc, #8]	; (80a111c <hal_i2c_begin+0xc>)
 80a1114:	681b      	ldr	r3, [r3, #0]
 80a1116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1118:	9301      	str	r3, [sp, #4]
 80a111a:	bd08      	pop	{r3, pc}
 80a111c:	080601ac 	.word	0x080601ac

080a1120 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1120:	b508      	push	{r3, lr}
 80a1122:	4b02      	ldr	r3, [pc, #8]	; (80a112c <hal_i2c_begin_transmission+0xc>)
 80a1124:	681b      	ldr	r3, [r3, #0]
 80a1126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1128:	9301      	str	r3, [sp, #4]
 80a112a:	bd08      	pop	{r3, pc}
 80a112c:	080601ac 	.word	0x080601ac

080a1130 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1130:	b508      	push	{r3, lr}
 80a1132:	4b02      	ldr	r3, [pc, #8]	; (80a113c <hal_i2c_end_transmission+0xc>)
 80a1134:	681b      	ldr	r3, [r3, #0]
 80a1136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1138:	9301      	str	r3, [sp, #4]
 80a113a:	bd08      	pop	{r3, pc}
 80a113c:	080601ac 	.word	0x080601ac

080a1140 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1140:	b508      	push	{r3, lr}
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <hal_i2c_write+0xc>)
 80a1144:	681b      	ldr	r3, [r3, #0]
 80a1146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	bd08      	pop	{r3, pc}
 80a114c:	080601ac 	.word	0x080601ac

080a1150 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1150:	b508      	push	{r3, lr}
 80a1152:	4b02      	ldr	r3, [pc, #8]	; (80a115c <hal_i2c_available+0xc>)
 80a1154:	681b      	ldr	r3, [r3, #0]
 80a1156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1158:	9301      	str	r3, [sp, #4]
 80a115a:	bd08      	pop	{r3, pc}
 80a115c:	080601ac 	.word	0x080601ac

080a1160 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <hal_i2c_read+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	080601ac 	.word	0x080601ac

080a1170 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <hal_i2c_peek+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	080601ac 	.word	0x080601ac

080a1180 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <hal_i2c_flush+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	080601ac 	.word	0x080601ac

080a1190 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <hal_i2c_is_enabled+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	080601ac 	.word	0x080601ac

080a11a0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a11a0:	b508      	push	{r3, lr}
 80a11a2:	4b03      	ldr	r3, [pc, #12]	; (80a11b0 <hal_i2c_init+0x10>)
 80a11a4:	681b      	ldr	r3, [r3, #0]
 80a11a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a11aa:	9301      	str	r3, [sp, #4]
 80a11ac:	bd08      	pop	{r3, pc}
 80a11ae:	0000      	.short	0x0000
 80a11b0:	080601ac 	.word	0x080601ac

080a11b4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b03      	ldr	r3, [pc, #12]	; (80a11c4 <hal_i2c_request_ex+0x10>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a11be:	9301      	str	r3, [sp, #4]
 80a11c0:	bd08      	pop	{r3, pc}
 80a11c2:	0000      	.short	0x0000
 80a11c4:	080601ac 	.word	0x080601ac

080a11c8 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a11c8:	b508      	push	{r3, lr}
 80a11ca:	4b02      	ldr	r3, [pc, #8]	; (80a11d4 <socket_active_status+0xc>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	681b      	ldr	r3, [r3, #0]
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	bd08      	pop	{r3, pc}
 80a11d4:	080601bc 	.word	0x080601bc

080a11d8 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <socket_handle_valid+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	685b      	ldr	r3, [r3, #4]
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601bc 	.word	0x080601bc

080a11e8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <socket_create+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	689b      	ldr	r3, [r3, #8]
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	080601bc 	.word	0x080601bc

080a11f8 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a11f8:	b508      	push	{r3, lr}
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <socket_connect+0xc>)
 80a11fc:	681b      	ldr	r3, [r3, #0]
 80a11fe:	68db      	ldr	r3, [r3, #12]
 80a1200:	9301      	str	r3, [sp, #4]
 80a1202:	bd08      	pop	{r3, pc}
 80a1204:	080601bc 	.word	0x080601bc

080a1208 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1208:	b508      	push	{r3, lr}
 80a120a:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <socket_receive+0xc>)
 80a120c:	681b      	ldr	r3, [r3, #0]
 80a120e:	691b      	ldr	r3, [r3, #16]
 80a1210:	9301      	str	r3, [sp, #4]
 80a1212:	bd08      	pop	{r3, pc}
 80a1214:	080601bc 	.word	0x080601bc

080a1218 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1218:	b508      	push	{r3, lr}
 80a121a:	4b02      	ldr	r3, [pc, #8]	; (80a1224 <socket_close+0xc>)
 80a121c:	681b      	ldr	r3, [r3, #0]
 80a121e:	6a1b      	ldr	r3, [r3, #32]
 80a1220:	9301      	str	r3, [sp, #4]
 80a1222:	bd08      	pop	{r3, pc}
 80a1224:	080601bc 	.word	0x080601bc

080a1228 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1228:	b508      	push	{r3, lr}
 80a122a:	4b02      	ldr	r3, [pc, #8]	; (80a1234 <socket_handle_invalid+0xc>)
 80a122c:	681b      	ldr	r3, [r3, #0]
 80a122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1230:	9301      	str	r3, [sp, #4]
 80a1232:	bd08      	pop	{r3, pc}
 80a1234:	080601bc 	.word	0x080601bc

080a1238 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1238:	b508      	push	{r3, lr}
 80a123a:	4b02      	ldr	r3, [pc, #8]	; (80a1244 <socket_send_ex+0xc>)
 80a123c:	681b      	ldr	r3, [r3, #0]
 80a123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1240:	9301      	str	r3, [sp, #4]
 80a1242:	bd08      	pop	{r3, pc}
 80a1244:	080601bc 	.word	0x080601bc

080a1248 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1248:	b508      	push	{r3, lr}
 80a124a:	4b02      	ldr	r3, [pc, #8]	; (80a1254 <hal_spi_init+0xc>)
 80a124c:	681b      	ldr	r3, [r3, #0]
 80a124e:	69db      	ldr	r3, [r3, #28]
 80a1250:	9301      	str	r3, [sp, #4]
 80a1252:	bd08      	pop	{r3, pc}
 80a1254:	080601b4 	.word	0x080601b4

080a1258 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1258:	b508      	push	{r3, lr}
 80a125a:	4b02      	ldr	r3, [pc, #8]	; (80a1264 <hal_spi_is_enabled+0xc>)
 80a125c:	681b      	ldr	r3, [r3, #0]
 80a125e:	6a1b      	ldr	r3, [r3, #32]
 80a1260:	9301      	str	r3, [sp, #4]
 80a1262:	bd08      	pop	{r3, pc}
 80a1264:	080601b4 	.word	0x080601b4

080a1268 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1268:	b508      	push	{r3, lr}
 80a126a:	4b02      	ldr	r3, [pc, #8]	; (80a1274 <hal_usart_init+0xc>)
 80a126c:	681b      	ldr	r3, [r3, #0]
 80a126e:	699b      	ldr	r3, [r3, #24]
 80a1270:	9301      	str	r3, [sp, #4]
 80a1272:	bd08      	pop	{r3, pc}
 80a1274:	080601c4 	.word	0x080601c4

080a1278 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1278:	b508      	push	{r3, lr}
 80a127a:	4b02      	ldr	r3, [pc, #8]	; (80a1284 <hal_usart_write+0xc>)
 80a127c:	681b      	ldr	r3, [r3, #0]
 80a127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1280:	9301      	str	r3, [sp, #4]
 80a1282:	bd08      	pop	{r3, pc}
 80a1284:	080601c4 	.word	0x080601c4

080a1288 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1288:	b508      	push	{r3, lr}
 80a128a:	4b02      	ldr	r3, [pc, #8]	; (80a1294 <hal_usart_available+0xc>)
 80a128c:	681b      	ldr	r3, [r3, #0]
 80a128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1290:	9301      	str	r3, [sp, #4]
 80a1292:	bd08      	pop	{r3, pc}
 80a1294:	080601c4 	.word	0x080601c4

080a1298 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1298:	b508      	push	{r3, lr}
 80a129a:	4b02      	ldr	r3, [pc, #8]	; (80a12a4 <hal_usart_read+0xc>)
 80a129c:	681b      	ldr	r3, [r3, #0]
 80a129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12a0:	9301      	str	r3, [sp, #4]
 80a12a2:	bd08      	pop	{r3, pc}
 80a12a4:	080601c4 	.word	0x080601c4

080a12a8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a12a8:	b508      	push	{r3, lr}
 80a12aa:	4b02      	ldr	r3, [pc, #8]	; (80a12b4 <hal_usart_peek+0xc>)
 80a12ac:	681b      	ldr	r3, [r3, #0]
 80a12ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a12b0:	9301      	str	r3, [sp, #4]
 80a12b2:	bd08      	pop	{r3, pc}
 80a12b4:	080601c4 	.word	0x080601c4

080a12b8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <hal_usart_flush+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601c4 	.word	0x080601c4

080a12c8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <hal_usart_is_enabled+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601c4 	.word	0x080601c4

080a12d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <hal_usart_available_data_for_write+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601c4 	.word	0x080601c4

080a12e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <HAL_USB_USART_Init+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	681b      	ldr	r3, [r3, #0]
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080601d8 	.word	0x080601d8

080a12f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <HAL_USB_USART_Begin+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	685b      	ldr	r3, [r3, #4]
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601d8 	.word	0x080601d8

080a1308 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <HAL_USB_USART_Available_Data+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	691b      	ldr	r3, [r3, #16]
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601d8 	.word	0x080601d8

080a1318 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	695b      	ldr	r3, [r3, #20]
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080601d8 	.word	0x080601d8

080a1328 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <HAL_USB_USART_Receive_Data+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	699b      	ldr	r3, [r3, #24]
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080601d8 	.word	0x080601d8

080a1338 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <HAL_USB_USART_Send_Data+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	69db      	ldr	r3, [r3, #28]
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601d8 	.word	0x080601d8

080a1348 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <HAL_USB_USART_Flush_Data+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	6a1b      	ldr	r3, [r3, #32]
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601d8 	.word	0x080601d8

080a1358 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <HAL_USB_USART_Is_Enabled+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601d8 	.word	0x080601d8

080a1368 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <HAL_NET_SetNetWatchDog+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601c0 	.word	0x080601c0

080a1378 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <inet_gethostbyname+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601c0 	.word	0x080601c0

080a1388 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <log_message+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080201a8 	.word	0x080201a8

080a1398 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <system_mode+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	681b      	ldr	r3, [r3, #0]
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601a4 	.word	0x080601a4

080a13a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <set_system_mode+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	685b      	ldr	r3, [r3, #4]
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601a4 	.word	0x080601a4

080a13b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <system_delay_ms+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	695b      	ldr	r3, [r3, #20]
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601a4 	.word	0x080601a4

080a13c8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <system_thread_get_state+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601a4 	.word	0x080601a4

080a13d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b03      	ldr	r3, [pc, #12]	; (80a13e8 <system_ctrl_set_app_request_handler+0x10>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a13e2:	9301      	str	r3, [sp, #4]
 80a13e4:	bd08      	pop	{r3, pc}
 80a13e6:	0000      	.short	0x0000
 80a13e8:	080601a4 	.word	0x080601a4

080a13ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a13ec:	b508      	push	{r3, lr}
 80a13ee:	4b03      	ldr	r3, [pc, #12]	; (80a13fc <system_ctrl_set_result+0x10>)
 80a13f0:	681b      	ldr	r3, [r3, #0]
 80a13f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a13f6:	9301      	str	r3, [sp, #4]
 80a13f8:	bd08      	pop	{r3, pc}
 80a13fa:	0000      	.short	0x0000
 80a13fc:	080601a4 	.word	0x080601a4

080a1400 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <spark_process+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	689b      	ldr	r3, [r3, #8]
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601cc 	.word	0x080601cc

080a1410 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <spark_cloud_flag_connected+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	695b      	ldr	r3, [r3, #20]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601cc 	.word	0x080601cc

080a1420 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <spark_sync_time_pending+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601cc 	.word	0x080601cc

080a1430 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601cc 	.word	0x080601cc

080a1440 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <network_connect+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	685b      	ldr	r3, [r3, #4]
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601c8 	.word	0x080601c8

080a1450 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <network_connecting+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	689b      	ldr	r3, [r3, #8]
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601c8 	.word	0x080601c8

080a1460 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <network_disconnect+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	68db      	ldr	r3, [r3, #12]
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601c8 	.word	0x080601c8

080a1470 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <network_ready+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	691b      	ldr	r3, [r3, #16]
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601c8 	.word	0x080601c8

080a1480 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <network_on+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	695b      	ldr	r3, [r3, #20]
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601c8 	.word	0x080601c8

080a1490 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <network_off+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	699b      	ldr	r3, [r3, #24]
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601c8 	.word	0x080601c8

080a14a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <network_listen+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	69db      	ldr	r3, [r3, #28]
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601c8 	.word	0x080601c8

080a14b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b02      	ldr	r3, [pc, #8]	; (80a14bc <network_listening+0xc>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	6a1b      	ldr	r3, [r3, #32]
 80a14b8:	9301      	str	r3, [sp, #4]
 80a14ba:	bd08      	pop	{r3, pc}
 80a14bc:	080601c8 	.word	0x080601c8

080a14c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <network_set_listen_timeout+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601c8 	.word	0x080601c8

080a14d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <network_get_listen_timeout+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601c8 	.word	0x080601c8

080a14e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <network_is_on+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601c8 	.word	0x080601c8

080a14f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <network_is_off+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601c8 	.word	0x080601c8

080a1500 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <malloc+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	681b      	ldr	r3, [r3, #0]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601a0 	.word	0x080601a0

080a1510 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <free+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	685b      	ldr	r3, [r3, #4]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601a0 	.word	0x080601a0

080a1520 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <realloc+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	689b      	ldr	r3, [r3, #8]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601a0 	.word	0x080601a0

080a1530 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <newlib_impure_ptr_callback+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601a0 	.word	0x080601a0

080a1540 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1540:	2100      	movs	r1, #0
 80a1542:	f7ff bf39 	b.w	80a13b8 <system_delay_ms>

080a1546 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1546:	4770      	bx	lr

080a1548 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a154a:	4606      	mov	r6, r0
 80a154c:	4615      	mov	r5, r2
 80a154e:	460c      	mov	r4, r1
 80a1550:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1552:	42bc      	cmp	r4, r7
 80a1554:	d006      	beq.n	80a1564 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1556:	6833      	ldr	r3, [r6, #0]
 80a1558:	4630      	mov	r0, r6
 80a155a:	689b      	ldr	r3, [r3, #8]
 80a155c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1560:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1562:	e7f6      	b.n	80a1552 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1564:	4628      	mov	r0, r5
 80a1566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1568 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1568:	2200      	movs	r2, #0
 80a156a:	7c00      	ldrb	r0, [r0, #16]
 80a156c:	f7ff bde8 	b.w	80a1140 <hal_i2c_write>

080a1570 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1570:	2100      	movs	r1, #0
 80a1572:	7c00      	ldrb	r0, [r0, #16]
 80a1574:	f7ff bdec 	b.w	80a1150 <hal_i2c_available>

080a1578 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1578:	2100      	movs	r1, #0
 80a157a:	7c00      	ldrb	r0, [r0, #16]
 80a157c:	f7ff bdf0 	b.w	80a1160 <hal_i2c_read>

080a1580 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1580:	2100      	movs	r1, #0
 80a1582:	7c00      	ldrb	r0, [r0, #16]
 80a1584:	f7ff bdf4 	b.w	80a1170 <hal_i2c_peek>

080a1588 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1588:	2100      	movs	r1, #0
 80a158a:	7c00      	ldrb	r0, [r0, #16]
 80a158c:	f7ff bdf8 	b.w	80a1180 <hal_i2c_flush>

080a1590 <_ZN7TwoWireD0Ev>:
 80a1590:	b510      	push	{r4, lr}
 80a1592:	4604      	mov	r4, r0
 80a1594:	2114      	movs	r1, #20
 80a1596:	f001 f891 	bl	80a26bc <_ZdlPvj>
 80a159a:	4620      	mov	r0, r4
 80a159c:	bd10      	pop	{r4, pc}
	...

080a15a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a15a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15a6:	4604      	mov	r4, r0
 80a15a8:	4608      	mov	r0, r1
 80a15aa:	2100      	movs	r1, #0
 80a15ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15b0:	4b03      	ldr	r3, [pc, #12]	; (80a15c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a15b2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15b4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a15b6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a15b8:	f7ff fdf2 	bl	80a11a0 <hal_i2c_init>
}
 80a15bc:	4620      	mov	r0, r4
 80a15be:	bd10      	pop	{r4, pc}
 80a15c0:	080a2ba8 	.word	0x080a2ba8

080a15c4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a15c4:	2300      	movs	r3, #0
 80a15c6:	7c00      	ldrb	r0, [r0, #16]
 80a15c8:	461a      	mov	r2, r3
 80a15ca:	4619      	mov	r1, r3
 80a15cc:	f7ff bda0 	b.w	80a1110 <hal_i2c_begin>

080a15d0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a15d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a15d2:	2200      	movs	r2, #0
 80a15d4:	2314      	movs	r3, #20
 80a15d6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a15da:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a15de:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a15e0:	7c00      	ldrb	r0, [r0, #16]
 80a15e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a15e6:	684b      	ldr	r3, [r1, #4]
 80a15e8:	9303      	str	r3, [sp, #12]
 80a15ea:	68cb      	ldr	r3, [r1, #12]
 80a15ec:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a15ee:	7a0b      	ldrb	r3, [r1, #8]
 80a15f0:	a901      	add	r1, sp, #4
 80a15f2:	9305      	str	r3, [sp, #20]
 80a15f4:	f7ff fdde 	bl	80a11b4 <hal_i2c_request_ex>
}
 80a15f8:	b007      	add	sp, #28
 80a15fa:	f85d fb04 	ldr.w	pc, [sp], #4

080a15fe <_ZN7TwoWire11requestFromEhjh>:
{
 80a15fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1600:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1602:	f88d 1000 	strb.w	r1, [sp]
 80a1606:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a160a:	bf18      	it	ne
 80a160c:	2301      	movne	r3, #1
 80a160e:	9103      	str	r1, [sp, #12]
 80a1610:	4669      	mov	r1, sp
    size_ = size;
 80a1612:	9201      	str	r2, [sp, #4]
 80a1614:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1618:	f7ff ffda 	bl	80a15d0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a161c:	b005      	add	sp, #20
 80a161e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1622 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1622:	2200      	movs	r2, #0
 80a1624:	7c00      	ldrb	r0, [r0, #16]
 80a1626:	f7ff bd7b 	b.w	80a1120 <hal_i2c_begin_transmission>

080a162a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a162a:	2200      	movs	r2, #0
 80a162c:	7c00      	ldrb	r0, [r0, #16]
 80a162e:	f7ff bd7f 	b.w	80a1130 <hal_i2c_end_transmission>

080a1632 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1632:	2101      	movs	r1, #1
 80a1634:	f7ff bff9 	b.w	80a162a <_ZN7TwoWire15endTransmissionEh>

080a1638 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1638:	4770      	bx	lr

080a163a <_ZN9IPAddressD0Ev>:
 80a163a:	b510      	push	{r4, lr}
 80a163c:	4604      	mov	r4, r0
 80a163e:	2118      	movs	r1, #24
 80a1640:	f001 f83c 	bl	80a26bc <_ZdlPvj>
 80a1644:	4620      	mov	r0, r4
 80a1646:	bd10      	pop	{r4, pc}

080a1648 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a164a:	460e      	mov	r6, r1
 80a164c:	2400      	movs	r4, #0
 80a164e:	f100 0708 	add.w	r7, r0, #8
 80a1652:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1654:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1658:	220a      	movs	r2, #10
 80a165a:	4630      	mov	r0, r6
 80a165c:	f000 f927 	bl	80a18ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1660:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1662:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1664:	d101      	bne.n	80a166a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1666:	4620      	mov	r0, r4
 80a1668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a166a:	2c00      	cmp	r4, #0
 80a166c:	d0f2      	beq.n	80a1654 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a166e:	212e      	movs	r1, #46	; 0x2e
 80a1670:	4630      	mov	r0, r6
 80a1672:	f000 f901 	bl	80a1878 <_ZN5Print5printEc>
 80a1676:	4404      	add	r4, r0
 80a1678:	e7ec      	b.n	80a1654 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a167c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a167c:	b510      	push	{r4, lr}
 80a167e:	4604      	mov	r4, r0
 80a1680:	4b04      	ldr	r3, [pc, #16]	; (80a1694 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1682:	2211      	movs	r2, #17
 80a1684:	2100      	movs	r1, #0
 80a1686:	f840 3b04 	str.w	r3, [r0], #4
 80a168a:	f001 f957 	bl	80a293c <memset>
}
 80a168e:	4620      	mov	r0, r4
 80a1690:	bd10      	pop	{r4, pc}
 80a1692:	bf00      	nop
 80a1694:	080a2bd0 	.word	0x080a2bd0

080a1698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1698:	4603      	mov	r3, r0
 80a169a:	4a07      	ldr	r2, [pc, #28]	; (80a16b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a169c:	b510      	push	{r4, lr}
 80a169e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a16a2:	f101 0210 	add.w	r2, r1, #16
 80a16a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a16aa:	4291      	cmp	r1, r2
 80a16ac:	f843 4b04 	str.w	r4, [r3], #4
 80a16b0:	d1f9      	bne.n	80a16a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a16b2:	780a      	ldrb	r2, [r1, #0]
 80a16b4:	701a      	strb	r2, [r3, #0]
}
 80a16b6:	bd10      	pop	{r4, pc}
 80a16b8:	080a2bd0 	.word	0x080a2bd0

080a16bc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a16bc:	4a02      	ldr	r2, [pc, #8]	; (80a16c8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a16be:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a16c2:	2204      	movs	r2, #4
 80a16c4:	7502      	strb	r2, [r0, #20]
}
 80a16c6:	4770      	bx	lr
 80a16c8:	080a2bd0 	.word	0x080a2bd0

080a16cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a16cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a16ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a16d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a16d6:	2304      	movs	r3, #4
 80a16d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a16dc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a16e0:	6044      	str	r4, [r0, #4]
 80a16e2:	7503      	strb	r3, [r0, #20]
}
 80a16e4:	bd10      	pop	{r4, pc}
	...

080a16e8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a16e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a16ea:	4d04      	ldr	r5, [pc, #16]	; (80a16fc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a16ec:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a16ee:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a16f2:	9500      	str	r5, [sp, #0]
 80a16f4:	f7ff ffea 	bl	80a16cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a16f8:	b003      	add	sp, #12
 80a16fa:	bd30      	pop	{r4, r5, pc}
 80a16fc:	080a2bd0 	.word	0x080a2bd0

080a1700 <_ZN9IPAddressaSEPKh>:
{
 80a1700:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1702:	78cb      	ldrb	r3, [r1, #3]
 80a1704:	9300      	str	r3, [sp, #0]
 80a1706:	788b      	ldrb	r3, [r1, #2]
 80a1708:	784a      	ldrb	r2, [r1, #1]
 80a170a:	7809      	ldrb	r1, [r1, #0]
 80a170c:	f7ff ffde 	bl	80a16cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1710:	b002      	add	sp, #8
 80a1712:	bd10      	pop	{r4, pc}

080a1714 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a1714:	b510      	push	{r4, lr}
 80a1716:	4604      	mov	r4, r0
 80a1718:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <_ZN9IPAddressC1EPKh+0x10>)
 80a171a:	6003      	str	r3, [r0, #0]
    *this = address;
 80a171c:	f7ff fff0 	bl	80a1700 <_ZN9IPAddressaSEPKh>
}
 80a1720:	4620      	mov	r0, r4
 80a1722:	bd10      	pop	{r4, pc}
 80a1724:	080a2bd0 	.word	0x080a2bd0

080a1728 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1728:	4b01      	ldr	r3, [pc, #4]	; (80a1730 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a172a:	4a02      	ldr	r2, [pc, #8]	; (80a1734 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a172c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a172e:	4770      	bx	lr
 80a1730:	20000124 	.word	0x20000124
 80a1734:	080a2bdc 	.word	0x080a2bdc

080a1738 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1738:	2300      	movs	r3, #0
 80a173a:	6840      	ldr	r0, [r0, #4]
 80a173c:	461a      	mov	r2, r3
 80a173e:	f7ff be7f 	b.w	80a1440 <network_connect>

080a1742 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1742:	2200      	movs	r2, #0
 80a1744:	2102      	movs	r1, #2
 80a1746:	6840      	ldr	r0, [r0, #4]
 80a1748:	f7ff be8a 	b.w	80a1460 <network_disconnect>

080a174c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a174c:	2200      	movs	r2, #0
 80a174e:	6840      	ldr	r0, [r0, #4]
 80a1750:	4611      	mov	r1, r2
 80a1752:	f7ff be7d 	b.w	80a1450 <network_connecting>

080a1756 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1756:	2200      	movs	r2, #0
 80a1758:	6840      	ldr	r0, [r0, #4]
 80a175a:	4611      	mov	r1, r2
 80a175c:	f7ff be88 	b.w	80a1470 <network_ready>

080a1760 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1760:	2300      	movs	r3, #0
 80a1762:	6840      	ldr	r0, [r0, #4]
 80a1764:	461a      	mov	r2, r3
 80a1766:	4619      	mov	r1, r3
 80a1768:	f7ff be8a 	b.w	80a1480 <network_on>

080a176c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a176c:	2300      	movs	r3, #0
 80a176e:	6840      	ldr	r0, [r0, #4]
 80a1770:	461a      	mov	r2, r3
 80a1772:	4619      	mov	r1, r3
 80a1774:	f7ff be8c 	b.w	80a1490 <network_off>

080a1778 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1778:	2100      	movs	r1, #0
 80a177a:	6840      	ldr	r0, [r0, #4]
 80a177c:	f7ff beb0 	b.w	80a14e0 <network_is_on>

080a1780 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1780:	2100      	movs	r1, #0
 80a1782:	6840      	ldr	r0, [r0, #4]
 80a1784:	f7ff beb4 	b.w	80a14f0 <network_is_off>

080a1788 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1788:	2200      	movs	r2, #0
 80a178a:	6840      	ldr	r0, [r0, #4]
 80a178c:	f081 0101 	eor.w	r1, r1, #1
 80a1790:	f7ff be86 	b.w	80a14a0 <network_listen>

080a1794 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1794:	2200      	movs	r2, #0
 80a1796:	6840      	ldr	r0, [r0, #4]
 80a1798:	f7ff be92 	b.w	80a14c0 <network_set_listen_timeout>

080a179c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a179c:	2200      	movs	r2, #0
 80a179e:	6840      	ldr	r0, [r0, #4]
 80a17a0:	4611      	mov	r1, r2
 80a17a2:	f7ff be95 	b.w	80a14d0 <network_get_listen_timeout>

080a17a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a17a6:	2200      	movs	r2, #0
 80a17a8:	6840      	ldr	r0, [r0, #4]
 80a17aa:	4611      	mov	r1, r2
 80a17ac:	f7ff be80 	b.w	80a14b0 <network_listening>

080a17b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a17b0:	b570      	push	{r4, r5, r6, lr}
 80a17b2:	4615      	mov	r5, r2
 80a17b4:	b08e      	sub	sp, #56	; 0x38
 80a17b6:	4604      	mov	r4, r0
    IPAddress addr;
 80a17b8:	a808      	add	r0, sp, #32
 80a17ba:	f7ff ff5f 	bl	80a167c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a17be:	2211      	movs	r2, #17
 80a17c0:	2100      	movs	r1, #0
 80a17c2:	a803      	add	r0, sp, #12
 80a17c4:	f001 f8ba 	bl	80a293c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a17c8:	2600      	movs	r6, #0
 80a17ca:	4628      	mov	r0, r5
 80a17cc:	f001 f8f4 	bl	80a29b8 <strlen>
 80a17d0:	4b0a      	ldr	r3, [pc, #40]	; (80a17fc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a17d2:	9600      	str	r6, [sp, #0]
 80a17d4:	b281      	uxth	r1, r0
 80a17d6:	685b      	ldr	r3, [r3, #4]
 80a17d8:	4628      	mov	r0, r5
 80a17da:	aa03      	add	r2, sp, #12
 80a17dc:	f7ff fdcc 	bl	80a1378 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a17e0:	b130      	cbz	r0, 80a17f0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a17e2:	4631      	mov	r1, r6
 80a17e4:	4620      	mov	r0, r4
 80a17e6:	f7ff ff69 	bl	80a16bc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a17ea:	4620      	mov	r0, r4
 80a17ec:	b00e      	add	sp, #56	; 0x38
 80a17ee:	bd70      	pop	{r4, r5, r6, pc}
 80a17f0:	4620      	mov	r0, r4
 80a17f2:	a903      	add	r1, sp, #12
 80a17f4:	f7ff ff50 	bl	80a1698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a17f8:	e7f7      	b.n	80a17ea <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a17fa:	bf00      	nop
 80a17fc:	200005a8 	.word	0x200005a8

080a1800 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1800:	4a03      	ldr	r2, [pc, #12]	; (80a1810 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1802:	4b04      	ldr	r3, [pc, #16]	; (80a1814 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1804:	2804      	cmp	r0, #4
 80a1806:	bf14      	ite	ne
 80a1808:	4610      	movne	r0, r2
 80a180a:	4618      	moveq	r0, r3
 80a180c:	4770      	bx	lr
 80a180e:	bf00      	nop
 80a1810:	20000128 	.word	0x20000128
 80a1814:	200005a8 	.word	0x200005a8

080a1818 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1818:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a181a:	4a03      	ldr	r2, [pc, #12]	; (80a1828 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a181c:	601a      	str	r2, [r3, #0]
 80a181e:	2200      	movs	r2, #0
 80a1820:	605a      	str	r2, [r3, #4]

} // spark
 80a1822:	4770      	bx	lr
 80a1824:	20000128 	.word	0x20000128
 80a1828:	080a2be8 	.word	0x080a2be8

080a182c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a182e:	4606      	mov	r6, r0
 80a1830:	460d      	mov	r5, r1
  size_t n = 0;
 80a1832:	2400      	movs	r4, #0
 80a1834:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1836:	42bd      	cmp	r5, r7
 80a1838:	d00c      	beq.n	80a1854 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a183a:	6833      	ldr	r3, [r6, #0]
 80a183c:	4630      	mov	r0, r6
 80a183e:	689b      	ldr	r3, [r3, #8]
 80a1840:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1844:	4798      	blx	r3
     if (chunk>=0)
 80a1846:	1e03      	subs	r3, r0, #0
 80a1848:	db01      	blt.n	80a184e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a184a:	441c      	add	r4, r3
  while (size--) {
 80a184c:	e7f3      	b.n	80a1836 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a184e:	2c00      	cmp	r4, #0
 80a1850:	bf08      	it	eq
 80a1852:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1854:	4620      	mov	r0, r4
 80a1856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1858 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1858:	b570      	push	{r4, r5, r6, lr}
 80a185a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a185c:	460c      	mov	r4, r1
    }
 80a185e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1860:	b149      	cbz	r1, 80a1876 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1862:	f001 f8a9 	bl	80a29b8 <strlen>
 80a1866:	682b      	ldr	r3, [r5, #0]
 80a1868:	4602      	mov	r2, r0
 80a186a:	4621      	mov	r1, r4
 80a186c:	4628      	mov	r0, r5
    }
 80a186e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1872:	68db      	ldr	r3, [r3, #12]
 80a1874:	4718      	bx	r3
    }
 80a1876:	bd70      	pop	{r4, r5, r6, pc}

080a1878 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1878:	6803      	ldr	r3, [r0, #0]
 80a187a:	689b      	ldr	r3, [r3, #8]
 80a187c:	4718      	bx	r3

080a187e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a187e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1880:	210d      	movs	r1, #13
{
 80a1882:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1884:	f7ff fff8 	bl	80a1878 <_ZN5Print5printEc>
  n += print('\n');
 80a1888:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a188a:	4604      	mov	r4, r0
  n += print('\n');
 80a188c:	4628      	mov	r0, r5
 80a188e:	f7ff fff3 	bl	80a1878 <_ZN5Print5printEc>
  return n;
}
 80a1892:	4420      	add	r0, r4
 80a1894:	bd38      	pop	{r3, r4, r5, pc}

080a1896 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1896:	b538      	push	{r3, r4, r5, lr}
 80a1898:	4605      	mov	r5, r0
  return write(str);
 80a189a:	f7ff ffdd 	bl	80a1858 <_ZN5Print5writeEPKc>
 80a189e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a18a0:	4628      	mov	r0, r5
 80a18a2:	f7ff ffec 	bl	80a187e <_ZN5Print7printlnEv>
  return n;
}
 80a18a6:	4420      	add	r0, r4
 80a18a8:	bd38      	pop	{r3, r4, r5, pc}

080a18aa <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a18aa:	f7ff bff4 	b.w	80a1896 <_ZN5Print7printlnEPKc>

080a18ae <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a18ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a18b0:	2a01      	cmp	r2, #1
 80a18b2:	bf98      	it	ls
 80a18b4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a18b6:	b530      	push	{r4, r5, lr}
 80a18b8:	b08b      	sub	sp, #44	; 0x2c
 80a18ba:	460c      	mov	r4, r1
  *str = '\0';
 80a18bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a18c0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a18c2:	4625      	mov	r5, r4
 80a18c4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a18c8:	fb04 5312 	mls	r3, r4, r2, r5
 80a18cc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a18ce:	2b09      	cmp	r3, #9
 80a18d0:	bf94      	ite	ls
 80a18d2:	3330      	addls	r3, #48	; 0x30
 80a18d4:	3337      	addhi	r3, #55	; 0x37
 80a18d6:	b2db      	uxtb	r3, r3
  } while(n);
 80a18d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a18da:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a18de:	d9f0      	bls.n	80a18c2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a18e0:	f7ff ffba 	bl	80a1858 <_ZN5Print5writeEPKc>
}
 80a18e4:	b00b      	add	sp, #44	; 0x2c
 80a18e6:	bd30      	pop	{r4, r5, pc}

080a18e8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18e8:	2200      	movs	r2, #0
 80a18ea:	4b01      	ldr	r3, [pc, #4]	; (80a18f0 <_GLOBAL__sub_I_RGB+0x8>)
 80a18ec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a18ee:	4770      	bx	lr
 80a18f0:	20000130 	.word	0x20000130

080a18f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a18f4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a18f6:	2600      	movs	r6, #0
 80a18f8:	4604      	mov	r4, r0
 80a18fa:	460d      	mov	r5, r1
 80a18fc:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1900:	f7ff fbbe 	bl	80a1080 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1904:	4628      	mov	r0, r5
    _spi = spi;
 80a1906:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1908:	f7ff fc9e 	bl	80a1248 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a190c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a190e:	6066      	str	r6, [r4, #4]
}
 80a1910:	bd70      	pop	{r4, r5, r6, pc}

080a1912 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1912:	b510      	push	{r4, lr}
 80a1914:	4604      	mov	r4, r0
{
	free(buffer);
 80a1916:	6800      	ldr	r0, [r0, #0]
 80a1918:	f7ff fdfa 	bl	80a1510 <free>
}
 80a191c:	4620      	mov	r0, r4
 80a191e:	bd10      	pop	{r4, pc}

080a1920 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1920:	b510      	push	{r4, lr}
 80a1922:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1924:	6800      	ldr	r0, [r0, #0]
 80a1926:	b108      	cbz	r0, 80a192c <_ZN6String10invalidateEv+0xc>
 80a1928:	f7ff fdf2 	bl	80a1510 <free>
	buffer = NULL;
 80a192c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a192e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1932:	6023      	str	r3, [r4, #0]
}
 80a1934:	bd10      	pop	{r4, pc}

080a1936 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1936:	b538      	push	{r3, r4, r5, lr}
 80a1938:	4604      	mov	r4, r0
 80a193a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a193c:	6800      	ldr	r0, [r0, #0]
 80a193e:	3101      	adds	r1, #1
 80a1940:	f7ff fdee 	bl	80a1520 <realloc>
	if (newbuffer) {
 80a1944:	b110      	cbz	r0, 80a194c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1946:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a194a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a194c:	bd38      	pop	{r3, r4, r5, pc}

080a194e <_ZN6String7reserveEj>:
{
 80a194e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1950:	6803      	ldr	r3, [r0, #0]
{
 80a1952:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1954:	b123      	cbz	r3, 80a1960 <_ZN6String7reserveEj+0x12>
 80a1956:	6843      	ldr	r3, [r0, #4]
 80a1958:	428b      	cmp	r3, r1
 80a195a:	d301      	bcc.n	80a1960 <_ZN6String7reserveEj+0x12>
 80a195c:	2001      	movs	r0, #1
}
 80a195e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1960:	4620      	mov	r0, r4
 80a1962:	f7ff ffe8 	bl	80a1936 <_ZN6String12changeBufferEj>
 80a1966:	2800      	cmp	r0, #0
 80a1968:	d0f9      	beq.n	80a195e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a196a:	68a3      	ldr	r3, [r4, #8]
 80a196c:	2b00      	cmp	r3, #0
 80a196e:	d1f5      	bne.n	80a195c <_ZN6String7reserveEj+0xe>
 80a1970:	6822      	ldr	r2, [r4, #0]
 80a1972:	7013      	strb	r3, [r2, #0]
 80a1974:	e7f2      	b.n	80a195c <_ZN6String7reserveEj+0xe>

080a1976 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1976:	b570      	push	{r4, r5, r6, lr}
 80a1978:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a197a:	4611      	mov	r1, r2
{
 80a197c:	4604      	mov	r4, r0
 80a197e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1980:	f7ff ffe5 	bl	80a194e <_ZN6String7reserveEj>
 80a1984:	b920      	cbnz	r0, 80a1990 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1986:	4620      	mov	r0, r4
 80a1988:	f7ff ffca 	bl	80a1920 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a198c:	4620      	mov	r0, r4
 80a198e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1990:	462a      	mov	r2, r5
 80a1992:	4631      	mov	r1, r6
 80a1994:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1996:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1998:	f000 ffc2 	bl	80a2920 <memcpy>
	buffer[len] = 0;
 80a199c:	2100      	movs	r1, #0
 80a199e:	6822      	ldr	r2, [r4, #0]
 80a19a0:	68a3      	ldr	r3, [r4, #8]
 80a19a2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a19a4:	e7f2      	b.n	80a198c <_ZN6String4copyEPKcj+0x16>

080a19a6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a19a6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a19a8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a19aa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a19ac:	460d      	mov	r5, r1
	capacity = 0;
 80a19ae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a19b2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a19b4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a19b6:	b139      	cbz	r1, 80a19c8 <_ZN6StringC1EPKc+0x22>
 80a19b8:	4608      	mov	r0, r1
 80a19ba:	f000 fffd 	bl	80a29b8 <strlen>
 80a19be:	4629      	mov	r1, r5
 80a19c0:	4602      	mov	r2, r0
 80a19c2:	4620      	mov	r0, r4
 80a19c4:	f7ff ffd7 	bl	80a1976 <_ZN6String4copyEPKcj>
}
 80a19c8:	4620      	mov	r0, r4
 80a19ca:	bd38      	pop	{r3, r4, r5, pc}

080a19cc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a19cc:	b538      	push	{r3, r4, r5, lr}
 80a19ce:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a19d0:	460c      	mov	r4, r1
 80a19d2:	b149      	cbz	r1, 80a19e8 <_ZN6StringaSEPKc+0x1c>
 80a19d4:	4608      	mov	r0, r1
 80a19d6:	f000 ffef 	bl	80a29b8 <strlen>
 80a19da:	4621      	mov	r1, r4
 80a19dc:	4602      	mov	r2, r0
 80a19de:	4628      	mov	r0, r5
 80a19e0:	f7ff ffc9 	bl	80a1976 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a19e4:	4628      	mov	r0, r5
 80a19e6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a19e8:	f7ff ff9a 	bl	80a1920 <_ZN6String10invalidateEv>
 80a19ec:	e7fa      	b.n	80a19e4 <_ZN6StringaSEPKc+0x18>

080a19ee <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a19ee:	b510      	push	{r4, lr}
	buffer = NULL;
 80a19f0:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a19f2:	4604      	mov	r4, r0
 80a19f4:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a19f6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a19fa:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a19fc:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a19fe:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1a00:	a901      	add	r1, sp, #4
 80a1a02:	f000 fca7 	bl	80a2354 <ltoa>
	*this = buf;
 80a1a06:	4620      	mov	r0, r4
 80a1a08:	a901      	add	r1, sp, #4
 80a1a0a:	f7ff ffdf 	bl	80a19cc <_ZN6StringaSEPKc>
}
 80a1a0e:	4620      	mov	r0, r4
 80a1a10:	b00a      	add	sp, #40	; 0x28
 80a1a12:	bd10      	pop	{r4, pc}

080a1a14 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1a14:	b570      	push	{r4, r5, r6, lr}
 80a1a16:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1a18:	460e      	mov	r6, r1
 80a1a1a:	b909      	cbnz	r1, 80a1a20 <_ZN6String6concatEPKcj+0xc>
 80a1a1c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1a1e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1a20:	b16a      	cbz	r2, 80a1a3e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1a22:	6884      	ldr	r4, [r0, #8]
 80a1a24:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1a26:	4621      	mov	r1, r4
 80a1a28:	f7ff ff91 	bl	80a194e <_ZN6String7reserveEj>
 80a1a2c:	2800      	cmp	r0, #0
 80a1a2e:	d0f5      	beq.n	80a1a1c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1a30:	6828      	ldr	r0, [r5, #0]
 80a1a32:	68ab      	ldr	r3, [r5, #8]
 80a1a34:	4631      	mov	r1, r6
 80a1a36:	4418      	add	r0, r3
 80a1a38:	f000 ffb6 	bl	80a29a8 <strcpy>
	len = newlen;
 80a1a3c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1a3e:	2001      	movs	r0, #1
 80a1a40:	e7ed      	b.n	80a1a1e <_ZN6String6concatEPKcj+0xa>

080a1a42 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1a42:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1a44:	688a      	ldr	r2, [r1, #8]
 80a1a46:	6809      	ldr	r1, [r1, #0]
{
 80a1a48:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1a4a:	f7ff ffe3 	bl	80a1a14 <_ZN6String6concatEPKcj>
 80a1a4e:	b910      	cbnz	r0, 80a1a56 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1a50:	4620      	mov	r0, r4
 80a1a52:	f7ff ff65 	bl	80a1920 <_ZN6String10invalidateEv>
	return a;
}
 80a1a56:	4620      	mov	r0, r4
 80a1a58:	bd10      	pop	{r4, pc}
	...

080a1a5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1a5c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1a5e:	2000      	movs	r0, #0
 80a1a60:	4b04      	ldr	r3, [pc, #16]	; (80a1a74 <_GLOBAL__sub_I_System+0x18>)
 80a1a62:	601a      	str	r2, [r3, #0]
 80a1a64:	4b04      	ldr	r3, [pc, #16]	; (80a1a78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1a66:	4a05      	ldr	r2, [pc, #20]	; (80a1a7c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1a68:	6018      	str	r0, [r3, #0]
 80a1a6a:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1a6c:	7198      	strb	r0, [r3, #6]
 80a1a6e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1a70:	f7ff bc9a 	b.w	80a13a8 <set_system_mode>
 80a1a74:	2000014c 	.word	0x2000014c
 80a1a78:	20000140 	.word	0x20000140
 80a1a7c:	ffff0000 	.word	0xffff0000

080a1a80 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1a80:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a82:	6803      	ldr	r3, [r0, #0]
{
 80a1a84:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a88:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1a8a:	2201      	movs	r2, #1
 80a1a8c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1a90:	f10d 0107 	add.w	r1, sp, #7
 80a1a94:	47a0      	blx	r4
}
 80a1a96:	b002      	add	sp, #8
 80a1a98:	bd10      	pop	{r4, pc}

080a1a9a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1a9a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a9c:	6803      	ldr	r3, [r0, #0]
 80a1a9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1aa0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1aa4:	46a4      	mov	ip, r4
}
 80a1aa6:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1aa8:	4760      	bx	ip

080a1aaa <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1aaa:	b513      	push	{r0, r1, r4, lr}
 80a1aac:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a1aae:	6802      	ldr	r2, [r0, #0]
{
 80a1ab0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a1ab4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a1ab6:	f10d 0107 	add.w	r1, sp, #7
 80a1aba:	2201      	movs	r2, #1
 80a1abc:	47a0      	blx	r4
}
 80a1abe:	b002      	add	sp, #8
 80a1ac0:	bd10      	pop	{r4, pc}

080a1ac2 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a1ac2:	4770      	bx	lr

080a1ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1ac4:	4770      	bx	lr
	...

080a1ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      friend class __shared_count<_Lp>; // To be able to call _M_ptr().

      // No longer used, but code compiled against old libstdc++ headers
      // might still call it from __shared_ptr ctor to get the pointer out.
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1ac8:	b510      	push	{r4, lr}
 80a1aca:	4604      	mov	r4, r0
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 80a1acc:	4b06      	ldr	r3, [pc, #24]	; (80a1ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1ace:	4608      	mov	r0, r1
	    ||
 80a1ad0:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a1ad2:	f104 040c 	add.w	r4, r4, #12
 80a1ad6:	d004      	beq.n	80a1ae2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a1ad8:	f000 fdf4 	bl	80a26c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a1adc:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
 80a1ade:	bf08      	it	eq
 80a1ae0:	2400      	moveq	r4, #0
      }
 80a1ae2:	4620      	mov	r0, r4
 80a1ae4:	bd10      	pop	{r4, pc}
 80a1ae6:	bf00      	nop
 80a1ae8:	080a2c54 	.word	0x080a2c54

080a1aec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1aec:	b510      	push	{r4, lr}
 80a1aee:	4604      	mov	r4, r0
 80a1af0:	21ac      	movs	r1, #172	; 0xac
 80a1af2:	f000 fde3 	bl	80a26bc <_ZdlPvj>
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	bd10      	pop	{r4, pc}

080a1afa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a1afa:	f7fe bad0 	b.w	80a009e <_ZdlPv>
	...

080a1b00 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a1b00:	b538      	push	{r3, r4, r5, lr}
 80a1b02:	4b0b      	ldr	r3, [pc, #44]	; (80a1b30 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1b04:	6984      	ldr	r4, [r0, #24]
 80a1b06:	4605      	mov	r5, r0
 80a1b08:	6003      	str	r3, [r0, #0]
 80a1b0a:	b17c      	cbz	r4, 80a1b2c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1b0c:	6863      	ldr	r3, [r4, #4]
 80a1b0e:	3b01      	subs	r3, #1
 80a1b10:	6063      	str	r3, [r4, #4]
 80a1b12:	b95b      	cbnz	r3, 80a1b2c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a1b14:	6823      	ldr	r3, [r4, #0]
 80a1b16:	4620      	mov	r0, r4
 80a1b18:	689b      	ldr	r3, [r3, #8]
 80a1b1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b1c:	68a3      	ldr	r3, [r4, #8]
 80a1b1e:	3b01      	subs	r3, #1
 80a1b20:	60a3      	str	r3, [r4, #8]
 80a1b22:	b91b      	cbnz	r3, 80a1b2c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1b24:	6823      	ldr	r3, [r4, #0]
 80a1b26:	4620      	mov	r0, r4
 80a1b28:	68db      	ldr	r3, [r3, #12]
 80a1b2a:	4798      	blx	r3
 80a1b2c:	4628      	mov	r0, r5
 80a1b2e:	bd38      	pop	{r3, r4, r5, pc}
 80a1b30:	080a2c64 	.word	0x080a2c64

080a1b34 <_ZN9TCPClientD0Ev>:
 80a1b34:	b510      	push	{r4, lr}
 80a1b36:	4604      	mov	r4, r0
 80a1b38:	f7ff ffe2 	bl	80a1b00 <_ZN9TCPClientD1Ev>
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	211c      	movs	r1, #28
 80a1b40:	f000 fdbc 	bl	80a26bc <_ZdlPvj>
 80a1b44:	4620      	mov	r0, r4
 80a1b46:	bd10      	pop	{r4, pc}

080a1b48 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1b48:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a1b4a:	4604      	mov	r4, r0
 80a1b4c:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1b4e:	694d      	ldr	r5, [r1, #20]
 80a1b50:	4b04      	ldr	r3, [pc, #16]	; (80a1b64 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1b52:	358c      	adds	r5, #140	; 0x8c
 80a1b54:	f844 3b04 	str.w	r3, [r4], #4
 80a1b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1b5c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1b5e:	4630      	mov	r0, r6
 80a1b60:	7023      	strb	r3, [r4, #0]
 80a1b62:	bd70      	pop	{r4, r5, r6, pc}
 80a1b64:	080a2bd0 	.word	0x080a2bd0

080a1b68 <_ZN9TCPClient4peekEv>:
{
 80a1b68:	b510      	push	{r4, lr}
 80a1b6a:	6943      	ldr	r3, [r0, #20]
 80a1b6c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1b6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1b72:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1b76:	429a      	cmp	r2, r3
 80a1b78:	d005      	beq.n	80a1b86 <_ZN9TCPClient4peekEv+0x1e>
 80a1b7a:	6963      	ldr	r3, [r4, #20]
 80a1b7c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1b80:	4413      	add	r3, r2
 80a1b82:	7918      	ldrb	r0, [r3, #4]
}
 80a1b84:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1b86:	6803      	ldr	r3, [r0, #0]
 80a1b88:	691b      	ldr	r3, [r3, #16]
 80a1b8a:	4798      	blx	r3
 80a1b8c:	2800      	cmp	r0, #0
 80a1b8e:	d1f4      	bne.n	80a1b7a <_ZN9TCPClient4peekEv+0x12>
 80a1b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1b94:	e7f6      	b.n	80a1b84 <_ZN9TCPClient4peekEv+0x1c>

080a1b96 <_ZN9TCPClient4readEv>:
{
 80a1b96:	b510      	push	{r4, lr}
 80a1b98:	6943      	ldr	r3, [r0, #20]
 80a1b9a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1b9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1ba0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1ba4:	429a      	cmp	r2, r3
 80a1ba6:	d008      	beq.n	80a1bba <_ZN9TCPClient4readEv+0x24>
 80a1ba8:	6963      	ldr	r3, [r4, #20]
 80a1baa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1bae:	1c51      	adds	r1, r2, #1
 80a1bb0:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a1bb4:	4413      	add	r3, r2
 80a1bb6:	7918      	ldrb	r0, [r3, #4]
}
 80a1bb8:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1bba:	6803      	ldr	r3, [r0, #0]
 80a1bbc:	691b      	ldr	r3, [r3, #16]
 80a1bbe:	4798      	blx	r3
 80a1bc0:	2800      	cmp	r0, #0
 80a1bc2:	d1f1      	bne.n	80a1ba8 <_ZN9TCPClient4readEv+0x12>
 80a1bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1bc8:	e7f6      	b.n	80a1bb8 <_ZN9TCPClient4readEv+0x22>

080a1bca <_ZN9TCPClient4readEPhj>:
{
 80a1bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bcc:	6943      	ldr	r3, [r0, #20]
 80a1bce:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a1bd0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bd4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a1bd8:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a1bda:	429a      	cmp	r2, r3
{
 80a1bdc:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a1bde:	d016      	beq.n	80a1c0e <_ZN9TCPClient4readEPhj+0x44>
 80a1be0:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1be2:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a1be4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1be8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a1bec:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1bee:	42bc      	cmp	r4, r7
 80a1bf0:	bf28      	it	cs
 80a1bf2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1bf4:	3304      	adds	r3, #4
 80a1bf6:	4622      	mov	r2, r4
 80a1bf8:	4419      	add	r1, r3
 80a1bfa:	f000 fe91 	bl	80a2920 <memcpy>
 80a1bfe:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1c00:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1c04:	4423      	add	r3, r4
 80a1c06:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a1c0a:	4620      	mov	r0, r4
 80a1c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a1c0e:	6803      	ldr	r3, [r0, #0]
 80a1c10:	691b      	ldr	r3, [r3, #16]
 80a1c12:	4798      	blx	r3
 80a1c14:	2800      	cmp	r0, #0
 80a1c16:	d1e3      	bne.n	80a1be0 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a1c18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1c1c:	e7f5      	b.n	80a1c0a <_ZN9TCPClient4readEPhj+0x40>

080a1c1e <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a1c1e:	2300      	movs	r3, #0
 80a1c20:	6942      	ldr	r2, [r0, #20]
 80a1c22:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1c26:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1c28:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a1c2c:	4770      	bx	lr
	...

080a1c30 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a1c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1c34:	461f      	mov	r7, r3
    stop();
 80a1c36:	6803      	ldr	r3, [r0, #0]
{
 80a1c38:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a1c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1c3c:	4605      	mov	r5, r0
 80a1c3e:	460c      	mov	r4, r1
 80a1c40:	4616      	mov	r6, r2
    stop();
 80a1c42:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a1c44:	4638      	mov	r0, r7
 80a1c46:	f7ff fddb 	bl	80a1800 <_ZN5spark12NetworkClass4fromEm>
 80a1c4a:	6803      	ldr	r3, [r0, #0]
 80a1c4c:	68db      	ldr	r3, [r3, #12]
 80a1c4e:	4798      	blx	r3
 80a1c50:	2800      	cmp	r0, #0
 80a1c52:	d054      	beq.n	80a1cfe <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1c54:	4633      	mov	r3, r6
 80a1c56:	2206      	movs	r2, #6
 80a1c58:	2101      	movs	r1, #1
 80a1c5a:	2002      	movs	r0, #2
 80a1c5c:	9700      	str	r7, [sp, #0]
 80a1c5e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a1c62:	f7ff fac1 	bl	80a11e8 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1c66:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1c68:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1c6c:	f04f 0800 	mov.w	r8, #0
 80a1c70:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a1c74:	696b      	ldr	r3, [r5, #20]
 80a1c76:	2001      	movs	r0, #1
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	4923      	ldr	r1, [pc, #140]	; (80a1d08 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	4b23      	ldr	r3, [pc, #140]	; (80a1d0c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1c80:	aa02      	add	r2, sp, #8
 80a1c82:	9300      	str	r3, [sp, #0]
 80a1c84:	4643      	mov	r3, r8
 80a1c86:	f7ff fb7f 	bl	80a1388 <log_message>
          if (socket_handle_valid(d_->sock))
 80a1c8a:	696b      	ldr	r3, [r5, #20]
 80a1c8c:	6818      	ldr	r0, [r3, #0]
 80a1c8e:	f7ff faa3 	bl	80a11d8 <socket_handle_valid>
 80a1c92:	2800      	cmp	r0, #0
 80a1c94:	d033      	beq.n	80a1cfe <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a1c96:	4628      	mov	r0, r5
 80a1c98:	f7ff ffc1 	bl	80a1c1e <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a1c9c:	2302      	movs	r3, #2
 80a1c9e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1ca2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1ca4:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1ca6:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1caa:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1cac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a1cb0:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1cb4:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1cb6:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a1cba:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1cbe:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1cc2:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1cc6:	f7ff fb4f 	bl	80a1368 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1cca:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1ccc:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1cce:	2210      	movs	r2, #16
 80a1cd0:	6818      	ldr	r0, [r3, #0]
 80a1cd2:	a902      	add	r1, sp, #8
 80a1cd4:	f7ff fa90 	bl	80a11f8 <socket_connect>
 80a1cd8:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a1cda:	4630      	mov	r0, r6
 80a1cdc:	f7ff fb44 	bl	80a1368 <HAL_NET_SetNetWatchDog>
 80a1ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1ce2:	696e      	ldr	r6, [r5, #20]
 80a1ce4:	368c      	adds	r6, #140	; 0x8c
 80a1ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1ce8:	6823      	ldr	r3, [r4, #0]
 80a1cea:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a1cec:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a1cee:	f1b9 0f00 	cmp.w	r9, #0
 80a1cf2:	d007      	beq.n	80a1d04 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a1cf4:	682b      	ldr	r3, [r5, #0]
 80a1cf6:	4628      	mov	r0, r5
 80a1cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cfa:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1cfc:	4640      	mov	r0, r8
}
 80a1cfe:	b00b      	add	sp, #44	; 0x2c
 80a1d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1d04:	2001      	movs	r0, #1
        return connected;
 80a1d06:	e7fa      	b.n	80a1cfe <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a1d08:	080a2c1c 	.word	0x080a2c1c
 80a1d0c:	080a2c23 	.word	0x080a2c23

080a1d10 <_ZN9TCPClient9availableEv>:
{
 80a1d10:	b538      	push	{r3, r4, r5, lr}
 80a1d12:	6942      	ldr	r2, [r0, #20]
 80a1d14:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a1d16:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1d1a:	b12b      	cbz	r3, 80a1d28 <_ZN9TCPClient9availableEv+0x18>
 80a1d1c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1d20:	429a      	cmp	r2, r3
 80a1d22:	d101      	bne.n	80a1d28 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a1d24:	f7ff ff7b 	bl	80a1c1e <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1d28:	6920      	ldr	r0, [r4, #16]
 80a1d2a:	f7ff fd69 	bl	80a1800 <_ZN5spark12NetworkClass4fromEm>
 80a1d2e:	6803      	ldr	r3, [r0, #0]
 80a1d30:	68db      	ldr	r3, [r3, #12]
 80a1d32:	4798      	blx	r3
 80a1d34:	b1f8      	cbz	r0, 80a1d76 <_ZN9TCPClient9availableEv+0x66>
 80a1d36:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a1d38:	6818      	ldr	r0, [r3, #0]
 80a1d3a:	f7ff fa4d 	bl	80a11d8 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1d3e:	b1d0      	cbz	r0, 80a1d76 <_ZN9TCPClient9availableEv+0x66>
 80a1d40:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a1d42:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1d46:	297f      	cmp	r1, #127	; 0x7f
 80a1d48:	d815      	bhi.n	80a1d76 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1d4a:	1d05      	adds	r5, r0, #4
 80a1d4c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1d50:	2300      	movs	r3, #0
 80a1d52:	6800      	ldr	r0, [r0, #0]
 80a1d54:	4429      	add	r1, r5
 80a1d56:	f7ff fa57 	bl	80a1208 <socket_receive>
            if (ret > 0)
 80a1d5a:	2800      	cmp	r0, #0
 80a1d5c:	dd0b      	ble.n	80a1d76 <_ZN9TCPClient9availableEv+0x66>
 80a1d5e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a1d60:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1d64:	b90a      	cbnz	r2, 80a1d6a <_ZN9TCPClient9availableEv+0x5a>
 80a1d66:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1d6a:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a1d6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1d70:	4410      	add	r0, r2
 80a1d72:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a1d76:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a1d78:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a1d7c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a1d80:	1ac0      	subs	r0, r0, r3
 80a1d82:	bd38      	pop	{r3, r4, r5, pc}

080a1d84 <_ZN9TCPClient4stopEv>:
{
 80a1d84:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a1d86:	6943      	ldr	r3, [r0, #20]
{
 80a1d88:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a1d8a:	6818      	ldr	r0, [r3, #0]
 80a1d8c:	f7ff fa24 	bl	80a11d8 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a1d90:	b118      	cbz	r0, 80a1d9a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1d92:	6963      	ldr	r3, [r4, #20]
 80a1d94:	6818      	ldr	r0, [r3, #0]
 80a1d96:	f7ff fa3f 	bl	80a1218 <socket_close>
 80a1d9a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1d9c:	f7ff fa44 	bl	80a1228 <socket_handle_invalid>
 80a1da0:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a1da2:	6960      	ldr	r0, [r4, #20]
 80a1da4:	2211      	movs	r2, #17
 80a1da6:	2100      	movs	r1, #0
 80a1da8:	308c      	adds	r0, #140	; 0x8c
 80a1daa:	f000 fdc7 	bl	80a293c <memset>
  flush_buffer();
 80a1dae:	4620      	mov	r0, r4
}
 80a1db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a1db4:	f7ff bf33 	b.w	80a1c1e <_ZN9TCPClient12flush_bufferEv>

080a1db8 <_ZN9TCPClient6statusEv>:
{
 80a1db8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1dba:	6943      	ldr	r3, [r0, #20]
{
 80a1dbc:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a1dbe:	6818      	ldr	r0, [r3, #0]
 80a1dc0:	f7ff fa0a 	bl	80a11d8 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1dc4:	b908      	cbnz	r0, 80a1dca <_ZN9TCPClient6statusEv+0x12>
 80a1dc6:	2000      	movs	r0, #0
}
 80a1dc8:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1dca:	6920      	ldr	r0, [r4, #16]
 80a1dcc:	f7ff fd18 	bl	80a1800 <_ZN5spark12NetworkClass4fromEm>
 80a1dd0:	6803      	ldr	r3, [r0, #0]
 80a1dd2:	68db      	ldr	r3, [r3, #12]
 80a1dd4:	4798      	blx	r3
 80a1dd6:	2800      	cmp	r0, #0
 80a1dd8:	d0f5      	beq.n	80a1dc6 <_ZN9TCPClient6statusEv+0xe>
 80a1dda:	6963      	ldr	r3, [r4, #20]
 80a1ddc:	6818      	ldr	r0, [r3, #0]
 80a1dde:	f7ff f9f3 	bl	80a11c8 <socket_active_status>
 80a1de2:	fab0 f080 	clz	r0, r0
 80a1de6:	0940      	lsrs	r0, r0, #5
 80a1de8:	e7ee      	b.n	80a1dc8 <_ZN9TCPClient6statusEv+0x10>

080a1dea <_ZN9TCPClientcvbEv>:
{
 80a1dea:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1dec:	f7ff ffe4 	bl	80a1db8 <_ZN9TCPClient6statusEv>
}
 80a1df0:	3800      	subs	r0, #0
 80a1df2:	bf18      	it	ne
 80a1df4:	2001      	movne	r0, #1
 80a1df6:	bd08      	pop	{r3, pc}

080a1df8 <_ZN9TCPClient5writeEPKhjm>:
{
 80a1df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a1dfc:	2700      	movs	r7, #0
 80a1dfe:	6047      	str	r7, [r0, #4]
 80a1e00:	4604      	mov	r4, r0
 80a1e02:	460d      	mov	r5, r1
 80a1e04:	4616      	mov	r6, r2
 80a1e06:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e08:	f7ff ffd6 	bl	80a1db8 <_ZN9TCPClient6statusEv>
 80a1e0c:	b170      	cbz	r0, 80a1e2c <_ZN9TCPClient5writeEPKhjm+0x34>
 80a1e0e:	e9cd 8700 	strd	r8, r7, [sp]
 80a1e12:	6960      	ldr	r0, [r4, #20]
 80a1e14:	463b      	mov	r3, r7
 80a1e16:	4632      	mov	r2, r6
 80a1e18:	4629      	mov	r1, r5
 80a1e1a:	6800      	ldr	r0, [r0, #0]
 80a1e1c:	f7ff fa0c 	bl	80a1238 <socket_send_ex>
    if (ret < 0) {
 80a1e20:	2800      	cmp	r0, #0
 80a1e22:	da00      	bge.n	80a1e26 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a1e24:	6060      	str	r0, [r4, #4]
}
 80a1e26:	b002      	add	sp, #8
 80a1e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1e30:	e7f8      	b.n	80a1e24 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a1e32 <_ZN9TCPClient9connectedEv>:
{
 80a1e32:	b570      	push	{r4, r5, r6, lr}
 80a1e34:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a1e36:	f7ff ffbf 	bl	80a1db8 <_ZN9TCPClient6statusEv>
 80a1e3a:	b9e8      	cbnz	r0, 80a1e78 <_ZN9TCPClient9connectedEv+0x46>
 80a1e3c:	696b      	ldr	r3, [r5, #20]
 80a1e3e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1e42:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1e46:	4291      	cmp	r1, r2
 80a1e48:	d116      	bne.n	80a1e78 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a1e4a:	6818      	ldr	r0, [r3, #0]
 80a1e4c:	f7ff f9c4 	bl	80a11d8 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1e50:	b908      	cbnz	r0, 80a1e56 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a1e52:	2000      	movs	r0, #0
}
 80a1e54:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1e56:	696b      	ldr	r3, [r5, #20]
 80a1e58:	6818      	ldr	r0, [r3, #0]
 80a1e5a:	f7ff f9b5 	bl	80a11c8 <socket_active_status>
 80a1e5e:	2801      	cmp	r0, #1
 80a1e60:	4604      	mov	r4, r0
 80a1e62:	d1f6      	bne.n	80a1e52 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a1e64:	682b      	ldr	r3, [r5, #0]
 80a1e66:	4628      	mov	r0, r5
 80a1e68:	691b      	ldr	r3, [r3, #16]
 80a1e6a:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1e6c:	b930      	cbnz	r0, 80a1e7c <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a1e6e:	682b      	ldr	r3, [r5, #0]
 80a1e70:	4628      	mov	r0, r5
 80a1e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e74:	4798      	blx	r3
 80a1e76:	e7ec      	b.n	80a1e52 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a1e78:	2001      	movs	r0, #1
 80a1e7a:	e7eb      	b.n	80a1e54 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a1e7c:	4620      	mov	r0, r4
 80a1e7e:	e7e9      	b.n	80a1e54 <_ZN9TCPClient9connectedEv+0x22>

080a1e80 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a1e80:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a1e82:	b510      	push	{r4, lr}
 80a1e84:	4604      	mov	r4, r0
          total(0) {
 80a1e86:	6001      	str	r1, [r0, #0]
 80a1e88:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a1e8c:	3088      	adds	r0, #136	; 0x88
 80a1e8e:	f7ff fbf5 	bl	80a167c <_ZN9IPAddressC1Ev>
}
 80a1e92:	4620      	mov	r0, r4
 80a1e94:	bd10      	pop	{r4, pc}
	...

080a1e98 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a1e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1e9e:	2300      	movs	r3, #0
 80a1ea0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a1ea4:	4a0d      	ldr	r2, [pc, #52]	; (80a1edc <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a1ea6:	6103      	str	r3, [r0, #16]
 80a1ea8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a1eaa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a1eac:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1eae:	20ac      	movs	r0, #172	; 0xac
 80a1eb0:	460e      	mov	r6, r1
 80a1eb2:	f7fe f8f0 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a1eb6:	1e05      	subs	r5, r0, #0
 80a1eb8:	f105 070c 	add.w	r7, r5, #12
 80a1ebc:	d008      	beq.n	80a1ed0 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1ebe:	2301      	movs	r3, #1
 80a1ec0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a1ec4:	4b06      	ldr	r3, [pc, #24]	; (80a1ee0 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1ec6:	4631      	mov	r1, r6
 80a1ec8:	4638      	mov	r0, r7
 80a1eca:	602b      	str	r3, [r5, #0]
 80a1ecc:	f7ff ffd8 	bl	80a1e80 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a1ed0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a1ed2:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a1ed6:	f7ff fea2 	bl	80a1c1e <_ZN9TCPClient12flush_bufferEv>
}
 80a1eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1edc:	080a2c64 	.word	0x080a2c64
 80a1ee0:	080a2c40 	.word	0x080a2c40

080a1ee4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1ee4:	b510      	push	{r4, lr}
 80a1ee6:	4604      	mov	r4, r0
 80a1ee8:	f7ff f99e 	bl	80a1228 <socket_handle_invalid>
 80a1eec:	4601      	mov	r1, r0
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	f7ff ffd2 	bl	80a1e98 <_ZN9TCPClientC1Em>
}
 80a1ef4:	4620      	mov	r0, r4
 80a1ef6:	bd10      	pop	{r4, pc}

080a1ef8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a1ef8:	b510      	push	{r4, lr}
 80a1efa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1efc:	6800      	ldr	r0, [r0, #0]
 80a1efe:	f7ff f96b 	bl	80a11d8 <socket_handle_valid>
 80a1f02:	b110      	cbz	r0, 80a1f0a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1f04:	6820      	ldr	r0, [r4, #0]
 80a1f06:	f7ff f987 	bl	80a1218 <socket_close>
    }
}
 80a1f0a:	4620      	mov	r0, r4
 80a1f0c:	bd10      	pop	{r4, pc}

080a1f0e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a1f0e:	300c      	adds	r0, #12
 80a1f10:	f7ff bff2 	b.w	80a1ef8 <_ZN9TCPClient4DataD1Ev>

080a1f14 <_ZN9TCPClient7connectEPKctm>:
{
 80a1f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1f18:	461f      	mov	r7, r3
    stop();
 80a1f1a:	6803      	ldr	r3, [r0, #0]
{
 80a1f1c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1f20:	4606      	mov	r6, r0
 80a1f22:	460d      	mov	r5, r1
 80a1f24:	4690      	mov	r8, r2
    stop();
 80a1f26:	4798      	blx	r3
    if (Network.ready())
 80a1f28:	4813      	ldr	r0, [pc, #76]	; (80a1f78 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1f2a:	f7ff fc14 	bl	80a1756 <_ZN5spark12NetworkClass5readyEv>
 80a1f2e:	b1f0      	cbz	r0, 80a1f6e <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a1f30:	a802      	add	r0, sp, #8
 80a1f32:	f7ff fba3 	bl	80a167c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1f36:	4628      	mov	r0, r5
 80a1f38:	f000 fd3e 	bl	80a29b8 <strlen>
 80a1f3c:	2400      	movs	r4, #0
 80a1f3e:	b281      	uxth	r1, r0
 80a1f40:	463b      	mov	r3, r7
 80a1f42:	4628      	mov	r0, r5
 80a1f44:	9400      	str	r4, [sp, #0]
 80a1f46:	aa03      	add	r2, sp, #12
 80a1f48:	f7ff fa16 	bl	80a1378 <inet_gethostbyname>
 80a1f4c:	b990      	cbnz	r0, 80a1f74 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a1f4e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a1f50:	ad09      	add	r5, sp, #36	; 0x24
 80a1f52:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1f56:	4b09      	ldr	r3, [pc, #36]	; (80a1f7c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1f58:	ac03      	add	r4, sp, #12
 80a1f5a:	9308      	str	r3, [sp, #32]
 80a1f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1f60:	6823      	ldr	r3, [r4, #0]
 80a1f62:	4642      	mov	r2, r8
 80a1f64:	702b      	strb	r3, [r5, #0]
 80a1f66:	4630      	mov	r0, r6
 80a1f68:	463b      	mov	r3, r7
 80a1f6a:	a908      	add	r1, sp, #32
 80a1f6c:	47c8      	blx	r9
}
 80a1f6e:	b00f      	add	sp, #60	; 0x3c
 80a1f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a1f74:	4620      	mov	r0, r4
 80a1f76:	e7fa      	b.n	80a1f6e <_ZN9TCPClient7connectEPKctm+0x5a>
 80a1f78:	20000128 	.word	0x20000128
 80a1f7c:	080a2bd0 	.word	0x080a2bd0

080a1f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a1f80:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1f82:	2000      	movs	r0, #0
 80a1f84:	f7ff fa4c 	bl	80a1420 <spark_sync_time_pending>
 80a1f88:	b128      	cbz	r0, 80a1f96 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1f8a:	f7ff fa41 	bl	80a1410 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1f8e:	f080 0001 	eor.w	r0, r0, #1
 80a1f92:	b2c0      	uxtb	r0, r0
    }
 80a1f94:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1f96:	2001      	movs	r0, #1
 80a1f98:	e7fc      	b.n	80a1f94 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a1f9a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1f9a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1f9c:	2000      	movs	r0, #0
 80a1f9e:	f7ff f88f 	bl	80a10c0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	b9a0      	cbnz	r0, 80a1fd0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1fa6:	f7ff f9f7 	bl	80a1398 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1faa:	2801      	cmp	r0, #1
 80a1fac:	d110      	bne.n	80a1fd0 <_ZN9TimeClass7isValidEv+0x36>
 80a1fae:	4620      	mov	r0, r4
 80a1fb0:	f7ff fa0a 	bl	80a13c8 <system_thread_get_state>
 80a1fb4:	b960      	cbnz	r0, 80a1fd0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1fb6:	f7ff ffe3 	bl	80a1f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1fba:	b910      	cbnz	r0, 80a1fc2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1fbc:	f7ff fa20 	bl	80a1400 <spark_process>
        while (_while() && !_condition()) {
 80a1fc0:	e7f9      	b.n	80a1fb6 <_ZN9TimeClass7isValidEv+0x1c>
 80a1fc2:	f7ff ffdd 	bl	80a1f80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1fca:	2000      	movs	r0, #0
 80a1fcc:	f7ff b878 	b.w	80a10c0 <hal_rtc_time_is_valid>
}
 80a1fd0:	4620      	mov	r0, r4
 80a1fd2:	bd10      	pop	{r4, pc}

080a1fd4 <_ZN9TimeClass3nowEv>:
{
 80a1fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1fd6:	f7ff ffe0 	bl	80a1f9a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1fda:	2210      	movs	r2, #16
 80a1fdc:	2100      	movs	r1, #0
 80a1fde:	4668      	mov	r0, sp
 80a1fe0:	f000 fcac 	bl	80a293c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1fe4:	2100      	movs	r1, #0
 80a1fe6:	4668      	mov	r0, sp
 80a1fe8:	f7ff f872 	bl	80a10d0 <hal_rtc_get_time>
}
 80a1fec:	9800      	ldr	r0, [sp, #0]
 80a1fee:	b005      	add	sp, #20
 80a1ff0:	f85d fb04 	ldr.w	pc, [sp], #4

080a1ff4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1ff4:	4b02      	ldr	r3, [pc, #8]	; (80a2000 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1ff6:	681a      	ldr	r2, [r3, #0]
 80a1ff8:	4b02      	ldr	r3, [pc, #8]	; (80a2004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ffa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1ffc:	4770      	bx	lr
 80a1ffe:	bf00      	nop
 80a2000:	2000000c 	.word	0x2000000c
 80a2004:	20000150 	.word	0x20000150

080a2008 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2008:	4770      	bx	lr

080a200a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a200a:	7441      	strb	r1, [r0, #17]
}
 80a200c:	4770      	bx	lr

080a200e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a200e:	4770      	bx	lr

080a2010 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a2010:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2012:	7c00      	ldrb	r0, [r0, #16]
 80a2014:	f7ff f960 	bl	80a12d8 <hal_usart_available_data_for_write>
}
 80a2018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a201c:	bd08      	pop	{r3, pc}

080a201e <_ZN11USARTSerial9availableEv>:
{
 80a201e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2020:	7c00      	ldrb	r0, [r0, #16]
 80a2022:	f7ff f931 	bl	80a1288 <hal_usart_available>
}
 80a2026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a202a:	bd08      	pop	{r3, pc}

080a202c <_ZN11USARTSerial4peekEv>:
{
 80a202c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a202e:	7c00      	ldrb	r0, [r0, #16]
 80a2030:	f7ff f93a 	bl	80a12a8 <hal_usart_peek>
}
 80a2034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2038:	bd08      	pop	{r3, pc}

080a203a <_ZN11USARTSerial4readEv>:
{
 80a203a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a203c:	7c00      	ldrb	r0, [r0, #16]
 80a203e:	f7ff f92b 	bl	80a1298 <hal_usart_read>
}
 80a2042:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2046:	bd08      	pop	{r3, pc}

080a2048 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a2048:	7c00      	ldrb	r0, [r0, #16]
 80a204a:	f7ff b935 	b.w	80a12b8 <hal_usart_flush>

080a204e <_ZN11USARTSerial5writeEh>:
{
 80a204e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2050:	7c46      	ldrb	r6, [r0, #17]
{
 80a2052:	4604      	mov	r4, r0
 80a2054:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2056:	b12e      	cbz	r6, 80a2064 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a2058:	4629      	mov	r1, r5
 80a205a:	7c20      	ldrb	r0, [r4, #16]
}
 80a205c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2060:	f7ff b90a 	b.w	80a1278 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff f937 	bl	80a12d8 <hal_usart_available_data_for_write>
 80a206a:	2800      	cmp	r0, #0
 80a206c:	dcf4      	bgt.n	80a2058 <_ZN11USARTSerial5writeEh+0xa>
}
 80a206e:	4630      	mov	r0, r6
 80a2070:	bd70      	pop	{r4, r5, r6, pc}

080a2072 <_ZN11USARTSerialD0Ev>:
 80a2072:	b510      	push	{r4, lr}
 80a2074:	4604      	mov	r4, r0
 80a2076:	2114      	movs	r1, #20
 80a2078:	f000 fb20 	bl	80a26bc <_ZdlPvj>
 80a207c:	4620      	mov	r0, r4
 80a207e:	bd10      	pop	{r4, pc}

080a2080 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2080:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2084:	b510      	push	{r4, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	4608      	mov	r0, r1
 80a208a:	4611      	mov	r1, r2
 80a208c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2090:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2094:	4a04      	ldr	r2, [pc, #16]	; (80a20a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2096:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2098:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a209a:	2201      	movs	r2, #1
 80a209c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a209e:	461a      	mov	r2, r3
 80a20a0:	f7ff f8e2 	bl	80a1268 <hal_usart_init>
}
 80a20a4:	4620      	mov	r0, r4
 80a20a6:	bd10      	pop	{r4, pc}
 80a20a8:	080a2ccc 	.word	0x080a2ccc

080a20ac <_Z22__fetch_global_Serial1v>:
{
 80a20ac:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a20ae:	4d0c      	ldr	r5, [pc, #48]	; (80a20e0 <_Z22__fetch_global_Serial1v+0x34>)
 80a20b0:	7829      	ldrb	r1, [r5, #0]
 80a20b2:	f3bf 8f5b 	dmb	ish
 80a20b6:	f011 0401 	ands.w	r4, r1, #1
 80a20ba:	d10f      	bne.n	80a20dc <_Z22__fetch_global_Serial1v+0x30>
 80a20bc:	4628      	mov	r0, r5
 80a20be:	f7fd fff2 	bl	80a00a6 <__cxa_guard_acquire>
 80a20c2:	b158      	cbz	r0, 80a20dc <_Z22__fetch_global_Serial1v+0x30>
 80a20c4:	4621      	mov	r1, r4
 80a20c6:	4b07      	ldr	r3, [pc, #28]	; (80a20e4 <_Z22__fetch_global_Serial1v+0x38>)
 80a20c8:	4a07      	ldr	r2, [pc, #28]	; (80a20e8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a20ca:	4808      	ldr	r0, [pc, #32]	; (80a20ec <_Z22__fetch_global_Serial1v+0x40>)
 80a20cc:	f7ff ffd8 	bl	80a2080 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a20d0:	4628      	mov	r0, r5
 80a20d2:	f7fd ffed 	bl	80a00b0 <__cxa_guard_release>
 80a20d6:	4806      	ldr	r0, [pc, #24]	; (80a20f0 <_Z22__fetch_global_Serial1v+0x44>)
 80a20d8:	f000 fc08 	bl	80a28ec <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a20dc:	4803      	ldr	r0, [pc, #12]	; (80a20ec <_Z22__fetch_global_Serial1v+0x40>)
 80a20de:	bd38      	pop	{r3, r4, r5, pc}
 80a20e0:	20000154 	.word	0x20000154
 80a20e4:	200001dc 	.word	0x200001dc
 80a20e8:	20000158 	.word	0x20000158
 80a20ec:	20000260 	.word	0x20000260
 80a20f0:	080a200f 	.word	0x080a200f

080a20f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a20f4:	7441      	strb	r1, [r0, #17]
}
 80a20f6:	4770      	bx	lr

080a20f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20f8:	4770      	bx	lr

080a20fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a20fa:	4770      	bx	lr

080a20fc <_ZN9USBSerial4readEv>:
{
 80a20fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a20fe:	2100      	movs	r1, #0
 80a2100:	7c00      	ldrb	r0, [r0, #16]
 80a2102:	f7ff f911 	bl	80a1328 <HAL_USB_USART_Receive_Data>
}
 80a2106:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a210a:	bd08      	pop	{r3, pc}

080a210c <_ZN9USBSerial4peekEv>:
{
 80a210c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a210e:	2101      	movs	r1, #1
 80a2110:	7c00      	ldrb	r0, [r0, #16]
 80a2112:	f7ff f909 	bl	80a1328 <HAL_USB_USART_Receive_Data>
}
 80a2116:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a211a:	bd08      	pop	{r3, pc}

080a211c <_ZN9USBSerial17availableForWriteEv>:
{
 80a211c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a211e:	7c00      	ldrb	r0, [r0, #16]
 80a2120:	f7ff f8fa 	bl	80a1318 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2124:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2128:	bd08      	pop	{r3, pc}

080a212a <_ZN9USBSerial9availableEv>:
{
 80a212a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a212c:	7c00      	ldrb	r0, [r0, #16]
 80a212e:	f7ff f8eb 	bl	80a1308 <HAL_USB_USART_Available_Data>
}
 80a2132:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2136:	bd08      	pop	{r3, pc}

080a2138 <_ZN9USBSerial5writeEh>:
{
 80a2138:	b538      	push	{r3, r4, r5, lr}
 80a213a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a213c:	7c00      	ldrb	r0, [r0, #16]
{
 80a213e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2140:	f7ff f8ea 	bl	80a1318 <HAL_USB_USART_Available_Data_For_Write>
 80a2144:	2800      	cmp	r0, #0
 80a2146:	dc01      	bgt.n	80a214c <_ZN9USBSerial5writeEh+0x14>
 80a2148:	7c60      	ldrb	r0, [r4, #17]
 80a214a:	b128      	cbz	r0, 80a2158 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a214c:	4629      	mov	r1, r5
 80a214e:	7c20      	ldrb	r0, [r4, #16]
 80a2150:	f7ff f8f2 	bl	80a1338 <HAL_USB_USART_Send_Data>
 80a2154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2158:	bd38      	pop	{r3, r4, r5, pc}

080a215a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a215a:	7c00      	ldrb	r0, [r0, #16]
 80a215c:	f7ff b8f4 	b.w	80a1348 <HAL_USB_USART_Flush_Data>

080a2160 <_ZN9USBSerialD0Ev>:
 80a2160:	b510      	push	{r4, lr}
 80a2162:	4604      	mov	r4, r0
 80a2164:	2114      	movs	r1, #20
 80a2166:	f000 faa9 	bl	80a26bc <_ZdlPvj>
 80a216a:	4620      	mov	r0, r4
 80a216c:	bd10      	pop	{r4, pc}

080a216e <__tcf_1>:
 80a216e:	4770      	bx	lr

080a2170 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2170:	b510      	push	{r4, lr}
 80a2172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2176:	4604      	mov	r4, r0
 80a2178:	4608      	mov	r0, r1
 80a217a:	2100      	movs	r1, #0
 80a217c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2180:	4b04      	ldr	r3, [pc, #16]	; (80a2194 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2182:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2184:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2186:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2188:	4611      	mov	r1, r2
  _blocking = true;
 80a218a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a218c:	f7ff f8ac 	bl	80a12e8 <HAL_USB_USART_Init>
}
 80a2190:	4620      	mov	r0, r4
 80a2192:	bd10      	pop	{r4, pc}
 80a2194:	080a2cfc 	.word	0x080a2cfc

080a2198 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2198:	2200      	movs	r2, #0
 80a219a:	7c00      	ldrb	r0, [r0, #16]
 80a219c:	f7ff b8ac 	b.w	80a12f8 <HAL_USB_USART_Begin>

080a21a0 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a21a0:	7c00      	ldrb	r0, [r0, #16]
 80a21a2:	f7ff b8d9 	b.w	80a1358 <HAL_USB_USART_Is_Enabled>

080a21a6 <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a21a6:	f7ff bffb 	b.w	80a21a0 <_ZN9USBSerial9isEnabledEv>
	...

080a21ac <_Z19acquireSerialBufferv>:
{
 80a21ac:	b510      	push	{r4, lr}
 80a21ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a21b0:	2214      	movs	r2, #20
 80a21b2:	2100      	movs	r1, #0
 80a21b4:	f000 fbc2 	bl	80a293c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a21b8:	4b05      	ldr	r3, [pc, #20]	; (80a21d0 <_Z19acquireSerialBufferv+0x24>)
}
 80a21ba:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a21bc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a21be:	4b05      	ldr	r3, [pc, #20]	; (80a21d4 <_Z19acquireSerialBufferv+0x28>)
 80a21c0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a21c2:	f240 1301 	movw	r3, #257	; 0x101
 80a21c6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a21c8:	2381      	movs	r3, #129	; 0x81
 80a21ca:	8223      	strh	r3, [r4, #16]
}
 80a21cc:	bd10      	pop	{r4, pc}
 80a21ce:	bf00      	nop
 80a21d0:	200002a4 	.word	0x200002a4
 80a21d4:	200003a5 	.word	0x200003a5

080a21d8 <_Z16_fetch_usbserialv>:
{
 80a21d8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21da:	4d0e      	ldr	r5, [pc, #56]	; (80a2214 <_Z16_fetch_usbserialv+0x3c>)
{
 80a21dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a21de:	a801      	add	r0, sp, #4
 80a21e0:	f7ff ffe4 	bl	80a21ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21e4:	7829      	ldrb	r1, [r5, #0]
 80a21e6:	f3bf 8f5b 	dmb	ish
 80a21ea:	f011 0401 	ands.w	r4, r1, #1
 80a21ee:	d10e      	bne.n	80a220e <_Z16_fetch_usbserialv+0x36>
 80a21f0:	4628      	mov	r0, r5
 80a21f2:	f7fd ff58 	bl	80a00a6 <__cxa_guard_acquire>
 80a21f6:	b150      	cbz	r0, 80a220e <_Z16_fetch_usbserialv+0x36>
 80a21f8:	4621      	mov	r1, r4
 80a21fa:	aa01      	add	r2, sp, #4
 80a21fc:	4806      	ldr	r0, [pc, #24]	; (80a2218 <_Z16_fetch_usbserialv+0x40>)
 80a21fe:	f7ff ffb7 	bl	80a2170 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2202:	4628      	mov	r0, r5
 80a2204:	f7fd ff54 	bl	80a00b0 <__cxa_guard_release>
 80a2208:	4804      	ldr	r0, [pc, #16]	; (80a221c <_Z16_fetch_usbserialv+0x44>)
 80a220a:	f000 fb6f 	bl	80a28ec <atexit>
	return _usbserial;
}
 80a220e:	4802      	ldr	r0, [pc, #8]	; (80a2218 <_Z16_fetch_usbserialv+0x40>)
 80a2210:	b007      	add	sp, #28
 80a2212:	bd30      	pop	{r4, r5, pc}
 80a2214:	20000274 	.word	0x20000274
 80a2218:	2000027c 	.word	0x2000027c
 80a221c:	080a20f9 	.word	0x080a20f9

080a2220 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2220:	b510      	push	{r4, lr}
 80a2222:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2224:	2214      	movs	r2, #20
 80a2226:	2100      	movs	r1, #0
 80a2228:	f000 fb88 	bl	80a293c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a222c:	4b05      	ldr	r3, [pc, #20]	; (80a2244 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a222e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2230:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2232:	4b05      	ldr	r3, [pc, #20]	; (80a2248 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2234:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2236:	f240 1301 	movw	r3, #257	; 0x101
 80a223a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a223c:	2381      	movs	r3, #129	; 0x81
 80a223e:	8223      	strh	r3, [r4, #16]
}
 80a2240:	bd10      	pop	{r4, pc}
 80a2242:	bf00      	nop
 80a2244:	20000426 	.word	0x20000426
 80a2248:	20000527 	.word	0x20000527

080a224c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a224c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a224e:	4c0e      	ldr	r4, [pc, #56]	; (80a2288 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2250:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2252:	a801      	add	r0, sp, #4
 80a2254:	f7ff ffe4 	bl	80a2220 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2258:	7823      	ldrb	r3, [r4, #0]
 80a225a:	f3bf 8f5b 	dmb	ish
 80a225e:	07db      	lsls	r3, r3, #31
 80a2260:	d40e      	bmi.n	80a2280 <_Z17_fetch_usbserial1v+0x34>
 80a2262:	4620      	mov	r0, r4
 80a2264:	f7fd ff1f 	bl	80a00a6 <__cxa_guard_acquire>
 80a2268:	b150      	cbz	r0, 80a2280 <_Z17_fetch_usbserial1v+0x34>
 80a226a:	2101      	movs	r1, #1
 80a226c:	aa01      	add	r2, sp, #4
 80a226e:	4807      	ldr	r0, [pc, #28]	; (80a228c <_Z17_fetch_usbserial1v+0x40>)
 80a2270:	f7ff ff7e 	bl	80a2170 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2274:	4620      	mov	r0, r4
 80a2276:	f7fd ff1b 	bl	80a00b0 <__cxa_guard_release>
 80a227a:	4805      	ldr	r0, [pc, #20]	; (80a2290 <_Z17_fetch_usbserial1v+0x44>)
 80a227c:	f000 fb36 	bl	80a28ec <atexit>
  return _usbserial1;
}
 80a2280:	4802      	ldr	r0, [pc, #8]	; (80a228c <_Z17_fetch_usbserial1v+0x40>)
 80a2282:	b006      	add	sp, #24
 80a2284:	bd10      	pop	{r4, pc}
 80a2286:	bf00      	nop
 80a2288:	20000278 	.word	0x20000278
 80a228c:	20000290 	.word	0x20000290
 80a2290:	080a216f 	.word	0x080a216f

080a2294 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2294:	2200      	movs	r2, #0
 80a2296:	6840      	ldr	r0, [r0, #4]
 80a2298:	4611      	mov	r1, r2
 80a229a:	f7ff b8e9 	b.w	80a1470 <network_ready>

080a229e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a229e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a22a0:	4615      	mov	r5, r2
 80a22a2:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a22a4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a22a6:	460e      	mov	r6, r1
 80a22a8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a22aa:	2100      	movs	r1, #0
 80a22ac:	a803      	add	r0, sp, #12
 80a22ae:	f000 fb45 	bl	80a293c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a22b2:	4628      	mov	r0, r5
 80a22b4:	f000 fb80 	bl	80a29b8 <strlen>
 80a22b8:	2700      	movs	r7, #0
 80a22ba:	b281      	uxth	r1, r0
 80a22bc:	6873      	ldr	r3, [r6, #4]
 80a22be:	4628      	mov	r0, r5
 80a22c0:	9700      	str	r7, [sp, #0]
 80a22c2:	aa03      	add	r2, sp, #12
 80a22c4:	f7ff f858 	bl	80a1378 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22c8:	b130      	cbz	r0, 80a22d8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a22ca:	4639      	mov	r1, r7
 80a22cc:	4620      	mov	r0, r4
 80a22ce:	f7ff f9f5 	bl	80a16bc <_ZN9IPAddressC1Em>
    }
 80a22d2:	4620      	mov	r0, r4
 80a22d4:	b009      	add	sp, #36	; 0x24
 80a22d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22d8:	4620      	mov	r0, r4
 80a22da:	a903      	add	r1, sp, #12
 80a22dc:	f7ff f9dc 	bl	80a1698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a22e0:	e7f7      	b.n	80a22d2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a22e2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a22e2:	2200      	movs	r2, #0
 80a22e4:	6840      	ldr	r0, [r0, #4]
 80a22e6:	4611      	mov	r1, r2
 80a22e8:	f7ff b8e2 	b.w	80a14b0 <network_listening>

080a22ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a22ec:	2200      	movs	r2, #0
 80a22ee:	6840      	ldr	r0, [r0, #4]
 80a22f0:	4611      	mov	r1, r2
 80a22f2:	f7ff b8ed 	b.w	80a14d0 <network_get_listen_timeout>

080a22f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a22f6:	2200      	movs	r2, #0
 80a22f8:	6840      	ldr	r0, [r0, #4]
 80a22fa:	f7ff b8e1 	b.w	80a14c0 <network_set_listen_timeout>

080a22fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a22fe:	2200      	movs	r2, #0
 80a2300:	6840      	ldr	r0, [r0, #4]
 80a2302:	f081 0101 	eor.w	r1, r1, #1
 80a2306:	f7ff b8cb 	b.w	80a14a0 <network_listen>

080a230a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a230a:	2300      	movs	r3, #0
 80a230c:	6840      	ldr	r0, [r0, #4]
 80a230e:	461a      	mov	r2, r3
 80a2310:	4619      	mov	r1, r3
 80a2312:	f7ff b8bd 	b.w	80a1490 <network_off>

080a2316 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2316:	2300      	movs	r3, #0
 80a2318:	6840      	ldr	r0, [r0, #4]
 80a231a:	461a      	mov	r2, r3
 80a231c:	4619      	mov	r1, r3
 80a231e:	f7ff b8af 	b.w	80a1480 <network_on>

080a2322 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2322:	2200      	movs	r2, #0
 80a2324:	6840      	ldr	r0, [r0, #4]
 80a2326:	4611      	mov	r1, r2
 80a2328:	f7ff b892 	b.w	80a1450 <network_connecting>

080a232c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a232c:	2200      	movs	r2, #0
 80a232e:	2102      	movs	r1, #2
 80a2330:	6840      	ldr	r0, [r0, #4]
 80a2332:	f7ff b895 	b.w	80a1460 <network_disconnect>

080a2336 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2336:	2300      	movs	r3, #0
 80a2338:	6840      	ldr	r0, [r0, #4]
 80a233a:	461a      	mov	r2, r3
 80a233c:	f7ff b880 	b.w	80a1440 <network_connect>

080a2340 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2340:	2204      	movs	r2, #4
 80a2342:	4b02      	ldr	r3, [pc, #8]	; (80a234c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2344:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2346:	4a02      	ldr	r2, [pc, #8]	; (80a2350 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2348:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a234a:	4770      	bx	lr
 80a234c:	200005a8 	.word	0x200005a8
 80a2350:	080a2d2c 	.word	0x080a2d2c

080a2354 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2354:	1e93      	subs	r3, r2, #2
 80a2356:	2b22      	cmp	r3, #34	; 0x22
 80a2358:	f04f 0300 	mov.w	r3, #0
{
 80a235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2360:	b08c      	sub	sp, #48	; 0x30
 80a2362:	460d      	mov	r5, r1
 80a2364:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2366:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a236a:	d926      	bls.n	80a23ba <ltoa+0x66>

      if (10 == base && N < 0L)
 80a236c:	2800      	cmp	r0, #0
 80a236e:	da29      	bge.n	80a23c4 <ltoa+0x70>
      {
            *head++ = '-';
 80a2370:	462e      	mov	r6, r5
 80a2372:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a2374:	240a      	movs	r4, #10
            *head++ = '-';
 80a2376:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a237a:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a237c:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a2380:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2384:	4622      	mov	r2, r4
 80a2386:	4601      	mov	r1, r0
 80a2388:	a801      	add	r0, sp, #4
 80a238a:	f000 fab5 	bl	80a28f8 <ldiv>
 80a238e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2390:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a2392:	2b09      	cmp	r3, #9
 80a2394:	bfcc      	ite	gt
 80a2396:	2237      	movgt	r2, #55	; 0x37
 80a2398:	2230      	movle	r2, #48	; 0x30
 80a239a:	4413      	add	r3, r2
 80a239c:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a23a0:	f108 0801 	add.w	r8, r8, #1
 80a23a4:	2800      	cmp	r0, #0
 80a23a6:	d1ed      	bne.n	80a2384 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a23a8:	4642      	mov	r2, r8
 80a23aa:	4630      	mov	r0, r6
 80a23ac:	1c79      	adds	r1, r7, #1
 80a23ae:	f000 fab7 	bl	80a2920 <memcpy>
      return str;
}
 80a23b2:	4628      	mov	r0, r5
 80a23b4:	b00c      	add	sp, #48	; 0x30
 80a23b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a23ba:	2a0a      	cmp	r2, #10
 80a23bc:	d0d6      	beq.n	80a236c <ltoa+0x18>
      if (uarg)
 80a23be:	b118      	cbz	r0, 80a23c8 <ltoa+0x74>
 80a23c0:	462e      	mov	r6, r5
 80a23c2:	e7db      	b.n	80a237c <ltoa+0x28>
 80a23c4:	240a      	movs	r4, #10
 80a23c6:	e7fa      	b.n	80a23be <ltoa+0x6a>
      else  *tail-- = '0';
 80a23c8:	2330      	movs	r3, #48	; 0x30
 80a23ca:	462e      	mov	r6, r5
      int i = 2;
 80a23cc:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a23d0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a23d4:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a23d8:	e7e6      	b.n	80a23a8 <ltoa+0x54>
	...

080a23dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a23dc:	4b01      	ldr	r3, [pc, #4]	; (80a23e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a23de:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a23e0:	4770      	bx	lr
 80a23e2:	bf00      	nop
 80a23e4:	20000010 	.word	0x20000010

080a23e8 <serialEventRun>:
{
 80a23e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a23ea:	4b13      	ldr	r3, [pc, #76]	; (80a2438 <serialEventRun+0x50>)
 80a23ec:	b143      	cbz	r3, 80a2400 <serialEventRun+0x18>
 80a23ee:	f7ff fef3 	bl	80a21d8 <_Z16_fetch_usbserialv>
 80a23f2:	6803      	ldr	r3, [r0, #0]
 80a23f4:	691b      	ldr	r3, [r3, #16]
 80a23f6:	4798      	blx	r3
 80a23f8:	2800      	cmp	r0, #0
 80a23fa:	dd01      	ble.n	80a2400 <serialEventRun+0x18>
        serialEvent();
 80a23fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2400:	4b0e      	ldr	r3, [pc, #56]	; (80a243c <serialEventRun+0x54>)
 80a2402:	b143      	cbz	r3, 80a2416 <serialEventRun+0x2e>
 80a2404:	f7ff fe52 	bl	80a20ac <_Z22__fetch_global_Serial1v>
 80a2408:	6803      	ldr	r3, [r0, #0]
 80a240a:	691b      	ldr	r3, [r3, #16]
 80a240c:	4798      	blx	r3
 80a240e:	2800      	cmp	r0, #0
 80a2410:	dd01      	ble.n	80a2416 <serialEventRun+0x2e>
        serialEvent1();
 80a2412:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2416:	4b0a      	ldr	r3, [pc, #40]	; (80a2440 <serialEventRun+0x58>)
 80a2418:	b10b      	cbz	r3, 80a241e <serialEventRun+0x36>
 80a241a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a241e:	4b09      	ldr	r3, [pc, #36]	; (80a2444 <serialEventRun+0x5c>)
 80a2420:	b143      	cbz	r3, 80a2434 <serialEventRun+0x4c>
 80a2422:	f7ff ff13 	bl	80a224c <_Z17_fetch_usbserial1v>
 80a2426:	6803      	ldr	r3, [r0, #0]
 80a2428:	691b      	ldr	r3, [r3, #16]
 80a242a:	4798      	blx	r3
 80a242c:	2800      	cmp	r0, #0
 80a242e:	dd01      	ble.n	80a2434 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2430:	f3af 8000 	nop.w
}
 80a2434:	bd08      	pop	{r3, pc}
 80a2436:	bf00      	nop
	...

080a2448 <_post_loop>:
{
 80a2448:	b508      	push	{r3, lr}
	serialEventRun();
 80a244a:	f7ff ffcd 	bl	80a23e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a244e:	f7fe fe2f 	bl	80a10b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2452:	4b01      	ldr	r3, [pc, #4]	; (80a2458 <_post_loop+0x10>)
 80a2454:	6018      	str	r0, [r3, #0]
}
 80a2456:	bd08      	pop	{r3, pc}
 80a2458:	200005c8 	.word	0x200005c8

080a245c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a245c:	4805      	ldr	r0, [pc, #20]	; (80a2474 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a245e:	4a06      	ldr	r2, [pc, #24]	; (80a2478 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2460:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2462:	1a12      	subs	r2, r2, r0
 80a2464:	4905      	ldr	r1, [pc, #20]	; (80a247c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2466:	f000 fa5b 	bl	80a2920 <memcpy>
    __backup_sram_signature = signature;
 80a246a:	4b05      	ldr	r3, [pc, #20]	; (80a2480 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a246c:	4a05      	ldr	r2, [pc, #20]	; (80a2484 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a246e:	601a      	str	r2, [r3, #0]
}
 80a2470:	bd08      	pop	{r3, pc}
 80a2472:	bf00      	nop
 80a2474:	40024000 	.word	0x40024000
 80a2478:	40024004 	.word	0x40024004
 80a247c:	080a2e80 	.word	0x080a2e80
 80a2480:	40024000 	.word	0x40024000
 80a2484:	9a271c1e 	.word	0x9a271c1e

080a2488 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2488:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a248a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a248c:	461a      	mov	r2, r3
 80a248e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2492:	9300      	str	r3, [sp, #0]
 80a2494:	f7fe ffaa 	bl	80a13ec <system_ctrl_set_result>
}
 80a2498:	b003      	add	sp, #12
 80a249a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a24a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a24a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a24a2:	8843      	ldrh	r3, [r0, #2]
 80a24a4:	2b0a      	cmp	r3, #10
 80a24a6:	d008      	beq.n	80a24ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a24a8:	2b50      	cmp	r3, #80	; 0x50
 80a24aa:	d10b      	bne.n	80a24c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a24ac:	4b09      	ldr	r3, [pc, #36]	; (80a24d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a24ae:	681b      	ldr	r3, [r3, #0]
 80a24b0:	b14b      	cbz	r3, 80a24c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a24b2:	b003      	add	sp, #12
 80a24b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a24b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a24ba:	f7ff ffe5 	bl	80a2488 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a24be:	b003      	add	sp, #12
 80a24c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24c4:	2300      	movs	r3, #0
 80a24c6:	461a      	mov	r2, r3
 80a24c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a24cc:	9300      	str	r3, [sp, #0]
 80a24ce:	f7fe ff8d 	bl	80a13ec <system_ctrl_set_result>
}
 80a24d2:	e7f4      	b.n	80a24be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a24d4:	200005b4 	.word	0x200005b4

080a24d8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a24d8:	2100      	movs	r1, #0
{
 80a24da:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a24dc:	4811      	ldr	r0, [pc, #68]	; (80a2524 <module_user_init_hook+0x4c>)
 80a24de:	f7ff f827 	bl	80a1530 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a24e2:	4b11      	ldr	r3, [pc, #68]	; (80a2528 <module_user_init_hook+0x50>)
 80a24e4:	681a      	ldr	r2, [r3, #0]
 80a24e6:	4b11      	ldr	r3, [pc, #68]	; (80a252c <module_user_init_hook+0x54>)
 80a24e8:	429a      	cmp	r2, r3
 80a24ea:	bf0c      	ite	eq
 80a24ec:	2201      	moveq	r2, #1
 80a24ee:	2200      	movne	r2, #0
 80a24f0:	4b0f      	ldr	r3, [pc, #60]	; (80a2530 <module_user_init_hook+0x58>)
 80a24f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a24f4:	d001      	beq.n	80a24fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a24f6:	f7ff ffb1 	bl	80a245c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a24fa:	f7fe fdd1 	bl	80a10a0 <HAL_RNG_GetRandomNumber>
 80a24fe:	4604      	mov	r4, r0
    srand(seed);
 80a2500:	f000 fa24 	bl	80a294c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2504:	4b0b      	ldr	r3, [pc, #44]	; (80a2534 <module_user_init_hook+0x5c>)
 80a2506:	b113      	cbz	r3, 80a250e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2508:	4620      	mov	r0, r4
 80a250a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a250e:	2100      	movs	r1, #0
 80a2510:	4808      	ldr	r0, [pc, #32]	; (80a2534 <module_user_init_hook+0x5c>)
 80a2512:	f7fe ff8d 	bl	80a1430 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a251a:	2100      	movs	r1, #0
 80a251c:	4806      	ldr	r0, [pc, #24]	; (80a2538 <module_user_init_hook+0x60>)
 80a251e:	f7fe bf5b 	b.w	80a13d8 <system_ctrl_set_app_request_handler>
 80a2522:	bf00      	nop
 80a2524:	080a23dd 	.word	0x080a23dd
 80a2528:	40024000 	.word	0x40024000
 80a252c:	9a271c1e 	.word	0x9a271c1e
 80a2530:	200005b0 	.word	0x200005b0
 80a2534:	00000000 	.word	0x00000000
 80a2538:	080a24a1 	.word	0x080a24a1

080a253c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a253c:	4b02      	ldr	r3, [pc, #8]	; (80a2548 <__tcf_0+0xc>)
 80a253e:	6898      	ldr	r0, [r3, #8]
 80a2540:	b108      	cbz	r0, 80a2546 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2542:	f7fe bda5 	b.w	80a1090 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2546:	4770      	bx	lr
 80a2548:	200005bc 	.word	0x200005bc

080a254c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a254c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a254e:	b570      	push	{r4, r5, r6, lr}
 80a2550:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2552:	d901      	bls.n	80a2558 <pinAvailable+0xc>
    return false;
 80a2554:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2556:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2558:	f1a0 030d 	sub.w	r3, r0, #13
 80a255c:	2b02      	cmp	r3, #2
 80a255e:	d90b      	bls.n	80a2578 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2560:	2801      	cmp	r0, #1
 80a2562:	d824      	bhi.n	80a25ae <pinAvailable+0x62>
 80a2564:	f000 f878 	bl	80a2658 <_Z19__fetch_global_Wirev>
 80a2568:	2100      	movs	r1, #0
 80a256a:	7c00      	ldrb	r0, [r0, #16]
 80a256c:	f7fe fe10 	bl	80a1190 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2570:	f080 0001 	eor.w	r0, r0, #1
 80a2574:	b2c0      	uxtb	r0, r0
 80a2576:	e7ee      	b.n	80a2556 <pinAvailable+0xa>
 80a2578:	4e12      	ldr	r6, [pc, #72]	; (80a25c4 <pinAvailable+0x78>)
 80a257a:	7831      	ldrb	r1, [r6, #0]
 80a257c:	f3bf 8f5b 	dmb	ish
 80a2580:	f011 0501 	ands.w	r5, r1, #1
 80a2584:	d10d      	bne.n	80a25a2 <pinAvailable+0x56>
 80a2586:	4630      	mov	r0, r6
 80a2588:	f7fd fd8d 	bl	80a00a6 <__cxa_guard_acquire>
 80a258c:	b148      	cbz	r0, 80a25a2 <pinAvailable+0x56>
 80a258e:	4629      	mov	r1, r5
 80a2590:	480d      	ldr	r0, [pc, #52]	; (80a25c8 <pinAvailable+0x7c>)
 80a2592:	f7ff f9af 	bl	80a18f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2596:	4630      	mov	r0, r6
 80a2598:	f7fd fd8a 	bl	80a00b0 <__cxa_guard_release>
 80a259c:	480b      	ldr	r0, [pc, #44]	; (80a25cc <pinAvailable+0x80>)
 80a259e:	f000 f9a5 	bl	80a28ec <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a25a2:	4b09      	ldr	r3, [pc, #36]	; (80a25c8 <pinAvailable+0x7c>)
 80a25a4:	7818      	ldrb	r0, [r3, #0]
 80a25a6:	f7fe fe57 	bl	80a1258 <hal_spi_is_enabled>
 80a25aa:	2800      	cmp	r0, #0
 80a25ac:	d1d2      	bne.n	80a2554 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a25ae:	3c12      	subs	r4, #18
 80a25b0:	2c01      	cmp	r4, #1
 80a25b2:	d805      	bhi.n	80a25c0 <pinAvailable+0x74>
 80a25b4:	f7ff fd7a 	bl	80a20ac <_Z22__fetch_global_Serial1v>
 80a25b8:	7c00      	ldrb	r0, [r0, #16]
 80a25ba:	f7fe fe85 	bl	80a12c8 <hal_usart_is_enabled>
 80a25be:	e7d7      	b.n	80a2570 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a25c0:	2001      	movs	r0, #1
 80a25c2:	e7c8      	b.n	80a2556 <pinAvailable+0xa>
 80a25c4:	200005b8 	.word	0x200005b8
 80a25c8:	200005bc 	.word	0x200005bc
 80a25cc:	080a253d 	.word	0x080a253d

080a25d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25d0:	2817      	cmp	r0, #23
{
 80a25d2:	b538      	push	{r3, r4, r5, lr}
 80a25d4:	4604      	mov	r4, r0
 80a25d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25d8:	d80a      	bhi.n	80a25f0 <pinMode+0x20>
 80a25da:	29ff      	cmp	r1, #255	; 0xff
 80a25dc:	d008      	beq.n	80a25f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a25de:	f7ff ffb5 	bl	80a254c <pinAvailable>
 80a25e2:	b128      	cbz	r0, 80a25f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a25e4:	4629      	mov	r1, r5
 80a25e6:	4620      	mov	r0, r4
}
 80a25e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a25ec:	f7fe bd78 	b.w	80a10e0 <HAL_Pin_Mode>
}
 80a25f0:	bd38      	pop	{r3, r4, r5, pc}

080a25f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a25f2:	b538      	push	{r3, r4, r5, lr}
 80a25f4:	4604      	mov	r4, r0
 80a25f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25f8:	f7fe fd7a 	bl	80a10f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a25fc:	28ff      	cmp	r0, #255	; 0xff
 80a25fe:	d010      	beq.n	80a2622 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2600:	2806      	cmp	r0, #6
 80a2602:	d804      	bhi.n	80a260e <digitalWrite+0x1c>
 80a2604:	234d      	movs	r3, #77	; 0x4d
 80a2606:	fa23 f000 	lsr.w	r0, r3, r0
 80a260a:	07c3      	lsls	r3, r0, #31
 80a260c:	d409      	bmi.n	80a2622 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a260e:	4620      	mov	r0, r4
 80a2610:	f7ff ff9c 	bl	80a254c <pinAvailable>
 80a2614:	b128      	cbz	r0, 80a2622 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2616:	4629      	mov	r1, r5
 80a2618:	4620      	mov	r0, r4
}
 80a261a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a261e:	f7fe bd6f 	b.w	80a1100 <HAL_GPIO_Write>
}
 80a2622:	bd38      	pop	{r3, r4, r5, pc}

080a2624 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2624:	4770      	bx	lr
	...

080a2628 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2628:	2300      	movs	r3, #0
{
 80a262a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a262c:	2520      	movs	r5, #32
 80a262e:	8043      	strh	r3, [r0, #2]
 80a2630:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2632:	4e08      	ldr	r6, [pc, #32]	; (80a2654 <_Z17acquireWireBufferv+0x2c>)
{
 80a2634:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2636:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2638:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a263a:	6085      	str	r5, [r0, #8]
 80a263c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a263e:	4628      	mov	r0, r5
 80a2640:	f000 f83e 	bl	80a26c0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2644:	4631      	mov	r1, r6
	};
 80a2646:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2648:	4628      	mov	r0, r5
 80a264a:	f000 f839 	bl	80a26c0 <_ZnajRKSt9nothrow_t>
	};
 80a264e:	60e0      	str	r0, [r4, #12]
}
 80a2650:	4620      	mov	r0, r4
 80a2652:	bd70      	pop	{r4, r5, r6, pc}
 80a2654:	080a2d60 	.word	0x080a2d60

080a2658 <_Z19__fetch_global_Wirev>:
{
 80a2658:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a265a:	4d0e      	ldr	r5, [pc, #56]	; (80a2694 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a265c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a265e:	7829      	ldrb	r1, [r5, #0]
 80a2660:	f3bf 8f5b 	dmb	ish
 80a2664:	f011 0401 	ands.w	r4, r1, #1
 80a2668:	d111      	bne.n	80a268e <_Z19__fetch_global_Wirev+0x36>
 80a266a:	4628      	mov	r0, r5
 80a266c:	f7fd fd1b 	bl	80a00a6 <__cxa_guard_acquire>
 80a2670:	b168      	cbz	r0, 80a268e <_Z19__fetch_global_Wirev+0x36>
 80a2672:	a801      	add	r0, sp, #4
 80a2674:	f7ff ffd8 	bl	80a2628 <_Z17acquireWireBufferv>
 80a2678:	4621      	mov	r1, r4
 80a267a:	aa01      	add	r2, sp, #4
 80a267c:	4806      	ldr	r0, [pc, #24]	; (80a2698 <_Z19__fetch_global_Wirev+0x40>)
 80a267e:	f7fe ff8f 	bl	80a15a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2682:	4628      	mov	r0, r5
 80a2684:	f7fd fd14 	bl	80a00b0 <__cxa_guard_release>
 80a2688:	4804      	ldr	r0, [pc, #16]	; (80a269c <_Z19__fetch_global_Wirev+0x44>)
 80a268a:	f000 f92f 	bl	80a28ec <atexit>
	return wire;
}
 80a268e:	4802      	ldr	r0, [pc, #8]	; (80a2698 <_Z19__fetch_global_Wirev+0x40>)
 80a2690:	b007      	add	sp, #28
 80a2692:	bd30      	pop	{r4, r5, pc}
 80a2694:	200005cc 	.word	0x200005cc
 80a2698:	200005d0 	.word	0x200005d0
 80a269c:	080a2625 	.word	0x080a2625

080a26a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a26a0:	2300      	movs	r3, #0
 80a26a2:	b507      	push	{r0, r1, r2, lr}
 80a26a4:	461a      	mov	r2, r3
 80a26a6:	4619      	mov	r1, r3
 80a26a8:	9300      	str	r3, [sp, #0]
 80a26aa:	4803      	ldr	r0, [pc, #12]	; (80a26b8 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a26ac:	f7ff f81c 	bl	80a16e8 <_ZN9IPAddressC1Ehhhh>
 80a26b0:	b003      	add	sp, #12
 80a26b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a26b6:	bf00      	nop
 80a26b8:	200005e4 	.word	0x200005e4

080a26bc <_ZdlPvj>:
 80a26bc:	f7fd bcef 	b.w	80a009e <_ZdlPv>

080a26c0 <_ZnajRKSt9nothrow_t>:
 80a26c0:	f7fd bceb 	b.w	80a009a <_Znaj>

080a26c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a26c4:	4901      	ldr	r1, [pc, #4]	; (80a26cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a26c6:	f000 b8fb 	b.w	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a26ca:	bf00      	nop
 80a26cc:	080a2d7c 	.word	0x080a2d7c

080a26d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a26d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a26d2:	2400      	movs	r4, #0
 80a26d4:	2310      	movs	r3, #16
 80a26d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a26da:	6803      	ldr	r3, [r0, #0]
 80a26dc:	4615      	mov	r5, r2
 80a26de:	699e      	ldr	r6, [r3, #24]
 80a26e0:	6812      	ldr	r2, [r2, #0]
 80a26e2:	466b      	mov	r3, sp
 80a26e4:	9400      	str	r4, [sp, #0]
 80a26e6:	f88d 4004 	strb.w	r4, [sp, #4]
 80a26ea:	47b0      	blx	r6
 80a26ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a26f0:	f003 0306 	and.w	r3, r3, #6
 80a26f4:	2b06      	cmp	r3, #6
 80a26f6:	bf09      	itett	eq
 80a26f8:	2001      	moveq	r0, #1
 80a26fa:	4620      	movne	r0, r4
 80a26fc:	9b00      	ldreq	r3, [sp, #0]
 80a26fe:	602b      	streq	r3, [r5, #0]
 80a2700:	b004      	add	sp, #16
 80a2702:	bd70      	pop	{r4, r5, r6, pc}

080a2704 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a2704:	9800      	ldr	r0, [sp, #0]
 80a2706:	4290      	cmp	r0, r2
 80a2708:	bf14      	ite	ne
 80a270a:	2001      	movne	r0, #1
 80a270c:	2006      	moveq	r0, #6
 80a270e:	4770      	bx	lr

080a2710 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a2710:	b510      	push	{r4, lr}
 80a2712:	4604      	mov	r4, r0
 80a2714:	4b02      	ldr	r3, [pc, #8]	; (80a2720 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a2716:	6003      	str	r3, [r0, #0]
 80a2718:	f000 f8cf 	bl	80a28ba <_ZNSt9type_infoD1Ev>
 80a271c:	4620      	mov	r0, r4
 80a271e:	bd10      	pop	{r4, pc}
 80a2720:	080a2dbc 	.word	0x080a2dbc

080a2724 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a2724:	b510      	push	{r4, lr}
 80a2726:	4604      	mov	r4, r0
 80a2728:	f7ff fff2 	bl	80a2710 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a272c:	4620      	mov	r0, r4
 80a272e:	2108      	movs	r1, #8
 80a2730:	f7ff ffc4 	bl	80a26bc <_ZdlPvj>
 80a2734:	4620      	mov	r0, r4
 80a2736:	bd10      	pop	{r4, pc}

080a2738 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a273c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2740:	461f      	mov	r7, r3
 80a2742:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a2746:	4598      	cmp	r8, r3
 80a2748:	4606      	mov	r6, r0
 80a274a:	4615      	mov	r5, r2
 80a274c:	d107      	bne.n	80a275e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a274e:	9907      	ldr	r1, [sp, #28]
 80a2750:	f000 f8b6 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a2754:	b118      	cbz	r0, 80a275e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a2756:	7165      	strb	r5, [r4, #5]
 80a2758:	2000      	movs	r0, #0
 80a275a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a275e:	4639      	mov	r1, r7
 80a2760:	4630      	mov	r0, r6
 80a2762:	f000 f8ad 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a2766:	2800      	cmp	r0, #0
 80a2768:	d0f6      	beq.n	80a2758 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a276a:	2301      	movs	r3, #1
 80a276c:	f8c4 8000 	str.w	r8, [r4]
 80a2770:	7125      	strb	r5, [r4, #4]
 80a2772:	71a3      	strb	r3, [r4, #6]
 80a2774:	e7f0      	b.n	80a2758 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a2776 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a2776:	b538      	push	{r3, r4, r5, lr}
 80a2778:	4615      	mov	r5, r2
 80a277a:	461c      	mov	r4, r3
 80a277c:	f000 f8a0 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a2780:	b120      	cbz	r0, 80a278c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a2782:	2308      	movs	r3, #8
 80a2784:	60e3      	str	r3, [r4, #12]
 80a2786:	2306      	movs	r3, #6
 80a2788:	6025      	str	r5, [r4, #0]
 80a278a:	7123      	strb	r3, [r4, #4]
 80a278c:	bd38      	pop	{r3, r4, r5, pc}

080a278e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2792:	4605      	mov	r5, r0
 80a2794:	460c      	mov	r4, r1
 80a2796:	4616      	mov	r6, r2
 80a2798:	461f      	mov	r7, r3
 80a279a:	f000 f891 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a279e:	b948      	cbnz	r0, 80a27b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a27a0:	2f03      	cmp	r7, #3
 80a27a2:	d807      	bhi.n	80a27b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a27a4:	6823      	ldr	r3, [r4, #0]
 80a27a6:	4632      	mov	r2, r6
 80a27a8:	4629      	mov	r1, r5
 80a27aa:	4620      	mov	r0, r4
 80a27ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a27b0:	695b      	ldr	r3, [r3, #20]
 80a27b2:	4718      	bx	r3
 80a27b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a27b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a27b8:	b510      	push	{r4, lr}
 80a27ba:	4604      	mov	r4, r0
 80a27bc:	4b02      	ldr	r3, [pc, #8]	; (80a27c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a27be:	6003      	str	r3, [r0, #0]
 80a27c0:	f7ff ffa6 	bl	80a2710 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a27c4:	4620      	mov	r0, r4
 80a27c6:	bd10      	pop	{r4, pc}
 80a27c8:	080a2e1c 	.word	0x080a2e1c

080a27cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a27cc:	b510      	push	{r4, lr}
 80a27ce:	4604      	mov	r4, r0
 80a27d0:	f7ff fff2 	bl	80a27b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a27d4:	4620      	mov	r0, r4
 80a27d6:	210c      	movs	r1, #12
 80a27d8:	f7ff ff70 	bl	80a26bc <_ZdlPvj>
 80a27dc:	4620      	mov	r0, r4
 80a27de:	bd10      	pop	{r4, pc}

080a27e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a27e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a27e4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a27e8:	4606      	mov	r6, r0
 80a27ea:	4590      	cmp	r8, r2
 80a27ec:	460f      	mov	r7, r1
 80a27ee:	4615      	mov	r5, r2
 80a27f0:	461c      	mov	r4, r3
 80a27f2:	d00b      	beq.n	80a280c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a27f4:	68b0      	ldr	r0, [r6, #8]
 80a27f6:	462a      	mov	r2, r5
 80a27f8:	6803      	ldr	r3, [r0, #0]
 80a27fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80a27fe:	6a1e      	ldr	r6, [r3, #32]
 80a2800:	4639      	mov	r1, r7
 80a2802:	4623      	mov	r3, r4
 80a2804:	46b4      	mov	ip, r6
 80a2806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a280a:	4760      	bx	ip
 80a280c:	4619      	mov	r1, r3
 80a280e:	f000 f857 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a2812:	2800      	cmp	r0, #0
 80a2814:	d0ee      	beq.n	80a27f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a2816:	2006      	movs	r0, #6
 80a2818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a281c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a281c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2820:	460d      	mov	r5, r1
 80a2822:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a2826:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a282a:	4619      	mov	r1, r3
 80a282c:	4681      	mov	r9, r0
 80a282e:	4617      	mov	r7, r2
 80a2830:	4698      	mov	r8, r3
 80a2832:	f000 f845 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a2836:	b190      	cbz	r0, 80a285e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a2838:	2d00      	cmp	r5, #0
 80a283a:	6034      	str	r4, [r6, #0]
 80a283c:	7137      	strb	r7, [r6, #4]
 80a283e:	db09      	blt.n	80a2854 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a2840:	442c      	add	r4, r5
 80a2842:	45a2      	cmp	sl, r4
 80a2844:	bf0c      	ite	eq
 80a2846:	2406      	moveq	r4, #6
 80a2848:	2401      	movne	r4, #1
 80a284a:	71b4      	strb	r4, [r6, #6]
 80a284c:	2000      	movs	r0, #0
 80a284e:	b001      	add	sp, #4
 80a2850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2854:	3502      	adds	r5, #2
 80a2856:	d1f9      	bne.n	80a284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2858:	2301      	movs	r3, #1
 80a285a:	71b3      	strb	r3, [r6, #6]
 80a285c:	e7f6      	b.n	80a284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a285e:	4554      	cmp	r4, sl
 80a2860:	d106      	bne.n	80a2870 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2862:	4659      	mov	r1, fp
 80a2864:	4648      	mov	r0, r9
 80a2866:	f000 f82b 	bl	80a28c0 <_ZNKSt9type_infoeqERKS_>
 80a286a:	b108      	cbz	r0, 80a2870 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a286c:	7177      	strb	r7, [r6, #5]
 80a286e:	e7ed      	b.n	80a284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2870:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a2874:	463a      	mov	r2, r7
 80a2876:	6803      	ldr	r3, [r0, #0]
 80a2878:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a287c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a2880:	69dc      	ldr	r4, [r3, #28]
 80a2882:	4629      	mov	r1, r5
 80a2884:	4643      	mov	r3, r8
 80a2886:	46a4      	mov	ip, r4
 80a2888:	b001      	add	sp, #4
 80a288a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a288e:	4760      	bx	ip

080a2890 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a2890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2894:	4607      	mov	r7, r0
 80a2896:	460c      	mov	r4, r1
 80a2898:	4615      	mov	r5, r2
 80a289a:	461e      	mov	r6, r3
 80a289c:	f7ff ff6b 	bl	80a2776 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a28a0:	b948      	cbnz	r0, 80a28b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a28a2:	68b8      	ldr	r0, [r7, #8]
 80a28a4:	462a      	mov	r2, r5
 80a28a6:	6803      	ldr	r3, [r0, #0]
 80a28a8:	4621      	mov	r1, r4
 80a28aa:	699f      	ldr	r7, [r3, #24]
 80a28ac:	4633      	mov	r3, r6
 80a28ae:	46bc      	mov	ip, r7
 80a28b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a28b4:	4760      	bx	ip
 80a28b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a28ba <_ZNSt9type_infoD1Ev>:
 80a28ba:	4770      	bx	lr

080a28bc <_ZNKSt9type_info14__is_pointer_pEv>:
 80a28bc:	2000      	movs	r0, #0
 80a28be:	4770      	bx	lr

080a28c0 <_ZNKSt9type_infoeqERKS_>:
 80a28c0:	4281      	cmp	r1, r0
 80a28c2:	b508      	push	{r3, lr}
 80a28c4:	d00e      	beq.n	80a28e4 <_ZNKSt9type_infoeqERKS_+0x24>
 80a28c6:	6840      	ldr	r0, [r0, #4]
 80a28c8:	7803      	ldrb	r3, [r0, #0]
 80a28ca:	2b2a      	cmp	r3, #42	; 0x2a
 80a28cc:	d00c      	beq.n	80a28e8 <_ZNKSt9type_infoeqERKS_+0x28>
 80a28ce:	6849      	ldr	r1, [r1, #4]
 80a28d0:	780b      	ldrb	r3, [r1, #0]
 80a28d2:	2b2a      	cmp	r3, #42	; 0x2a
 80a28d4:	bf08      	it	eq
 80a28d6:	3101      	addeq	r1, #1
 80a28d8:	f000 f85c 	bl	80a2994 <strcmp>
 80a28dc:	fab0 f080 	clz	r0, r0
 80a28e0:	0940      	lsrs	r0, r0, #5
 80a28e2:	bd08      	pop	{r3, pc}
 80a28e4:	2001      	movs	r0, #1
 80a28e6:	e7fc      	b.n	80a28e2 <_ZNKSt9type_infoeqERKS_+0x22>
 80a28e8:	2000      	movs	r0, #0
 80a28ea:	e7fa      	b.n	80a28e2 <_ZNKSt9type_infoeqERKS_+0x22>

080a28ec <atexit>:
 80a28ec:	2300      	movs	r3, #0
 80a28ee:	4601      	mov	r1, r0
 80a28f0:	461a      	mov	r2, r3
 80a28f2:	4618      	mov	r0, r3
 80a28f4:	f000 b868 	b.w	80a29c8 <__register_exitproc>

080a28f8 <ldiv>:
 80a28f8:	b510      	push	{r4, lr}
 80a28fa:	fb91 f4f2 	sdiv	r4, r1, r2
 80a28fe:	2900      	cmp	r1, #0
 80a2900:	fb02 1314 	mls	r3, r2, r4, r1
 80a2904:	db06      	blt.n	80a2914 <ldiv+0x1c>
 80a2906:	2b00      	cmp	r3, #0
 80a2908:	da01      	bge.n	80a290e <ldiv+0x16>
 80a290a:	3401      	adds	r4, #1
 80a290c:	1a9b      	subs	r3, r3, r2
 80a290e:	e9c0 4300 	strd	r4, r3, [r0]
 80a2912:	bd10      	pop	{r4, pc}
 80a2914:	2b00      	cmp	r3, #0
 80a2916:	bfc4      	itt	gt
 80a2918:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a291c:	189b      	addgt	r3, r3, r2
 80a291e:	e7f6      	b.n	80a290e <ldiv+0x16>

080a2920 <memcpy>:
 80a2920:	440a      	add	r2, r1
 80a2922:	4291      	cmp	r1, r2
 80a2924:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2928:	d100      	bne.n	80a292c <memcpy+0xc>
 80a292a:	4770      	bx	lr
 80a292c:	b510      	push	{r4, lr}
 80a292e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2932:	4291      	cmp	r1, r2
 80a2934:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2938:	d1f9      	bne.n	80a292e <memcpy+0xe>
 80a293a:	bd10      	pop	{r4, pc}

080a293c <memset>:
 80a293c:	4603      	mov	r3, r0
 80a293e:	4402      	add	r2, r0
 80a2940:	4293      	cmp	r3, r2
 80a2942:	d100      	bne.n	80a2946 <memset+0xa>
 80a2944:	4770      	bx	lr
 80a2946:	f803 1b01 	strb.w	r1, [r3], #1
 80a294a:	e7f9      	b.n	80a2940 <memset+0x4>

080a294c <srand>:
 80a294c:	b538      	push	{r3, r4, r5, lr}
 80a294e:	4b0d      	ldr	r3, [pc, #52]	; (80a2984 <srand+0x38>)
 80a2950:	4604      	mov	r4, r0
 80a2952:	681d      	ldr	r5, [r3, #0]
 80a2954:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2956:	b97b      	cbnz	r3, 80a2978 <srand+0x2c>
 80a2958:	2018      	movs	r0, #24
 80a295a:	f7fe fdd1 	bl	80a1500 <malloc>
 80a295e:	4a0a      	ldr	r2, [pc, #40]	; (80a2988 <srand+0x3c>)
 80a2960:	4b0a      	ldr	r3, [pc, #40]	; (80a298c <srand+0x40>)
 80a2962:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2964:	e9c0 2300 	strd	r2, r3, [r0]
 80a2968:	4b09      	ldr	r3, [pc, #36]	; (80a2990 <srand+0x44>)
 80a296a:	2201      	movs	r2, #1
 80a296c:	6083      	str	r3, [r0, #8]
 80a296e:	230b      	movs	r3, #11
 80a2970:	8183      	strh	r3, [r0, #12]
 80a2972:	2300      	movs	r3, #0
 80a2974:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2978:	2200      	movs	r2, #0
 80a297a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a297c:	611c      	str	r4, [r3, #16]
 80a297e:	615a      	str	r2, [r3, #20]
 80a2980:	bd38      	pop	{r3, r4, r5, pc}
 80a2982:	bf00      	nop
 80a2984:	20000010 	.word	0x20000010
 80a2988:	abcd330e 	.word	0xabcd330e
 80a298c:	e66d1234 	.word	0xe66d1234
 80a2990:	0005deec 	.word	0x0005deec

080a2994 <strcmp>:
 80a2994:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2998:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a299c:	2a01      	cmp	r2, #1
 80a299e:	bf28      	it	cs
 80a29a0:	429a      	cmpcs	r2, r3
 80a29a2:	d0f7      	beq.n	80a2994 <strcmp>
 80a29a4:	1ad0      	subs	r0, r2, r3
 80a29a6:	4770      	bx	lr

080a29a8 <strcpy>:
 80a29a8:	4603      	mov	r3, r0
 80a29aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a29ae:	f803 2b01 	strb.w	r2, [r3], #1
 80a29b2:	2a00      	cmp	r2, #0
 80a29b4:	d1f9      	bne.n	80a29aa <strcpy+0x2>
 80a29b6:	4770      	bx	lr

080a29b8 <strlen>:
 80a29b8:	4603      	mov	r3, r0
 80a29ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a29be:	2a00      	cmp	r2, #0
 80a29c0:	d1fb      	bne.n	80a29ba <strlen+0x2>
 80a29c2:	1a18      	subs	r0, r3, r0
 80a29c4:	3801      	subs	r0, #1
 80a29c6:	4770      	bx	lr

080a29c8 <__register_exitproc>:
 80a29c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a29cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2a8c <__register_exitproc+0xc4>
 80a29d0:	4606      	mov	r6, r0
 80a29d2:	f8d8 0000 	ldr.w	r0, [r8]
 80a29d6:	461f      	mov	r7, r3
 80a29d8:	460d      	mov	r5, r1
 80a29da:	4691      	mov	r9, r2
 80a29dc:	f000 f858 	bl	80a2a90 <__retarget_lock_acquire_recursive>
 80a29e0:	4b26      	ldr	r3, [pc, #152]	; (80a2a7c <__register_exitproc+0xb4>)
 80a29e2:	681c      	ldr	r4, [r3, #0]
 80a29e4:	b934      	cbnz	r4, 80a29f4 <__register_exitproc+0x2c>
 80a29e6:	4c26      	ldr	r4, [pc, #152]	; (80a2a80 <__register_exitproc+0xb8>)
 80a29e8:	601c      	str	r4, [r3, #0]
 80a29ea:	4b26      	ldr	r3, [pc, #152]	; (80a2a84 <__register_exitproc+0xbc>)
 80a29ec:	b113      	cbz	r3, 80a29f4 <__register_exitproc+0x2c>
 80a29ee:	681b      	ldr	r3, [r3, #0]
 80a29f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a29f4:	6863      	ldr	r3, [r4, #4]
 80a29f6:	2b1f      	cmp	r3, #31
 80a29f8:	dd07      	ble.n	80a2a0a <__register_exitproc+0x42>
 80a29fa:	f8d8 0000 	ldr.w	r0, [r8]
 80a29fe:	f000 f849 	bl	80a2a94 <__retarget_lock_release_recursive>
 80a2a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a0a:	b35e      	cbz	r6, 80a2a64 <__register_exitproc+0x9c>
 80a2a0c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2a10:	b988      	cbnz	r0, 80a2a36 <__register_exitproc+0x6e>
 80a2a12:	4b1d      	ldr	r3, [pc, #116]	; (80a2a88 <__register_exitproc+0xc0>)
 80a2a14:	b923      	cbnz	r3, 80a2a20 <__register_exitproc+0x58>
 80a2a16:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a1a:	f000 f83a 	bl	80a2a92 <__retarget_lock_release>
 80a2a1e:	e7f0      	b.n	80a2a02 <__register_exitproc+0x3a>
 80a2a20:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2a24:	f7fe fd6c 	bl	80a1500 <malloc>
 80a2a28:	2800      	cmp	r0, #0
 80a2a2a:	d0f4      	beq.n	80a2a16 <__register_exitproc+0x4e>
 80a2a2c:	2300      	movs	r3, #0
 80a2a2e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2a32:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2a36:	2201      	movs	r2, #1
 80a2a38:	6863      	ldr	r3, [r4, #4]
 80a2a3a:	2e02      	cmp	r6, #2
 80a2a3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2a40:	fa02 f203 	lsl.w	r2, r2, r3
 80a2a44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2a48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2a4c:	ea43 0302 	orr.w	r3, r3, r2
 80a2a50:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2a54:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2a58:	bf02      	ittt	eq
 80a2a5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2a5e:	431a      	orreq	r2, r3
 80a2a60:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2a64:	6863      	ldr	r3, [r4, #4]
 80a2a66:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a6a:	1c5a      	adds	r2, r3, #1
 80a2a6c:	3302      	adds	r3, #2
 80a2a6e:	6062      	str	r2, [r4, #4]
 80a2a70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2a74:	f000 f80e 	bl	80a2a94 <__retarget_lock_release_recursive>
 80a2a78:	2000      	movs	r0, #0
 80a2a7a:	e7c4      	b.n	80a2a06 <__register_exitproc+0x3e>
 80a2a7c:	20000688 	.word	0x20000688
 80a2a80:	200005fc 	.word	0x200005fc
 80a2a84:	00000000 	.word	0x00000000
 80a2a88:	080a1501 	.word	0x080a1501
 80a2a8c:	20000074 	.word	0x20000074

080a2a90 <__retarget_lock_acquire_recursive>:
 80a2a90:	4770      	bx	lr

080a2a92 <__retarget_lock_release>:
 80a2a92:	4770      	bx	lr

080a2a94 <__retarget_lock_release_recursive>:
 80a2a94:	4770      	bx	lr

080a2a96 <link_code_end>:
	...

080a2a98 <dynalib_user>:
 80a2a98:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2aa8:	0000 0000 6146 6c69 6465 7420 206f 6f62     ....Failed to bo
 80a2ab8:	746f 6620 7269 7473 5620 364c 3831 5830     ot first VL6180X
 80a2ac8:	4600 6961 656c 2064 6f74 6220 6f6f 2074     .Failed to boot 
 80a2ad8:	6573 6f63 646e 5620 364c 3831 5830 4600     second VL6180X.F
 80a2ae8:	6961 656c 2064 6f74 6220 6f6f 2074 6874     ailed to boot th
 80a2af8:	7269 2064 4c56 3136 3038 0058 6f43 6e6e     ird VL6180X.Conn
 80a2b08:	6365 6974 676e 2e2e 002e 7277 7369 2d74     ecting....wrist-
 80a2b18:	6177 6374 0068 6853 7475 6f64 6e77 7020     watch.Shutdown p
 80a2b28:	6e69 2073 6e69 7469 6465 2e2e 002e 6c41     ins inited....Al
 80a2b38:	206c 6e69 7220 7365 7465 6d20 646f 2e65     l in reset mode.
 80a2b48:	2e2e 7028 6e69 2073 7261 2065 6f6c 2977     ..(pins are low)
 80a2b58:	5300 6174 7472 6e69 2e67 2e2e 7700 6972     .Starting....wri
 80a2b68:	7473 642f 7461 2f61 6573 736e 726f 0073     st/data/sensors.
 80a2b78:	716d 7474 652e 6c63 7069 6573 7270 6a6f     mqtt.eclipseproj
 80a2b88:	6365 7374 692e 006f 0400 514d 5454 0004     ects.io...MQTT..
 80a2b98:	4d06 4951 6473 0370                         .MQIsdp.

080a2ba0 <_ZTV7TwoWire>:
	...
 80a2ba8:	1547 080a 1591 080a 1569 080a 1549 080a     G.......i...I...
 80a2bb8:	1571 080a 1579 080a 1581 080a 1589 080a     q...y...........

080a2bc8 <_ZTV9IPAddress>:
	...
 80a2bd0:	1649 080a 1639 080a 163b 080a 7061 0070     I...9...;...app.

080a2be0 <_ZTVN5spark12NetworkClassE>:
	...
 80a2be8:	1739 080a 1743 080a 174d 080a 1757 080a     9...C...M...W...
 80a2bf8:	1761 080a 176d 080a 1779 080a 1781 080a     a...m...y.......
 80a2c08:	1789 080a 1795 080a 179d 080a 17a7 080a     ................
 80a2c18:	17b1 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a2c28:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a2c38 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2c40:	1ac5 080a 1aed 080a 1f0f 080a 1afb 080a     ................
 80a2c50:	1ac9 080a                                   ....

080a2c54 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a2c5c <_ZTV9TCPClient>:
	...
 80a2c64:	1b01 080a 1b35 080a 1a81 080a 1a9b 080a     ....5...........
 80a2c74:	1d11 080a 1b97 080a 1b69 080a 1ac3 080a     ........i.......
 80a2c84:	1c31 080a 1f15 080a 1bcb 080a 1d85 080a     1...............
 80a2c94:	1e33 080a 1deb 080a 1aab 080a 1df9 080a     3...............
 80a2ca4:	1b49 080a 5925 252d 2d6d 6425 2554 3a48     I...%Y-%m-%dT%H:
 80a2cb4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a2cc4 <_ZTV11USARTSerial>:
	...
 80a2ccc:	2009 080a 2073 080a 204f 080a 182d 080a     . ..s ..O ..-...
 80a2cdc:	201f 080a 203b 080a 202d 080a 2049 080a     . ..; ..- ..I ..
 80a2cec:	200b 080a 2011 080a                         . ... ..

080a2cf4 <_ZTV9USBSerial>:
	...
 80a2cfc:	20fb 080a 2161 080a 2139 080a 182d 080a     . ..a!..9!..-...
 80a2d0c:	212b 080a 20fd 080a 210d 080a 215b 080a     +!... ...!..[!..
 80a2d1c:	211d 080a 20f5 080a                         .!... ..

080a2d24 <_ZTVN5spark9WiFiClassE>:
	...
 80a2d2c:	2337 080a 232d 080a 2323 080a 2295 080a     7#..-#..##..."..
 80a2d3c:	2317 080a 230b 080a 1779 080a 1781 080a     .#...#..y.......
 80a2d4c:	22ff 080a 22f7 080a 22ed 080a 22e3 080a     ."..."..."..."..
 80a2d5c:	229f 080a                                   ."..

080a2d60 <_ZSt7nothrow>:
	...

080a2d61 <_ZTSSt19_Sp_make_shared_tag>:
 80a2d61:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a2d71:	6572 5f64 6174 0067 0000                     red_tag....

080a2d7c <_ZTISt19_Sp_make_shared_tag>:
 80a2d7c:	2dbc 080a 2d61 080a                         .-..a-..

080a2d84 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a2d84:	2e1c 080a 2d90 080a 2e40 080a               .....-..@...

080a2d90 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a2d90:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a2da0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a2db0:	0045 0000                                   E...

080a2db4 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a2db4:	0000 0000 2d84 080a 2711 080a 2725 080a     .....-...'..%'..
 80a2dc4:	28bd 080a 28bd 080a 278f 080a 26d1 080a     .(...(...'...&..
 80a2dd4:	2777 080a 2739 080a 2705 080a               w'..9'...'..

080a2de0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a2de0:	2e1c 080a 2dec 080a 2d84 080a               .....-...-..

080a2dec <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a2dec:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a2dfc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a2e0c:	666e 456f 0000 0000                         nfoE....

080a2e14 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a2e14:	0000 0000 2de0 080a 27b9 080a 27cd 080a     .....-...'...'..
 80a2e24:	28bd 080a 28bd 080a 278f 080a 26d1 080a     .(...(...'...&..
 80a2e34:	2891 080a 281d 080a 27e1 080a               .(...(...'..

080a2e40 <_ZTISt9type_info>:
 80a2e40:	2dbc 080a 2e48 080a                         .-..H...

080a2e48 <_ZTSSt9type_info>:
 80a2e48:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a2e55 <link_const_variable_data_end>:
 80a2e55:	00          	.byte	0x00
	...

080a2e58 <link_constructors_location>:
 80a2e58:	080a07d9 	.word	0x080a07d9
 80a2e5c:	080a1729 	.word	0x080a1729
 80a2e60:	080a1819 	.word	0x080a1819
 80a2e64:	080a18e9 	.word	0x080a18e9
 80a2e68:	080a1a5d 	.word	0x080a1a5d
 80a2e6c:	080a1ff5 	.word	0x080a1ff5
 80a2e70:	080a2341 	.word	0x080a2341
 80a2e74:	080a26a1 	.word	0x080a26a1

080a2e78 <link_constructors_end>:
	...
