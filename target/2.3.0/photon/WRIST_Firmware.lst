
/Users/Edward/Desktop/WRIST_Firmware/target/2.3.0/photon/WRIST_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003984  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a39a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  20000000  080a39a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000674  20000094  20000094  00030094  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3a38  080a3a38  00023a38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3a60  080a3a60  00023a60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012eb03  00000000  00000000  00023a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015ba5  00000000  00000000  00152567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b7ea  00000000  00000000  0016810c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002418  00000000  00000000  001838f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005098  00000000  00000000  00185d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a95e  00000000  00000000  0018ada6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030737  00000000  00000000  001b5704  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b46f2  00000000  00000000  001e5e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005fa4  00000000  00000000  0029a530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f9a1 	bl	80a3374 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f9a9 	bl	80a3390 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a39a4 	.word	0x080a39a4
 80a004c:	20000094 	.word	0x20000094
 80a0050:	20000094 	.word	0x20000094
 80a0054:	20000705 	.word	0x20000705
 80a0058:	20000705 	.word	0x20000705

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb77 	bl	80a2750 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a397c 	.word	0x080a397c
 80a0080:	080a399c 	.word	0x080a399c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 bbf2 	b.w	80a086c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fc91 	bl	80a09b0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bb15 	b.w	80a26c0 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 bb6f 	b.w	80a1778 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 bb6d 	b.w	80a1778 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 bb73 	b.w	80a1788 <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f001 bb71 	b.w	80a1788 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a00b6:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a00b8:	2200      	movs	r2, #0
 80a00ba:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a00bc:	2220      	movs	r2, #32
  _addr = addr;
 80a00be:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a00c0:	60c2      	str	r2, [r0, #12]
#endif
}
 80a00c2:	4770      	bx	lr

080a00c4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a00c4:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a00c6:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a00c8:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a00ca:	b153      	cbz	r3, 80a00e2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a00cc:	7821      	ldrb	r1, [r4, #0]
 80a00ce:	6860      	ldr	r0, [r4, #4]
 80a00d0:	f001 fbe3 	bl	80a189a <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a00d4:	6860      	ldr	r0, [r4, #4]
 80a00d6:	f001 fbe8 	bl	80a18aa <_ZN7TwoWire15endTransmissionEv>
 80a00da:	fab0 f080 	clz	r0, r0
 80a00de:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a00e0:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	f000 f803 	bl	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>
 80a00e8:	2800      	cmp	r0, #0
 80a00ea:	d1ef      	bne.n	80a00cc <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a00ec:	e7f8      	b.n	80a00e0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a00ee <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00ee:	b538      	push	{r3, r4, r5, lr}
 80a00f0:	4604      	mov	r4, r0
  _wire->begin();
 80a00f2:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a00f4:	460d      	mov	r5, r1
  _wire->begin();
 80a00f6:	f001 fba1 	bl	80a183c <_ZN7TwoWire5beginEv>
  _begun = true;
 80a00fa:	2001      	movs	r0, #1
 80a00fc:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a00fe:	b125      	cbz	r5, 80a010a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a0100:	4620      	mov	r0, r4
}
 80a0102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a0106:	f7ff bfdd 	b.w	80a00c4 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a010a:	bd38      	pop	{r3, r4, r5, pc}

080a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a010c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0110:	461f      	mov	r7, r3
 80a0112:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a0116:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a0118:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a011a:	4432      	add	r2, r6
 80a011c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a011e:	4604      	mov	r4, r0
 80a0120:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a0122:	d902      	bls.n	80a012a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0124:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 80a0126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a012a:	7801      	ldrb	r1, [r0, #0]
 80a012c:	6840      	ldr	r0, [r0, #4]
 80a012e:	f001 fbb4 	bl	80a189a <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0132:	b97e      	cbnz	r6, 80a0154 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a0134:	6860      	ldr	r0, [r4, #4]
 80a0136:	462a      	mov	r2, r5
 80a0138:	6803      	ldr	r3, [r0, #0]
 80a013a:	4641      	mov	r1, r8
 80a013c:	68db      	ldr	r3, [r3, #12]
 80a013e:	4798      	blx	r3
 80a0140:	4285      	cmp	r5, r0
 80a0142:	d1ef      	bne.n	80a0124 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a0144:	4639      	mov	r1, r7
 80a0146:	6860      	ldr	r0, [r4, #4]
 80a0148:	f001 fbab 	bl	80a18a2 <_ZN7TwoWire15endTransmissionEh>
 80a014c:	fab0 f080 	clz	r0, r0
 80a0150:	0940      	lsrs	r0, r0, #5
 80a0152:	e7e8      	b.n	80a0126 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0154:	f1b9 0f00 	cmp.w	r9, #0
 80a0158:	d0ec      	beq.n	80a0134 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a015a:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a015c:	4632      	mov	r2, r6
 80a015e:	6803      	ldr	r3, [r0, #0]
 80a0160:	4649      	mov	r1, r9
 80a0162:	68db      	ldr	r3, [r3, #12]
 80a0164:	4798      	blx	r3
 80a0166:	42b0      	cmp	r0, r6
 80a0168:	d1dc      	bne.n	80a0124 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a016a:	e7e3      	b.n	80a0134 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a016c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0170:	4615      	mov	r5, r2
 80a0172:	4604      	mov	r4, r0
 80a0174:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a0176:	b2d2      	uxtb	r2, r2
 80a0178:	7801      	ldrb	r1, [r0, #0]
 80a017a:	6840      	ldr	r0, [r0, #4]
 80a017c:	f001 fb7b 	bl	80a1876 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a0180:	4285      	cmp	r5, r0
 80a0182:	d10d      	bne.n	80a01a0 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a0184:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a0186:	fa1f f887 	uxth.w	r8, r7
 80a018a:	45a8      	cmp	r8, r5
 80a018c:	f107 0701 	add.w	r7, r7, #1
 80a0190:	d209      	bcs.n	80a01a6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a0192:	6860      	ldr	r0, [r4, #4]
 80a0194:	6803      	ldr	r3, [r0, #0]
 80a0196:	695b      	ldr	r3, [r3, #20]
 80a0198:	4798      	blx	r3
 80a019a:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a019e:	e7f2      	b.n	80a0186 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a01a0:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a01a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01a6:	2001      	movs	r0, #1
 80a01a8:	e7fb      	b.n	80a01a2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a01aa <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a01aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01ae:	4607      	mov	r7, r0
 80a01b0:	4688      	mov	r8, r1
 80a01b2:	4616      	mov	r6, r2
 80a01b4:	4699      	mov	r9, r3
  size_t pos = 0;
 80a01b6:	2500      	movs	r5, #0
  while (pos < len) {
 80a01b8:	42b5      	cmp	r5, r6
 80a01ba:	d212      	bcs.n	80a01e2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a01bc:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a01be:	1b74      	subs	r4, r6, r5
 80a01c0:	4294      	cmp	r4, r2
 80a01c2:	bf28      	it	cs
 80a01c4:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a01c6:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a01c8:	42ab      	cmp	r3, r5
 80a01ca:	bf94      	ite	ls
 80a01cc:	464b      	movls	r3, r9
 80a01ce:	2300      	movhi	r3, #0
 80a01d0:	4622      	mov	r2, r4
 80a01d2:	4638      	mov	r0, r7
 80a01d4:	eb08 0105 	add.w	r1, r8, r5
 80a01d8:	f7ff ffc8 	bl	80a016c <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a01dc:	b110      	cbz	r0, 80a01e4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a01de:	4425      	add	r5, r4
  while (pos < len) {
 80a01e0:	e7ea      	b.n	80a01b8 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a01e2:	2001      	movs	r0, #1
}
 80a01e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a01e8 <_ZN16Adafruit_VL6180XC1Eh>:
    @brief  Instantiates a new VL6180X class
    @param  i2caddr Optional initial i2c address of the chip,
   VL6180X_DEFAULT_I2C_ADDR is used by default
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(uint8_t i2caddr) : _i2caddr(i2caddr) {}
 80a01e8:	2200      	movs	r2, #0
 80a01ea:	7201      	strb	r1, [r0, #8]
 80a01ec:	6002      	str	r2, [r0, #0]
 80a01ee:	4770      	bx	lr

080a01f0 <_ZN16Adafruit_VL6180X5read8Et>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  i2c_dev->write(buffer, 2);
 80a01f2:	2300      	movs	r3, #0
 80a01f4:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a01f8:	ba49      	rev16	r1, r1
uint8_t Adafruit_VL6180X::read8(uint16_t address) {
 80a01fa:	4604      	mov	r4, r0
  buffer[0] = uint8_t(address >> 8);
 80a01fc:	f8ad 100c 	strh.w	r1, [sp, #12]
  i2c_dev->write(buffer, 2);
 80a0200:	2301      	movs	r3, #1
 80a0202:	a903      	add	r1, sp, #12
 80a0204:	2202      	movs	r2, #2
 80a0206:	6800      	ldr	r0, [r0, #0]
 80a0208:	f7ff ff80 	bl	80a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 80a020c:	2301      	movs	r3, #1
 80a020e:	6820      	ldr	r0, [r4, #0]
 80a0210:	461a      	mov	r2, r3
 80a0212:	a903      	add	r1, sp, #12
 80a0214:	f7ff ffc9 	bl	80a01aa <_ZN18Adafruit_I2CDevice4readEPhjb>
  return buffer[0];
}
 80a0218:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a021c:	b004      	add	sp, #16
 80a021e:	bd10      	pop	{r4, pc}

080a0220 <_ZN16Adafruit_VL6180X15readRangeStatusEv>:
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0220:	214d      	movs	r1, #77	; 0x4d
uint8_t Adafruit_VL6180X::readRangeStatus(void) {
 80a0222:	b508      	push	{r3, lr}
  return (read8(VL6180X_REG_RESULT_RANGE_STATUS) >> 4);
 80a0224:	f7ff ffe4 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
}
 80a0228:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80a022c:	bd08      	pop	{r3, pc}

080a022e <_ZN16Adafruit_VL6180X6write8Eth>:
  i2c_dev->read(buffer, 2);
  return uint16_t(buffer[0]) << 8 | uint16_t(buffer[1]);
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data) {
 80a022e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[3];
  buffer[0] = uint8_t(address >> 8);
  buffer[1] = uint8_t(address & 0xFF);
  buffer[2] = data;
  i2c_dev->write(buffer, 3);
 80a0230:	2300      	movs	r3, #0
 80a0232:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[0] = uint8_t(address >> 8);
 80a0236:	ba49      	rev16	r1, r1
 80a0238:	f8ad 100c 	strh.w	r1, [sp, #12]
  buffer[2] = data;
 80a023c:	f88d 200e 	strb.w	r2, [sp, #14]
  i2c_dev->write(buffer, 3);
 80a0240:	2301      	movs	r3, #1
 80a0242:	2203      	movs	r2, #3
 80a0244:	a903      	add	r1, sp, #12
 80a0246:	6800      	ldr	r0, [r0, #0]
 80a0248:	f7ff ff60 	bl	80a010c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 80a024c:	b005      	add	sp, #20
 80a024e:	f85d fb04 	ldr.w	pc, [sp], #4

080a0252 <_ZN16Adafruit_VL6180X10setAddressEh>:
boolean Adafruit_VL6180X::setAddress(uint8_t newAddr) {
 80a0252:	b538      	push	{r3, r4, r5, lr}
 80a0254:	4604      	mov	r4, r0
 80a0256:	460d      	mov	r5, r1
  write8(VL6180X_REG_SLAVE_DEVICE_ADDRESS, newAddr & 0x7F);
 80a0258:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a025c:	f240 2112 	movw	r1, #530	; 0x212
 80a0260:	f7ff ffe5 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  if (i2c_dev)
 80a0264:	6820      	ldr	r0, [r4, #0]
  _i2caddr = newAddr;
 80a0266:	7225      	strb	r5, [r4, #8]
  if (i2c_dev)
 80a0268:	b110      	cbz	r0, 80a0270 <_ZN16Adafruit_VL6180X10setAddressEh+0x1e>
    delete i2c_dev;
 80a026a:	2110      	movs	r1, #16
 80a026c:	f002 fb62 	bl	80a2934 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0270:	2010      	movs	r0, #16
 80a0272:	f7ff ff10 	bl	80a0096 <_Znwj>
 80a0276:	4605      	mov	r5, r0
 80a0278:	b118      	cbz	r0, 80a0282 <_ZN16Adafruit_VL6180X10setAddressEh+0x30>
 80a027a:	6862      	ldr	r2, [r4, #4]
 80a027c:	7a21      	ldrb	r1, [r4, #8]
 80a027e:	f7ff ff1a 	bl	80a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return i2c_dev->begin();
 80a0282:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0284:	6025      	str	r5, [r4, #0]
  return i2c_dev->begin();
 80a0286:	2101      	movs	r1, #1
}
 80a0288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return i2c_dev->begin();
 80a028c:	f7ff bf2f 	b.w	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>

080a0290 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
 80a0290:	b510      	push	{r4, lr}
 80a0292:	4604      	mov	r4, r0
  write8(0x0207, 0x01);
 80a0294:	2201      	movs	r2, #1
 80a0296:	f240 2107 	movw	r1, #519	; 0x207
 80a029a:	f7ff ffc8 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0208, 0x01);
 80a029e:	4620      	mov	r0, r4
 80a02a0:	2201      	movs	r2, #1
 80a02a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80a02a6:	f7ff ffc2 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0096, 0x00);
 80a02aa:	4620      	mov	r0, r4
 80a02ac:	2200      	movs	r2, #0
 80a02ae:	2196      	movs	r1, #150	; 0x96
 80a02b0:	f7ff ffbd 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0097, 0xfd);
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	22fd      	movs	r2, #253	; 0xfd
 80a02b8:	2197      	movs	r1, #151	; 0x97
 80a02ba:	f7ff ffb8 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e3, 0x00);
 80a02be:	4620      	mov	r0, r4
 80a02c0:	2200      	movs	r2, #0
 80a02c2:	21e3      	movs	r1, #227	; 0xe3
 80a02c4:	f7ff ffb3 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e4, 0x04);
 80a02c8:	4620      	mov	r0, r4
 80a02ca:	2204      	movs	r2, #4
 80a02cc:	21e4      	movs	r1, #228	; 0xe4
 80a02ce:	f7ff ffae 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e5, 0x02);
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	2202      	movs	r2, #2
 80a02d6:	21e5      	movs	r1, #229	; 0xe5
 80a02d8:	f7ff ffa9 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e6, 0x01);
 80a02dc:	4620      	mov	r0, r4
 80a02de:	2201      	movs	r2, #1
 80a02e0:	21e6      	movs	r1, #230	; 0xe6
 80a02e2:	f7ff ffa4 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00e7, 0x03);
 80a02e6:	4620      	mov	r0, r4
 80a02e8:	2203      	movs	r2, #3
 80a02ea:	21e7      	movs	r1, #231	; 0xe7
 80a02ec:	f7ff ff9f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00f5, 0x02);
 80a02f0:	4620      	mov	r0, r4
 80a02f2:	2202      	movs	r2, #2
 80a02f4:	21f5      	movs	r1, #245	; 0xf5
 80a02f6:	f7ff ff9a 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00d9, 0x05);
 80a02fa:	4620      	mov	r0, r4
 80a02fc:	2205      	movs	r2, #5
 80a02fe:	21d9      	movs	r1, #217	; 0xd9
 80a0300:	f7ff ff95 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00db, 0xce);
 80a0304:	4620      	mov	r0, r4
 80a0306:	22ce      	movs	r2, #206	; 0xce
 80a0308:	21db      	movs	r1, #219	; 0xdb
 80a030a:	f7ff ff90 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dc, 0x03);
 80a030e:	4620      	mov	r0, r4
 80a0310:	2203      	movs	r2, #3
 80a0312:	21dc      	movs	r1, #220	; 0xdc
 80a0314:	f7ff ff8b 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00dd, 0xf8);
 80a0318:	4620      	mov	r0, r4
 80a031a:	22f8      	movs	r2, #248	; 0xf8
 80a031c:	21dd      	movs	r1, #221	; 0xdd
 80a031e:	f7ff ff86 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x009f, 0x00);
 80a0322:	4620      	mov	r0, r4
 80a0324:	2200      	movs	r2, #0
 80a0326:	219f      	movs	r1, #159	; 0x9f
 80a0328:	f7ff ff81 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00a3, 0x3c);
 80a032c:	4620      	mov	r0, r4
 80a032e:	223c      	movs	r2, #60	; 0x3c
 80a0330:	21a3      	movs	r1, #163	; 0xa3
 80a0332:	f7ff ff7c 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b7, 0x00);
 80a0336:	4620      	mov	r0, r4
 80a0338:	2200      	movs	r2, #0
 80a033a:	21b7      	movs	r1, #183	; 0xb7
 80a033c:	f7ff ff77 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00bb, 0x3c);
 80a0340:	4620      	mov	r0, r4
 80a0342:	223c      	movs	r2, #60	; 0x3c
 80a0344:	21bb      	movs	r1, #187	; 0xbb
 80a0346:	f7ff ff72 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00b2, 0x09);
 80a034a:	4620      	mov	r0, r4
 80a034c:	2209      	movs	r2, #9
 80a034e:	21b2      	movs	r1, #178	; 0xb2
 80a0350:	f7ff ff6d 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ca, 0x09);
 80a0354:	4620      	mov	r0, r4
 80a0356:	2209      	movs	r2, #9
 80a0358:	21ca      	movs	r1, #202	; 0xca
 80a035a:	f7ff ff68 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0198, 0x01);
 80a035e:	4620      	mov	r0, r4
 80a0360:	2201      	movs	r2, #1
 80a0362:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80a0366:	f7ff ff62 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01b0, 0x17);
 80a036a:	4620      	mov	r0, r4
 80a036c:	2217      	movs	r2, #23
 80a036e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80a0372:	f7ff ff5c 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ad, 0x00);
 80a0376:	4620      	mov	r0, r4
 80a0378:	2200      	movs	r2, #0
 80a037a:	f240 11ad 	movw	r1, #429	; 0x1ad
 80a037e:	f7ff ff56 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x00ff, 0x05);
 80a0382:	4620      	mov	r0, r4
 80a0384:	2205      	movs	r2, #5
 80a0386:	21ff      	movs	r1, #255	; 0xff
 80a0388:	f7ff ff51 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0100, 0x05);
 80a038c:	4620      	mov	r0, r4
 80a038e:	2205      	movs	r2, #5
 80a0390:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0394:	f7ff ff4b 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0199, 0x05);
 80a0398:	4620      	mov	r0, r4
 80a039a:	2205      	movs	r2, #5
 80a039c:	f240 1199 	movw	r1, #409	; 0x199
 80a03a0:	f7ff ff45 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a6, 0x1b);
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	221b      	movs	r2, #27
 80a03a8:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80a03ac:	f7ff ff3f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01ac, 0x3e);
 80a03b0:	4620      	mov	r0, r4
 80a03b2:	223e      	movs	r2, #62	; 0x3e
 80a03b4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80a03b8:	f7ff ff39 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x01a7, 0x1f);
 80a03bc:	4620      	mov	r0, r4
 80a03be:	221f      	movs	r2, #31
 80a03c0:	f240 11a7 	movw	r1, #423	; 0x1a7
 80a03c4:	f7ff ff33 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0030, 0x00);
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	2200      	movs	r2, #0
 80a03cc:	2130      	movs	r1, #48	; 0x30
 80a03ce:	f7ff ff2e 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0011, 0x10); // Enables polling for 'New Sample ready'
 80a03d2:	4620      	mov	r0, r4
 80a03d4:	2210      	movs	r2, #16
 80a03d6:	2111      	movs	r1, #17
 80a03d8:	f7ff ff29 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x010a, 0x30); // Set the averaging sample period
 80a03dc:	4620      	mov	r0, r4
 80a03de:	2230      	movs	r2, #48	; 0x30
 80a03e0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80a03e4:	f7ff ff23 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003f, 0x46); // Sets the light and dark gain (upper
 80a03e8:	4620      	mov	r0, r4
 80a03ea:	2246      	movs	r2, #70	; 0x46
 80a03ec:	213f      	movs	r1, #63	; 0x3f
 80a03ee:	f7ff ff1e 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0031, 0xFF); // sets the # of range measurements after
 80a03f2:	4620      	mov	r0, r4
 80a03f4:	22ff      	movs	r2, #255	; 0xff
 80a03f6:	2131      	movs	r1, #49	; 0x31
 80a03f8:	f7ff ff19 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0041, 0x63); // Set ALS integration time to 100ms
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	2263      	movs	r2, #99	; 0x63
 80a0400:	2141      	movs	r1, #65	; 0x41
 80a0402:	f7ff ff14 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x002e, 0x01); // perform a single temperature calibration
 80a0406:	4620      	mov	r0, r4
 80a0408:	2201      	movs	r2, #1
 80a040a:	212e      	movs	r1, #46	; 0x2e
 80a040c:	f7ff ff0f 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(SYSRANGE__INTERMEASUREMENT_PERIOD,
 80a0410:	4620      	mov	r0, r4
 80a0412:	2209      	movs	r2, #9
 80a0414:	211b      	movs	r1, #27
 80a0416:	f7ff ff0a 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x003e, 0x31); // Set default ALS inter-measurement period
 80a041a:	4620      	mov	r0, r4
 80a041c:	2231      	movs	r2, #49	; 0x31
 80a041e:	213e      	movs	r1, #62	; 0x3e
 80a0420:	f7ff ff05 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a0424:	4620      	mov	r0, r4
}
 80a0426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(0x0014, 0x24); // Configures interrupt on 'New Sample
 80a042a:	2224      	movs	r2, #36	; 0x24
 80a042c:	2114      	movs	r1, #20
 80a042e:	f7ff befe 	b.w	80a022e <_ZN16Adafruit_VL6180X6write8Eth>

080a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
 80a0432:	b538      	push	{r3, r4, r5, lr}
 80a0434:	4604      	mov	r4, r0
  _i2c = theWire;
 80a0436:	6041      	str	r1, [r0, #4]
  if (i2c_dev)
 80a0438:	6800      	ldr	r0, [r0, #0]
 80a043a:	b110      	cbz	r0, 80a0442 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    delete i2c_dev;
 80a043c:	2110      	movs	r1, #16
 80a043e:	f002 fa79 	bl	80a2934 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0442:	2010      	movs	r0, #16
 80a0444:	f7ff fe27 	bl	80a0096 <_Znwj>
 80a0448:	4605      	mov	r5, r0
 80a044a:	b118      	cbz	r0, 80a0454 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x22>
 80a044c:	6862      	ldr	r2, [r4, #4]
 80a044e:	7a21      	ldrb	r1, [r4, #8]
 80a0450:	f7ff fe31 	bl	80a00b6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 80a0454:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(_i2caddr, _i2c);
 80a0456:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin())
 80a0458:	2101      	movs	r1, #1
 80a045a:	f7ff fe48 	bl	80a00ee <_ZN18Adafruit_I2CDevice5beginEb>
 80a045e:	4605      	mov	r5, r0
 80a0460:	b910      	cbnz	r0, 80a0468 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    return false;
 80a0462:	2500      	movs	r5, #0
}
 80a0464:	4628      	mov	r0, r5
 80a0466:	bd38      	pop	{r3, r4, r5, pc}
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 80a0468:	2100      	movs	r1, #0
 80a046a:	4620      	mov	r0, r4
 80a046c:	f7ff fec0 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a0470:	28b4      	cmp	r0, #180	; 0xb4
 80a0472:	d1f6      	bne.n	80a0462 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x30>
  if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 80a0474:	2116      	movs	r1, #22
 80a0476:	4620      	mov	r0, r4
 80a0478:	f7ff feba 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a047c:	07c3      	lsls	r3, r0, #31
 80a047e:	d5f1      	bpl.n	80a0464 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>
    loadSettings();
 80a0480:	4620      	mov	r0, r4
 80a0482:	f7ff ff05 	bl	80a0290 <_ZN16Adafruit_VL6180X12loadSettingsEv>
    write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80a0486:	2200      	movs	r2, #0
 80a0488:	2116      	movs	r1, #22
 80a048a:	4620      	mov	r0, r4
 80a048c:	f7ff fecf 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
 80a0490:	e7e8      	b.n	80a0464 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x32>

080a0492 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
 80a0492:	b538      	push	{r3, r4, r5, lr}
 80a0494:	4604      	mov	r4, r0
  while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80a0496:	214d      	movs	r1, #77	; 0x4d
 80a0498:	4620      	mov	r0, r4
 80a049a:	f7ff fea9 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a049e:	07c2      	lsls	r2, r0, #31
 80a04a0:	d5f9      	bpl.n	80a0496 <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80a04a2:	2201      	movs	r2, #1
 80a04a4:	2118      	movs	r1, #24
 80a04a6:	4620      	mov	r0, r4
 80a04a8:	f7ff fec1 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
  while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80a04ac:	214f      	movs	r1, #79	; 0x4f
 80a04ae:	4620      	mov	r0, r4
 80a04b0:	f7ff fe9e 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a04b4:	0743      	lsls	r3, r0, #29
 80a04b6:	d5f9      	bpl.n	80a04ac <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 80a04b8:	2162      	movs	r1, #98	; 0x62
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	f7ff fe98 	bl	80a01f0 <_ZN16Adafruit_VL6180X5read8Et>
 80a04c0:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 80a04c2:	2207      	movs	r2, #7
 80a04c4:	4620      	mov	r0, r4
 80a04c6:	2115      	movs	r1, #21
 80a04c8:	f7ff feb1 	bl	80a022e <_ZN16Adafruit_VL6180X6write8Eth>
}
 80a04cc:	4628      	mov	r0, r5
 80a04ce:	bd38      	pop	{r3, r4, r5, pc}

080a04d0 <_Z8callbackPcPhj>:
uint8_t sensor_ranges_prev[COUNT_SENSORS];
uint8_t sensor_status[COUNT_SENSORS];

char data[sizeof(uint32_t) + COUNT_SENSORS];

void callback(char *topic, byte *payload, unsigned int length) {
 80a04d0:	b510      	push	{r4, lr}
 80a04d2:	4604      	mov	r4, r0
    Serial.println(topic);
 80a04d4:	f001 ffbc 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a04d8:	4621      	mov	r1, r4
}
 80a04da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(topic);
 80a04de:	f001 bb16 	b.w	80a1b0e <_ZN5Print7printlnEPKc>

080a04e2 <_Z9reset_shtv>:

void reset_sht() {
 80a04e2:	b510      	push	{r4, lr}
  for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a04e4:	2402      	movs	r4, #2
    digitalWrite(pin, LOW);
 80a04e6:	b2a0      	uxth	r0, r4
 80a04e8:	2100      	movs	r1, #0
  for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a04ea:	3401      	adds	r4, #1
    digitalWrite(pin, LOW);
 80a04ec:	f002 f9bd 	bl	80a286a <digitalWrite>
  for (int pin = SHT_LOX1; pin <= SHT_LOX10; pin++) {
 80a04f0:	2c0f      	cmp	r4, #15
 80a04f2:	d1f8      	bne.n	80a04e6 <_Z9reset_shtv+0x4>
  }
}
 80a04f4:	bd10      	pop	{r4, pc}
	...

080a04f8 <_Z12startSensorsv>:

void startSensors() {
 80a04f8:	b508      	push	{r3, lr}
    // all reset
    reset_sht();
 80a04fa:	f7ff fff2 	bl	80a04e2 <_Z9reset_shtv>
    delay(10);
 80a04fe:	200a      	movs	r0, #10
 80a0500:	f001 f95a 	bl	80a17b8 <delay>

    // all unreset
    digitalWrite(SHT_LOX1, HIGH);
 80a0504:	2101      	movs	r1, #1
 80a0506:	2002      	movs	r0, #2
 80a0508:	f002 f9af 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX2, HIGH);
 80a050c:	2101      	movs	r1, #1
 80a050e:	2003      	movs	r0, #3
 80a0510:	f002 f9ab 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX3, HIGH);
 80a0514:	2101      	movs	r1, #1
 80a0516:	2004      	movs	r0, #4
 80a0518:	f002 f9a7 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX4, HIGH);
 80a051c:	2101      	movs	r1, #1
 80a051e:	2005      	movs	r0, #5
 80a0520:	f002 f9a3 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX5, HIGH);
 80a0524:	2101      	movs	r1, #1
 80a0526:	2006      	movs	r0, #6
 80a0528:	f002 f99f 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX6, HIGH);
 80a052c:	2101      	movs	r1, #1
 80a052e:	200a      	movs	r0, #10
 80a0530:	f002 f99b 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX7, HIGH);
 80a0534:	2101      	movs	r1, #1
 80a0536:	200b      	movs	r0, #11
 80a0538:	f002 f997 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX8, HIGH);
 80a053c:	2101      	movs	r1, #1
 80a053e:	200c      	movs	r0, #12
 80a0540:	f002 f993 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX9, HIGH);
 80a0544:	2101      	movs	r1, #1
 80a0546:	200d      	movs	r0, #13
 80a0548:	f002 f98f 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX10, HIGH);
 80a054c:	2101      	movs	r1, #1
 80a054e:	200e      	movs	r0, #14
 80a0550:	f002 f98b 	bl	80a286a <digitalWrite>
    delay(10);
 80a0554:	200a      	movs	r0, #10
 80a0556:	f001 f92f 	bl	80a17b8 <delay>

    // activating LOX1 and reseting LOX2
    digitalWrite(SHT_LOX1, HIGH);
 80a055a:	2101      	movs	r1, #1
 80a055c:	2002      	movs	r0, #2
 80a055e:	f002 f984 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX2, LOW);
 80a0562:	2100      	movs	r1, #0
 80a0564:	2003      	movs	r0, #3
 80a0566:	f002 f980 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX3, LOW);
 80a056a:	2100      	movs	r1, #0
 80a056c:	2004      	movs	r0, #4
 80a056e:	f002 f97c 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX4, LOW);
 80a0572:	2100      	movs	r1, #0
 80a0574:	2005      	movs	r0, #5
 80a0576:	f002 f978 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX5, LOW);
 80a057a:	2100      	movs	r1, #0
 80a057c:	2006      	movs	r0, #6
 80a057e:	f002 f974 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX6, LOW);
 80a0582:	2100      	movs	r1, #0
 80a0584:	200a      	movs	r0, #10
 80a0586:	f002 f970 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX7, LOW);
 80a058a:	2100      	movs	r1, #0
 80a058c:	200b      	movs	r0, #11
 80a058e:	f002 f96c 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX8, LOW);
 80a0592:	2100      	movs	r1, #0
 80a0594:	200c      	movs	r0, #12
 80a0596:	f002 f968 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX9, LOW);
 80a059a:	2100      	movs	r1, #0
 80a059c:	200d      	movs	r0, #13
 80a059e:	f002 f964 	bl	80a286a <digitalWrite>
    digitalWrite(SHT_LOX10, LOW);
 80a05a2:	2100      	movs	r1, #0
 80a05a4:	200e      	movs	r0, #14
 80a05a6:	f002 f960 	bl	80a286a <digitalWrite>

    // initing LOX1
    if (!lox1.begin()) {
 80a05aa:	f002 f991 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a05ae:	4601      	mov	r1, r0
 80a05b0:	4875      	ldr	r0, [pc, #468]	; (80a0788 <_Z12startSensorsv+0x290>)
 80a05b2:	f7ff ff3e 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a05b6:	b928      	cbnz	r0, 80a05c4 <_Z12startSensorsv+0xcc>
        Serial.println(F("Failed to boot first VL6180X"));
 80a05b8:	f001 ff4a 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a05bc:	4973      	ldr	r1, [pc, #460]	; (80a078c <_Z12startSensorsv+0x294>)
 80a05be:	f001 fab0 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a05c2:	e7fe      	b.n	80a05c2 <_Z12startSensorsv+0xca>
    }
    lox1.setAddress(LOX1_ADDRESS);
 80a05c4:	2130      	movs	r1, #48	; 0x30
 80a05c6:	4870      	ldr	r0, [pc, #448]	; (80a0788 <_Z12startSensorsv+0x290>)
 80a05c8:	f7ff fe43 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>
    delay(10);
 80a05cc:	200a      	movs	r0, #10
 80a05ce:	f001 f8f3 	bl	80a17b8 <delay>

    // activating LOX2
    digitalWrite(SHT_LOX2, HIGH);
 80a05d2:	2101      	movs	r1, #1
 80a05d4:	2003      	movs	r0, #3
 80a05d6:	f002 f948 	bl	80a286a <digitalWrite>
    delay(10);
 80a05da:	200a      	movs	r0, #10
 80a05dc:	f001 f8ec 	bl	80a17b8 <delay>

    // initing LOX2
    if (!lox2.begin()) {
 80a05e0:	f002 f976 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a05e4:	4601      	mov	r1, r0
 80a05e6:	486a      	ldr	r0, [pc, #424]	; (80a0790 <_Z12startSensorsv+0x298>)
 80a05e8:	f7ff ff23 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a05ec:	b928      	cbnz	r0, 80a05fa <_Z12startSensorsv+0x102>
        Serial.println(F("Failed to boot second VL6180X"));
 80a05ee:	f001 ff2f 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a05f2:	4968      	ldr	r1, [pc, #416]	; (80a0794 <_Z12startSensorsv+0x29c>)
 80a05f4:	f001 fa95 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a05f8:	e7fe      	b.n	80a05f8 <_Z12startSensorsv+0x100>
    }
    lox2.setAddress(LOX2_ADDRESS);
 80a05fa:	2131      	movs	r1, #49	; 0x31
 80a05fc:	4864      	ldr	r0, [pc, #400]	; (80a0790 <_Z12startSensorsv+0x298>)
 80a05fe:	f7ff fe28 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX3
    digitalWrite(SHT_LOX3, HIGH);
 80a0602:	2101      	movs	r1, #1
 80a0604:	2004      	movs	r0, #4
 80a0606:	f002 f930 	bl	80a286a <digitalWrite>
    delay(10);
 80a060a:	200a      	movs	r0, #10
 80a060c:	f001 f8d4 	bl	80a17b8 <delay>

    // initing LOX3
    if (!lox3.begin()) {
 80a0610:	f002 f95e 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0614:	4601      	mov	r1, r0
 80a0616:	4860      	ldr	r0, [pc, #384]	; (80a0798 <_Z12startSensorsv+0x2a0>)
 80a0618:	f7ff ff0b 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a061c:	b928      	cbnz	r0, 80a062a <_Z12startSensorsv+0x132>
        Serial.println(F("Failed to boot third VL6180X"));
 80a061e:	f001 ff17 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0622:	495e      	ldr	r1, [pc, #376]	; (80a079c <_Z12startSensorsv+0x2a4>)
 80a0624:	f001 fa7d 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0628:	e7fe      	b.n	80a0628 <_Z12startSensorsv+0x130>
    }
    lox3.setAddress(LOX3_ADDRESS);
 80a062a:	2132      	movs	r1, #50	; 0x32
 80a062c:	485a      	ldr	r0, [pc, #360]	; (80a0798 <_Z12startSensorsv+0x2a0>)
 80a062e:	f7ff fe10 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX4
    digitalWrite(SHT_LOX4, HIGH);
 80a0632:	2101      	movs	r1, #1
 80a0634:	2005      	movs	r0, #5
 80a0636:	f002 f918 	bl	80a286a <digitalWrite>
    delay(10);
 80a063a:	200a      	movs	r0, #10
 80a063c:	f001 f8bc 	bl	80a17b8 <delay>

    // initing LOX4
    if (!lox4.begin()) {
 80a0640:	f002 f946 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0644:	4601      	mov	r1, r0
 80a0646:	4856      	ldr	r0, [pc, #344]	; (80a07a0 <_Z12startSensorsv+0x2a8>)
 80a0648:	f7ff fef3 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a064c:	b928      	cbnz	r0, 80a065a <_Z12startSensorsv+0x162>
        Serial.println(F("Failed to boot fourth VL6180X"));
 80a064e:	f001 feff 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0652:	4954      	ldr	r1, [pc, #336]	; (80a07a4 <_Z12startSensorsv+0x2ac>)
 80a0654:	f001 fa65 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0658:	e7fe      	b.n	80a0658 <_Z12startSensorsv+0x160>
    }
    lox4.setAddress(LOX4_ADDRESS);
 80a065a:	2133      	movs	r1, #51	; 0x33
 80a065c:	4850      	ldr	r0, [pc, #320]	; (80a07a0 <_Z12startSensorsv+0x2a8>)
 80a065e:	f7ff fdf8 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX5
    digitalWrite(SHT_LOX5, HIGH);
 80a0662:	2101      	movs	r1, #1
 80a0664:	2006      	movs	r0, #6
 80a0666:	f002 f900 	bl	80a286a <digitalWrite>
    delay(10);
 80a066a:	200a      	movs	r0, #10
 80a066c:	f001 f8a4 	bl	80a17b8 <delay>

    // initing LOX5
    if (!lox5.begin()) {
 80a0670:	f002 f92e 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0674:	4601      	mov	r1, r0
 80a0676:	484c      	ldr	r0, [pc, #304]	; (80a07a8 <_Z12startSensorsv+0x2b0>)
 80a0678:	f7ff fedb 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a067c:	b928      	cbnz	r0, 80a068a <_Z12startSensorsv+0x192>
        Serial.println(F("Failed to boot fifth VL6180X"));
 80a067e:	f001 fee7 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0682:	494a      	ldr	r1, [pc, #296]	; (80a07ac <_Z12startSensorsv+0x2b4>)
 80a0684:	f001 fa4d 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0688:	e7fe      	b.n	80a0688 <_Z12startSensorsv+0x190>
    }
    lox5.setAddress(LOX5_ADDRESS);
 80a068a:	2134      	movs	r1, #52	; 0x34
 80a068c:	4846      	ldr	r0, [pc, #280]	; (80a07a8 <_Z12startSensorsv+0x2b0>)
 80a068e:	f7ff fde0 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX6
    digitalWrite(SHT_LOX6, HIGH);
 80a0692:	2101      	movs	r1, #1
 80a0694:	200a      	movs	r0, #10
 80a0696:	f002 f8e8 	bl	80a286a <digitalWrite>
    delay(10);
 80a069a:	200a      	movs	r0, #10
 80a069c:	f001 f88c 	bl	80a17b8 <delay>

    // initing LOX6
    if (!lox6.begin()) {
 80a06a0:	f002 f916 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a06a4:	4601      	mov	r1, r0
 80a06a6:	4842      	ldr	r0, [pc, #264]	; (80a07b0 <_Z12startSensorsv+0x2b8>)
 80a06a8:	f7ff fec3 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06ac:	b928      	cbnz	r0, 80a06ba <_Z12startSensorsv+0x1c2>
        Serial.println(F("Failed to boot sixth VL6180X"));
 80a06ae:	f001 fecf 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a06b2:	4940      	ldr	r1, [pc, #256]	; (80a07b4 <_Z12startSensorsv+0x2bc>)
 80a06b4:	f001 fa35 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06b8:	e7fe      	b.n	80a06b8 <_Z12startSensorsv+0x1c0>
    }
    lox6.setAddress(LOX6_ADDRESS);
 80a06ba:	2135      	movs	r1, #53	; 0x35
 80a06bc:	483c      	ldr	r0, [pc, #240]	; (80a07b0 <_Z12startSensorsv+0x2b8>)
 80a06be:	f7ff fdc8 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX7
    digitalWrite(SHT_LOX7, HIGH);
 80a06c2:	2101      	movs	r1, #1
 80a06c4:	200b      	movs	r0, #11
 80a06c6:	f002 f8d0 	bl	80a286a <digitalWrite>
    delay(10);
 80a06ca:	200a      	movs	r0, #10
 80a06cc:	f001 f874 	bl	80a17b8 <delay>

    // initing LOX7
    if (!lox7.begin()) {
 80a06d0:	f002 f8fe 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a06d4:	4601      	mov	r1, r0
 80a06d6:	4838      	ldr	r0, [pc, #224]	; (80a07b8 <_Z12startSensorsv+0x2c0>)
 80a06d8:	f7ff feab 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a06dc:	b928      	cbnz	r0, 80a06ea <_Z12startSensorsv+0x1f2>
        Serial.println(F("Failed to boot seventh VL6180X"));
 80a06de:	f001 feb7 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a06e2:	4936      	ldr	r1, [pc, #216]	; (80a07bc <_Z12startSensorsv+0x2c4>)
 80a06e4:	f001 fa1d 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a06e8:	e7fe      	b.n	80a06e8 <_Z12startSensorsv+0x1f0>
    }
    lox7.setAddress(LOX7_ADDRESS);
 80a06ea:	2136      	movs	r1, #54	; 0x36
 80a06ec:	4832      	ldr	r0, [pc, #200]	; (80a07b8 <_Z12startSensorsv+0x2c0>)
 80a06ee:	f7ff fdb0 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX8
    digitalWrite(SHT_LOX8, HIGH);
 80a06f2:	2101      	movs	r1, #1
 80a06f4:	200c      	movs	r0, #12
 80a06f6:	f002 f8b8 	bl	80a286a <digitalWrite>
    delay(10);
 80a06fa:	200a      	movs	r0, #10
 80a06fc:	f001 f85c 	bl	80a17b8 <delay>

    // initing LOX8
    if (!lox8.begin()) {
 80a0700:	f002 f8e6 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0704:	4601      	mov	r1, r0
 80a0706:	482e      	ldr	r0, [pc, #184]	; (80a07c0 <_Z12startSensorsv+0x2c8>)
 80a0708:	f7ff fe93 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a070c:	b928      	cbnz	r0, 80a071a <_Z12startSensorsv+0x222>
        Serial.println(F("Failed to boot eigth VL6180X"));
 80a070e:	f001 fe9f 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0712:	492c      	ldr	r1, [pc, #176]	; (80a07c4 <_Z12startSensorsv+0x2cc>)
 80a0714:	f001 fa05 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0718:	e7fe      	b.n	80a0718 <_Z12startSensorsv+0x220>
    }
    lox8.setAddress(LOX8_ADDRESS);
 80a071a:	2137      	movs	r1, #55	; 0x37
 80a071c:	4828      	ldr	r0, [pc, #160]	; (80a07c0 <_Z12startSensorsv+0x2c8>)
 80a071e:	f7ff fd98 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX9
    digitalWrite(SHT_LOX9, HIGH);
 80a0722:	2101      	movs	r1, #1
 80a0724:	200d      	movs	r0, #13
 80a0726:	f002 f8a0 	bl	80a286a <digitalWrite>
    delay(10);
 80a072a:	200a      	movs	r0, #10
 80a072c:	f001 f844 	bl	80a17b8 <delay>

    // initing LOX9
    if (!lox9.begin()) {
 80a0730:	f002 f8ce 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0734:	4601      	mov	r1, r0
 80a0736:	4824      	ldr	r0, [pc, #144]	; (80a07c8 <_Z12startSensorsv+0x2d0>)
 80a0738:	f7ff fe7b 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a073c:	b928      	cbnz	r0, 80a074a <_Z12startSensorsv+0x252>
        Serial.println(F("Failed to boot ninth VL6180X"));
 80a073e:	f001 fe87 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0742:	4922      	ldr	r1, [pc, #136]	; (80a07cc <_Z12startSensorsv+0x2d4>)
 80a0744:	f001 f9ed 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0748:	e7fe      	b.n	80a0748 <_Z12startSensorsv+0x250>
    }
    lox9.setAddress(LOX9_ADDRESS);
 80a074a:	2138      	movs	r1, #56	; 0x38
 80a074c:	481e      	ldr	r0, [pc, #120]	; (80a07c8 <_Z12startSensorsv+0x2d0>)
 80a074e:	f7ff fd80 	bl	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>

    // activating LOX10
    digitalWrite(SHT_LOX10, HIGH);
 80a0752:	2101      	movs	r1, #1
 80a0754:	200e      	movs	r0, #14
 80a0756:	f002 f888 	bl	80a286a <digitalWrite>
    delay(10);
 80a075a:	200a      	movs	r0, #10
 80a075c:	f001 f82c 	bl	80a17b8 <delay>

    // initing LOX10
    if (!lox10.begin()) {
 80a0760:	f002 f8b6 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a0764:	4601      	mov	r1, r0
 80a0766:	481a      	ldr	r0, [pc, #104]	; (80a07d0 <_Z12startSensorsv+0x2d8>)
 80a0768:	f7ff fe63 	bl	80a0432 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
 80a076c:	b928      	cbnz	r0, 80a077a <_Z12startSensorsv+0x282>
        Serial.println(F("Failed to boot tenth VL6180X"));
 80a076e:	f001 fe6f 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0772:	4918      	ldr	r1, [pc, #96]	; (80a07d4 <_Z12startSensorsv+0x2dc>)
 80a0774:	f001 f9d5 	bl	80a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>
        while (1);
 80a0778:	e7fe      	b.n	80a0778 <_Z12startSensorsv+0x280>
    }
    lox10.setAddress(LOX10_ADDRESS);
 80a077a:	2139      	movs	r1, #57	; 0x39
}
 80a077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lox10.setAddress(LOX10_ADDRESS);
 80a0780:	4813      	ldr	r0, [pc, #76]	; (80a07d0 <_Z12startSensorsv+0x2d8>)
 80a0782:	f7ff bd66 	b.w	80a0252 <_ZN16Adafruit_VL6180X10setAddressEh>
 80a0786:	bf00      	nop
 80a0788:	20000104 	.word	0x20000104
 80a078c:	080a3500 	.word	0x080a3500
 80a0790:	2000011c 	.word	0x2000011c
 80a0794:	080a351d 	.word	0x080a351d
 80a0798:	20000128 	.word	0x20000128
 80a079c:	080a353b 	.word	0x080a353b
 80a07a0:	20000134 	.word	0x20000134
 80a07a4:	080a3558 	.word	0x080a3558
 80a07a8:	20000140 	.word	0x20000140
 80a07ac:	080a3576 	.word	0x080a3576
 80a07b0:	2000014c 	.word	0x2000014c
 80a07b4:	080a3593 	.word	0x080a3593
 80a07b8:	20000158 	.word	0x20000158
 80a07bc:	080a35b0 	.word	0x080a35b0
 80a07c0:	20000164 	.word	0x20000164
 80a07c4:	080a35cf 	.word	0x080a35cf
 80a07c8:	20000170 	.word	0x20000170
 80a07cc:	080a35ec 	.word	0x080a35ec
 80a07d0:	20000110 	.word	0x20000110
 80a07d4:	080a3609 	.word	0x080a3609

080a07d8 <_Z24round_robin_read_sensorsv>:

void round_robin_read_sensors() {
 80a07d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a07dc:	4d1d      	ldr	r5, [pc, #116]	; (80a0854 <_Z24round_robin_read_sensorsv+0x7c>)
 80a07de:	4c1e      	ldr	r4, [pc, #120]	; (80a0858 <_Z24round_robin_read_sensorsv+0x80>)
 80a07e0:	782b      	ldrb	r3, [r5, #0]
 80a07e2:	4e1e      	ldr	r6, [pc, #120]	; (80a085c <_Z24round_robin_read_sensorsv+0x84>)
 80a07e4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80a07e8:	f7ff fe53 	bl	80a0492 <_ZN16Adafruit_VL6180X9readRangeEv>
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a07ec:	782b      	ldrb	r3, [r5, #0]
    uint8_t range_lox = sensors[sensor_idx]->readRange();
 80a07ee:	4682      	mov	sl, r0
    uint8_t status_lox = sensors[sensor_idx]->readRangeStatus();
 80a07f0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80a07f4:	f7ff fd14 	bl	80a0220 <_ZN16Adafruit_VL6180X15readRangeStatusEv>

    sensor_status[sensor_idx] = status_lox;
 80a07f8:	782c      	ldrb	r4, [r5, #0]
 80a07fa:	4b19      	ldr	r3, [pc, #100]	; (80a0860 <_Z24round_robin_read_sensorsv+0x88>)
 80a07fc:	5518      	strb	r0, [r3, r4]
    if (status_lox == VL6180X_ERROR_NONE) {
 80a07fe:	bb28      	cbnz	r0, 80a084c <_Z24round_robin_read_sensorsv+0x74>
        // apply EWMA filter
        uint8_t val = ALPHA * range_lox + (1.0 - ALPHA) * sensor_ranges_prev[sensor_idx];
 80a0800:	4f18      	ldr	r7, [pc, #96]	; (80a0864 <_Z24round_robin_read_sensorsv+0x8c>)

        // save EWMA filtered value
        data[sizeof(uint32_t) + sensor_idx] = val;
 80a0802:	4426      	add	r6, r4
        uint8_t val = ALPHA * range_lox + (1.0 - ALPHA) * sensor_ranges_prev[sensor_idx];
 80a0804:	5d38      	ldrb	r0, [r7, r4]
 80a0806:	f002 faff 	bl	80a2e08 <__aeabi_i2d>
 80a080a:	2200      	movs	r2, #0
 80a080c:	4b16      	ldr	r3, [pc, #88]	; (80a0868 <_Z24round_robin_read_sensorsv+0x90>)
 80a080e:	f002 fb65 	bl	80a2edc <__aeabi_dmul>
 80a0812:	4680      	mov	r8, r0
 80a0814:	4650      	mov	r0, sl
 80a0816:	4689      	mov	r9, r1
 80a0818:	f002 faf6 	bl	80a2e08 <__aeabi_i2d>
 80a081c:	2200      	movs	r2, #0
 80a081e:	4b12      	ldr	r3, [pc, #72]	; (80a0868 <_Z24round_robin_read_sensorsv+0x90>)
 80a0820:	f002 fb5c 	bl	80a2edc <__aeabi_dmul>
 80a0824:	4602      	mov	r2, r0
 80a0826:	460b      	mov	r3, r1
 80a0828:	4640      	mov	r0, r8
 80a082a:	4649      	mov	r1, r9
 80a082c:	f002 f9a0 	bl	80a2b70 <__adddf3>
 80a0830:	f002 fd66 	bl	80a3300 <__aeabi_d2uiz>
 80a0834:	b2c0      	uxtb	r0, r0
        data[sizeof(uint32_t) + sensor_idx] = val;
 80a0836:	7130      	strb	r0, [r6, #4]
        sensor_ranges_prev[sensor_idx] = val;
 80a0838:	5538      	strb	r0, [r7, r4]
    }
    else {
        data[sizeof(uint32_t) + sensor_idx] = -1;
    }

    sensor_idx = (sensor_idx + 1) % COUNT_SENSORS;
 80a083a:	220a      	movs	r2, #10
 80a083c:	3401      	adds	r4, #1
 80a083e:	fbb4 f3f2 	udiv	r3, r4, r2
 80a0842:	fb02 4413 	mls	r4, r2, r3, r4
 80a0846:	702c      	strb	r4, [r5, #0]
}
 80a0848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        data[sizeof(uint32_t) + sensor_idx] = -1;
 80a084c:	23ff      	movs	r3, #255	; 0xff
 80a084e:	4426      	add	r6, r4
 80a0850:	7133      	strb	r3, [r6, #4]
 80a0852:	e7f2      	b.n	80a083a <_Z24round_robin_read_sensorsv+0x62>
 80a0854:	2000017c 	.word	0x2000017c
 80a0858:	20000000 	.word	0x20000000
 80a085c:	200000f4 	.word	0x200000f4
 80a0860:	20000187 	.word	0x20000187
 80a0864:	2000017d 	.word	0x2000017d
 80a0868:	3fe00000 	.word	0x3fe00000

080a086c <setup>:

void setup() {
 80a086c:	b570      	push	{r4, r5, r6, lr}
 80a086e:	b088      	sub	sp, #32
    Serial.begin(115200);
 80a0870:	f001 fdee 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0874:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0878:	f001 fdca 	bl	80a2410 <_ZN9USBSerial5beginEl>

    // wait until serial port opens for native USB devices
    while (!Serial) {
 80a087c:	f001 fde8 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0880:	f001 fdcd 	bl	80a241e <_ZN9USBSerialcvbEv>
 80a0884:	b918      	cbnz	r0, 80a088e <setup+0x22>
        delay(1);
 80a0886:	2001      	movs	r0, #1
 80a0888:	f000 ff96 	bl	80a17b8 <delay>
    while (!Serial) {
 80a088c:	e7f6      	b.n	80a087c <setup+0x10>
    }

    Serial.println("Connecting...");
 80a088e:	f001 fddf 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0892:	4941      	ldr	r1, [pc, #260]	; (80a0998 <setup+0x12c>)
 80a0894:	f001 f93b 	bl	80a1b0e <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0898:	4940      	ldr	r1, [pc, #256]	; (80a099c <setup+0x130>)
 80a089a:	a804      	add	r0, sp, #16
 80a089c:	f001 f9bf 	bl	80a1c1e <_ZN6StringC1EPKc>
    client.connect(MQTT_NAME);
 80a08a0:	f001 fcd4 	bl	80a224c <_ZN9TimeClass3nowEv>
 80a08a4:	220a      	movs	r2, #10
 80a08a6:	4601      	mov	r1, r0
 80a08a8:	4668      	mov	r0, sp
 80a08aa:	f001 f9dc 	bl	80a1c66 <_ZN6StringC1Elh>
 80a08ae:	4669      	mov	r1, sp
 80a08b0:	a804      	add	r0, sp, #16
 80a08b2:	f001 fa02 	bl	80a1cba <_ZplRK15StringSumHelperRK6String>
 80a08b6:	6801      	ldr	r1, [r0, #0]
 80a08b8:	4839      	ldr	r0, [pc, #228]	; (80a09a0 <setup+0x134>)
 80a08ba:	f000 fb0d 	bl	80a0ed8 <_ZN4MQTT7connectEPKc>
 80a08be:	4668      	mov	r0, sp
 80a08c0:	f001 f963 	bl	80a1b8a <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a08c4:	a804      	add	r0, sp, #16
 80a08c6:	f001 f960 	bl	80a1b8a <_ZN6StringD1Ev>
    while (!client.isConnected()) {
 80a08ca:	4c35      	ldr	r4, [pc, #212]	; (80a09a0 <setup+0x134>)
        Serial.println("Connecting...");
 80a08cc:	4e32      	ldr	r6, [pc, #200]	; (80a0998 <setup+0x12c>)
	StringSumHelper(const char *p) : String(p) {}
 80a08ce:	4d33      	ldr	r5, [pc, #204]	; (80a099c <setup+0x130>)
    while (!client.isConnected()) {
 80a08d0:	4620      	mov	r0, r4
 80a08d2:	f000 fa10 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a08d6:	bb10      	cbnz	r0, 80a091e <setup+0xb2>
        Serial.println("Connecting...");
 80a08d8:	f001 fdba 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a08dc:	4631      	mov	r1, r6
 80a08de:	f001 f916 	bl	80a1b0e <_ZN5Print7printlnEPKc>
 80a08e2:	4629      	mov	r1, r5
 80a08e4:	a804      	add	r0, sp, #16
 80a08e6:	f001 f99a 	bl	80a1c1e <_ZN6StringC1EPKc>
        client.connect(MQTT_NAME);
 80a08ea:	f001 fcaf 	bl	80a224c <_ZN9TimeClass3nowEv>
 80a08ee:	220a      	movs	r2, #10
 80a08f0:	4601      	mov	r1, r0
 80a08f2:	4668      	mov	r0, sp
 80a08f4:	f001 f9b7 	bl	80a1c66 <_ZN6StringC1Elh>
 80a08f8:	4669      	mov	r1, sp
 80a08fa:	a804      	add	r0, sp, #16
 80a08fc:	f001 f9dd 	bl	80a1cba <_ZplRK15StringSumHelperRK6String>
 80a0900:	6801      	ldr	r1, [r0, #0]
 80a0902:	4620      	mov	r0, r4
 80a0904:	f000 fae8 	bl	80a0ed8 <_ZN4MQTT7connectEPKc>
 80a0908:	4668      	mov	r0, sp
 80a090a:	f001 f93e 	bl	80a1b8a <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a090e:	a804      	add	r0, sp, #16
 80a0910:	f001 f93b 	bl	80a1b8a <_ZN6StringD1Ev>
        delay(1000);
 80a0914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0918:	f000 ff4e 	bl	80a17b8 <delay>
    while (!client.isConnected()) {
 80a091c:	e7d8      	b.n	80a08d0 <setup+0x64>
    }

    pinMode(SHT_LOX1, OUTPUT);
 80a091e:	2101      	movs	r1, #1
 80a0920:	2002      	movs	r0, #2
 80a0922:	f001 ff91 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX2, OUTPUT);
 80a0926:	2101      	movs	r1, #1
 80a0928:	2003      	movs	r0, #3
 80a092a:	f001 ff8d 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX3, OUTPUT);
 80a092e:	2101      	movs	r1, #1
 80a0930:	2004      	movs	r0, #4
 80a0932:	f001 ff89 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX4, OUTPUT);
 80a0936:	2101      	movs	r1, #1
 80a0938:	2005      	movs	r0, #5
 80a093a:	f001 ff85 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX5, OUTPUT);
 80a093e:	2101      	movs	r1, #1
 80a0940:	2006      	movs	r0, #6
 80a0942:	f001 ff81 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX6, OUTPUT);
 80a0946:	2101      	movs	r1, #1
 80a0948:	200a      	movs	r0, #10
 80a094a:	f001 ff7d 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX7, OUTPUT);
 80a094e:	2101      	movs	r1, #1
 80a0950:	200b      	movs	r0, #11
 80a0952:	f001 ff79 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX8, OUTPUT);
 80a0956:	2101      	movs	r1, #1
 80a0958:	200c      	movs	r0, #12
 80a095a:	f001 ff75 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX9, OUTPUT);
 80a095e:	2101      	movs	r1, #1
 80a0960:	200d      	movs	r0, #13
 80a0962:	f001 ff71 	bl	80a2848 <pinMode>
    pinMode(SHT_LOX10, OUTPUT);
 80a0966:	2101      	movs	r1, #1
 80a0968:	200e      	movs	r0, #14
 80a096a:	f001 ff6d 	bl	80a2848 <pinMode>

    Serial.println("Shutdown pins inited...");
 80a096e:	f001 fd6f 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0972:	490c      	ldr	r1, [pc, #48]	; (80a09a4 <setup+0x138>)
 80a0974:	f001 f8cb 	bl	80a1b0e <_ZN5Print7printlnEPKc>

    reset_sht();
 80a0978:	f7ff fdb3 	bl	80a04e2 <_Z9reset_shtv>
    Serial.println("All in reset mode...(pins are low)");
 80a097c:	f001 fd68 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a0980:	4909      	ldr	r1, [pc, #36]	; (80a09a8 <setup+0x13c>)
 80a0982:	f001 f8c4 	bl	80a1b0e <_ZN5Print7printlnEPKc>


    Serial.println("Starting...");
 80a0986:	f001 fd63 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a098a:	4908      	ldr	r1, [pc, #32]	; (80a09ac <setup+0x140>)
 80a098c:	f001 f8bf 	bl	80a1b0e <_ZN5Print7printlnEPKc>
    startSensors();
 80a0990:	f7ff fdb2 	bl	80a04f8 <_Z12startSensorsv>
}
 80a0994:	b008      	add	sp, #32
 80a0996:	bd70      	pop	{r4, r5, r6, pc}
 80a0998:	080a3626 	.word	0x080a3626
 80a099c:	080a3634 	.word	0x080a3634
 80a09a0:	20000094 	.word	0x20000094
 80a09a4:	080a3640 	.word	0x080a3640
 80a09a8:	080a3658 	.word	0x080a3658
 80a09ac:	080a367b 	.word	0x080a367b

080a09b0 <loop>:

void loop() {
 80a09b0:	b510      	push	{r4, lr}
    round_robin_read_sensors();
 80a09b2:	f7ff ff11 	bl	80a07d8 <_Z24round_robin_read_sensorsv>

    if (sensor_idx == COUNT_SENSORS - 1) {
 80a09b6:	4b0d      	ldr	r3, [pc, #52]	; (80a09ec <loop+0x3c>)
 80a09b8:	781b      	ldrb	r3, [r3, #0]
 80a09ba:	2b09      	cmp	r3, #9
 80a09bc:	d10c      	bne.n	80a09d8 <loop+0x28>

            if (i != COUNT_SENSORS-1) Serial.print(" : ");
        }
        Serial.println();
#endif
        uint32_t timestamp = Time.now();
 80a09be:	f001 fc45 	bl	80a224c <_ZN9TimeClass3nowEv>
        *(uint32_t *)(&data) = timestamp;
 80a09c2:	4c0b      	ldr	r4, [pc, #44]	; (80a09f0 <loop+0x40>)
 80a09c4:	6020      	str	r0, [r4, #0]

        if (client.isConnected()) client.publish(DATA_TOPIC, data);
 80a09c6:	480b      	ldr	r0, [pc, #44]	; (80a09f4 <loop+0x44>)
 80a09c8:	f000 f995 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a09cc:	b120      	cbz	r0, 80a09d8 <loop+0x28>
 80a09ce:	4622      	mov	r2, r4
 80a09d0:	4909      	ldr	r1, [pc, #36]	; (80a09f8 <loop+0x48>)
 80a09d2:	4808      	ldr	r0, [pc, #32]	; (80a09f4 <loop+0x44>)
 80a09d4:	f000 fb0b 	bl	80a0fee <_ZN4MQTT7publishEPKcS1_>
    }

    if (client.isConnected()) client.loop();
 80a09d8:	4806      	ldr	r0, [pc, #24]	; (80a09f4 <loop+0x44>)
 80a09da:	f000 f98c 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a09de:	b120      	cbz	r0, 80a09ea <loop+0x3a>
}
 80a09e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (client.isConnected()) client.loop();
 80a09e4:	4803      	ldr	r0, [pc, #12]	; (80a09f4 <loop+0x44>)
 80a09e6:	f000 bb5d 	b.w	80a10a4 <_ZN4MQTT4loopEv>
}
 80a09ea:	bd10      	pop	{r4, pc}
 80a09ec:	2000017c 	.word	0x2000017c
 80a09f0:	200000f4 	.word	0x200000f4
 80a09f4:	20000094 	.word	0x20000094
 80a09f8:	080a3687 	.word	0x080a3687

080a09fc <_GLOBAL__sub_I_client>:
MQTT client(MQTT_HOST, MQTT_PORT, callback);
 80a09fc:	2300      	movs	r3, #0
}
 80a09fe:	b507      	push	{r0, r1, r2, lr}
MQTT client(MQTT_HOST, MQTT_PORT, callback);
 80a0a00:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0a04:	9300      	str	r3, [sp, #0]
 80a0a06:	4918      	ldr	r1, [pc, #96]	; (80a0a68 <_GLOBAL__sub_I_client+0x6c>)
 80a0a08:	4b18      	ldr	r3, [pc, #96]	; (80a0a6c <_GLOBAL__sub_I_client+0x70>)
 80a0a0a:	4819      	ldr	r0, [pc, #100]	; (80a0a70 <_GLOBAL__sub_I_client+0x74>)
 80a0a0c:	f000 f88a 	bl	80a0b24 <_ZN4MQTTC1EPKctPFvPcPhjEb>
Adafruit_VL6180X lox1   = Adafruit_VL6180X();
 80a0a10:	2129      	movs	r1, #41	; 0x29
 80a0a12:	4818      	ldr	r0, [pc, #96]	; (80a0a74 <_GLOBAL__sub_I_client+0x78>)
 80a0a14:	f7ff fbe8 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox2   = Adafruit_VL6180X();
 80a0a18:	2129      	movs	r1, #41	; 0x29
 80a0a1a:	4817      	ldr	r0, [pc, #92]	; (80a0a78 <_GLOBAL__sub_I_client+0x7c>)
 80a0a1c:	f7ff fbe4 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox3   = Adafruit_VL6180X();
 80a0a20:	2129      	movs	r1, #41	; 0x29
 80a0a22:	4816      	ldr	r0, [pc, #88]	; (80a0a7c <_GLOBAL__sub_I_client+0x80>)
 80a0a24:	f7ff fbe0 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox4   = Adafruit_VL6180X();
 80a0a28:	2129      	movs	r1, #41	; 0x29
 80a0a2a:	4815      	ldr	r0, [pc, #84]	; (80a0a80 <_GLOBAL__sub_I_client+0x84>)
 80a0a2c:	f7ff fbdc 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox5   = Adafruit_VL6180X();
 80a0a30:	2129      	movs	r1, #41	; 0x29
 80a0a32:	4814      	ldr	r0, [pc, #80]	; (80a0a84 <_GLOBAL__sub_I_client+0x88>)
 80a0a34:	f7ff fbd8 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox6   = Adafruit_VL6180X();
 80a0a38:	2129      	movs	r1, #41	; 0x29
 80a0a3a:	4813      	ldr	r0, [pc, #76]	; (80a0a88 <_GLOBAL__sub_I_client+0x8c>)
 80a0a3c:	f7ff fbd4 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox7   = Adafruit_VL6180X();
 80a0a40:	2129      	movs	r1, #41	; 0x29
 80a0a42:	4812      	ldr	r0, [pc, #72]	; (80a0a8c <_GLOBAL__sub_I_client+0x90>)
 80a0a44:	f7ff fbd0 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox8   = Adafruit_VL6180X();
 80a0a48:	2129      	movs	r1, #41	; 0x29
 80a0a4a:	4811      	ldr	r0, [pc, #68]	; (80a0a90 <_GLOBAL__sub_I_client+0x94>)
 80a0a4c:	f7ff fbcc 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox9   = Adafruit_VL6180X();
 80a0a50:	2129      	movs	r1, #41	; 0x29
 80a0a52:	4810      	ldr	r0, [pc, #64]	; (80a0a94 <_GLOBAL__sub_I_client+0x98>)
 80a0a54:	f7ff fbc8 	bl	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
Adafruit_VL6180X lox10  = Adafruit_VL6180X();
 80a0a58:	2129      	movs	r1, #41	; 0x29
 80a0a5a:	480f      	ldr	r0, [pc, #60]	; (80a0a98 <_GLOBAL__sub_I_client+0x9c>)
}
 80a0a5c:	b003      	add	sp, #12
 80a0a5e:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_VL6180X lox10  = Adafruit_VL6180X();
 80a0a62:	f7ff bbc1 	b.w	80a01e8 <_ZN16Adafruit_VL6180XC1Eh>
 80a0a66:	bf00      	nop
 80a0a68:	080a369a 	.word	0x080a369a
 80a0a6c:	080a04d1 	.word	0x080a04d1
 80a0a70:	20000094 	.word	0x20000094
 80a0a74:	20000104 	.word	0x20000104
 80a0a78:	2000011c 	.word	0x2000011c
 80a0a7c:	20000128 	.word	0x20000128
 80a0a80:	20000134 	.word	0x20000134
 80a0a84:	20000140 	.word	0x20000140
 80a0a88:	2000014c 	.word	0x2000014c
 80a0a8c:	20000158 	.word	0x20000158
 80a0a90:	20000164 	.word	0x20000164
 80a0a94:	20000170 	.word	0x20000170
 80a0a98:	20000110 	.word	0x20000110

080a0a9c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a0a9c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a0aa0:	b510      	push	{r4, lr}
 80a0aa2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a0aa4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a0aa6:	b113      	cbz	r3, 80a0aae <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a0aa8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a0aaa:	f000 fc15 	bl	80a12d8 <os_mutex_lock>
#endif
#endif
#endif
        }
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	bd10      	pop	{r4, pc}

080a0ab2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a0ab2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a0ab4:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a0ab6:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a0ab8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a0abc:	b112      	cbz	r2, 80a0ac4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a0abe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a0ac0:	f000 fc12 	bl	80a12e8 <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	bd10      	pop	{r4, pc}

080a0ac8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a0ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0aca:	461f      	mov	r7, r3
 80a0acc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a0ad0:	4604      	mov	r4, r0
 80a0ad2:	460d      	mov	r5, r1
 80a0ad4:	4616      	mov	r6, r2
    if (thread) {
 80a0ad6:	b123      	cbz	r3, 80a0ae2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 80a0ad8:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a0ada:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a0adc:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a0ade:	f000 fbf3 	bl	80a12c8 <os_mutex_create>
    }
    this->callback = callback;
 80a0ae2:	9b08      	ldr	r3, [sp, #32]
 80a0ae4:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a0ae6:	2300      	movs	r3, #0
 80a0ae8:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0aea:	b106      	cbz	r6, 80a0aee <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 80a0aec:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a0aee:	b125      	cbz	r5, 80a0afa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 80a0af0:	4629      	mov	r1, r5
 80a0af2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0af6:	f001 f8a5 	bl	80a1c44 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0afa:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0afc:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a0afe:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0b00:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a0b02:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0b06:	2bff      	cmp	r3, #255	; 0xff
 80a0b08:	bfb8      	it	lt
 80a0b0a:	23ff      	movlt	r3, #255	; 0xff
 80a0b0c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0b10:	b108      	cbz	r0, 80a0b16 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 80a0b12:	f7ff fac6 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0b16:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0b1a:	f7ff fabe 	bl	80a009a <_Znaj>
 80a0b1e:	61e0      	str	r0, [r4, #28]
}
 80a0b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0b24 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0b24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0b28:	4604      	mov	r4, r0
            bool thread) {
 80a0b2a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a0b2c:	4698      	mov	r8, r3
 80a0b2e:	4617      	mov	r7, r2
 80a0b30:	460e      	mov	r6, r1
            bool thread) {
 80a0b32:	f001 fb13 	bl	80a215c <_ZN9TCPClientC1Ev>
 80a0b36:	490d      	ldr	r1, [pc, #52]	; (80a0b6c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
 80a0b38:	61e5      	str	r5, [r4, #28]
 80a0b3a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0b3e:	f001 f86e 	bl	80a1c1e <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a0b42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a0b46:	22ff      	movs	r2, #255	; 0xff
 80a0b48:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a0b4c:	230f      	movs	r3, #15
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	e9cd 3200 	strd	r3, r2, [sp]
 80a0b54:	4631      	mov	r1, r6
 80a0b56:	463b      	mov	r3, r7
 80a0b58:	462a      	mov	r2, r5
            bool thread) {
 80a0b5a:	64a5      	str	r5, [r4, #72]	; 0x48
 80a0b5c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a0b60:	f7ff ffb2 	bl	80a0ac8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	b004      	add	sp, #16
 80a0b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b6c:	080a367a 	.word	0x080a367a

080a0b70 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0b70:	b510      	push	{r4, lr}
 80a0b72:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	f001 fa07 	bl	80a1f88 <_ZN9TCPClient9availableEv>
 80a0b7a:	2800      	cmp	r0, #0
 80a0b7c:	d0fa      	beq.n	80a0b74 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0b7e:	4620      	mov	r0, r4
 80a0b80:	f001 f945 	bl	80a1e0e <_ZN9TCPClient4readEv>
}
 80a0b84:	b2c0      	uxtb	r0, r0
 80a0b86:	bd10      	pop	{r4, pc}

080a0b88 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b8c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0b8e:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0b90:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0b92:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a0b94:	f7ff ffec 	bl	80a0b70 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a0b98:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a0b9c:	7020      	strb	r0, [r4, #0]
 80a0b9e:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0ba0:	69eb      	ldr	r3, [r5, #28]
 80a0ba2:	f893 a000 	ldrb.w	sl, [r3]
 80a0ba6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0baa:	4628      	mov	r0, r5
 80a0bac:	f7ff ffe0 	bl	80a0b70 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0bb0:	4626      	mov	r6, r4
 80a0bb2:	69eb      	ldr	r3, [r5, #28]
 80a0bb4:	3401      	adds	r4, #1
 80a0bb6:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0bb8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0bbc:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0bc0:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a0bc2:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0bc4:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a0bc8:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a0bcc:	d4ed      	bmi.n	80a0baa <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a0bce:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0bd0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a0bd4:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a0bd8:	d124      	bne.n	80a0c24 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0bda:	4628      	mov	r0, r5
 80a0bdc:	69ef      	ldr	r7, [r5, #28]
 80a0bde:	f7ff ffc7 	bl	80a0b70 <_ZN4MQTT8readByteEv>
 80a0be2:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a0be4:	4628      	mov	r0, r5
 80a0be6:	69ef      	ldr	r7, [r5, #28]
 80a0be8:	f7ff ffc2 	bl	80a0b70 <_ZN4MQTT8readByteEv>
 80a0bec:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a0bee:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a0bf0:	b2b6      	uxth	r6, r6
 80a0bf2:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0bf4:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a0bf6:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0bf8:	b2b6      	uxth	r6, r6
 80a0bfa:	46b1      	mov	r9, r6
 80a0bfc:	4627      	mov	r7, r4
 80a0bfe:	45c1      	cmp	r9, r8
 80a0c00:	d212      	bcs.n	80a0c28 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0c02:	4628      	mov	r0, r5
 80a0c04:	f7ff ffb4 	bl	80a0b70 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0c08:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a0c0c:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a0c10:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a0c12:	bf88      	it	hi
 80a0c14:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a0c16:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a0c1a:	bf88      	it	hi
 80a0c1c:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a0c1e:	3701      	adds	r7, #1
 80a0c20:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a0c22:	e7ec      	b.n	80a0bfe <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a0c24:	2600      	movs	r6, #0
 80a0c26:	e7e7      	b.n	80a0bf8 <_ZN4MQTT10readPacketEPh+0x70>
 80a0c28:	eba8 0006 	sub.w	r0, r8, r6
 80a0c2c:	45b0      	cmp	r8, r6
 80a0c2e:	bf2c      	ite	cs
 80a0c30:	4606      	movcs	r6, r0
 80a0c32:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a0c34:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a0c38:	4434      	add	r4, r6
 80a0c3a:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0c3c:	42a0      	cmp	r0, r4
 80a0c3e:	bf2c      	ite	cs
 80a0c40:	4620      	movcs	r0, r4
 80a0c42:	2000      	movcc	r0, #0
 80a0c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0c48 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0c4a:	468c      	mov	ip, r1
 80a0c4c:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0c4e:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0c50:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a0c52:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a0c54:	46ae      	mov	lr, r5
 80a0c56:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a0c5a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0c5e:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a0c60:	bf88      	it	hi
 80a0c62:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a0c66:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a0c68:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a0c6c:	4403      	add	r3, r0
        len = len / 128;
 80a0c6e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a0c72:	b2e4      	uxtb	r4, r4
 80a0c74:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a0c78:	d810      	bhi.n	80a0c9c <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a0c7a:	f1c4 0304 	rsb	r3, r4, #4
 80a0c7e:	18d1      	adds	r1, r2, r3
 80a0c80:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0c84:	f1c4 0305 	rsb	r3, r4, #5
 80a0c88:	4413      	add	r3, r2
 80a0c8a:	a801      	add	r0, sp, #4
 80a0c8c:	3205      	adds	r2, #5
 80a0c8e:	4293      	cmp	r3, r2
 80a0c90:	d006      	beq.n	80a0ca0 <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a0c92:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a0c96:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a0c9a:	e7f8      	b.n	80a0c8e <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a0c9c:	4623      	mov	r3, r4
 80a0c9e:	e7d9      	b.n	80a0c54 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0ca0:	1c72      	adds	r2, r6, #1
 80a0ca2:	4422      	add	r2, r4
 80a0ca4:	4638      	mov	r0, r7
 80a0ca6:	f001 f834 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
 80a0caa:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0cac:	f000 fb3c 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0cb0:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a0cb2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0cb4:	4434      	add	r4, r6
 80a0cb6:	b2a8      	uxth	r0, r5
}
 80a0cb8:	1a23      	subs	r3, r4, r0
 80a0cba:	4258      	negs	r0, r3
 80a0cbc:	4158      	adcs	r0, r3
 80a0cbe:	b003      	add	sp, #12
 80a0cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0cc2 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0cc2:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cc6:	4604      	mov	r4, r0
    pos += 2;
 80a0cc8:	b298      	uxth	r0, r3
 80a0cca:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a0ccc:	5ccd      	ldrb	r5, [r1, r3]
 80a0cce:	b14d      	cbz	r5, 80a0ce4 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0cd0:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0cd4:	1c5f      	adds	r7, r3, #1
 80a0cd6:	4286      	cmp	r6, r0
 80a0cd8:	d904      	bls.n	80a0ce4 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0cda:	1c46      	adds	r6, r0, #1
 80a0cdc:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a0cde:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a0ce0:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a0ce2:	e7f3      	b.n	80a0ccc <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0ce4:	b299      	uxth	r1, r3
 80a0ce6:	1a44      	subs	r4, r0, r1
 80a0ce8:	4422      	add	r2, r4
 80a0cea:	1209      	asrs	r1, r1, #8
 80a0cec:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0cf0:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a0cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0cf6 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0cf6:	b538      	push	{r3, r4, r5, lr}
 80a0cf8:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0cfa:	f001 f9d6 	bl	80a20aa <_ZN9TCPClient9connectedEv>
 80a0cfe:	2800      	cmp	r0, #0
 80a0d00:	bf14      	ite	ne
 80a0d02:	2501      	movne	r5, #1
 80a0d04:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a0d06:	d102      	bne.n	80a0d0e <_ZN4MQTT11isConnectedEv+0x18>
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	f001 f977 	bl	80a1ffc <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0d0e:	4628      	mov	r0, r5
 80a0d10:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0d14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0d18:	b088      	sub	sp, #32
 80a0d1a:	4604      	mov	r4, r0
 80a0d1c:	4689      	mov	r9, r1
 80a0d1e:	4617      	mov	r7, r2
 80a0d20:	461e      	mov	r6, r3
 80a0d22:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a0d26:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a0d2a:	f7ff ffe4 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a0d2e:	4605      	mov	r5, r0
 80a0d30:	2800      	cmp	r0, #0
 80a0d32:	f040 80cb 	bne.w	80a0ecc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
 80a0d36:	4621      	mov	r1, r4
 80a0d38:	a801      	add	r0, sp, #4
 80a0d3a:	f7ff feaf 	bl	80a0a9c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a0d3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0d40:	2900      	cmp	r1, #0
 80a0d42:	f040 8087 	bne.w	80a0e54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0d46:	462b      	mov	r3, r5
 80a0d48:	4620      	mov	r0, r4
 80a0d4a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0d4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0d50:	f001 fa1c 	bl	80a218c <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0d54:	2800      	cmp	r0, #0
 80a0d56:	d079      	beq.n	80a0e4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
 80a0d58:	2301      	movs	r3, #1
 80a0d5a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a0d5c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a0d60:	69e2      	ldr	r2, [r4, #28]
 80a0d62:	2b04      	cmp	r3, #4
 80a0d64:	f040 8081 	bne.w	80a0e6a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0d68:	4b59      	ldr	r3, [pc, #356]	; (80a0ed0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
 80a0d6a:	6818      	ldr	r0, [r3, #0]
 80a0d6c:	8899      	ldrh	r1, [r3, #4]
 80a0d6e:	799b      	ldrb	r3, [r3, #6]
 80a0d70:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a0d74:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0d78:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0d7a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0d7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a0d82:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a0d86:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a0d88:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0d8a:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a0d8e:	f1b8 0f00 	cmp.w	r8, #0
 80a0d92:	d07f      	beq.n	80a0e94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0d94:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a0d98:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a0d9c:	0140      	lsls	r0, r0, #5
 80a0d9e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a0da2:	f040 0006 	orr.w	r0, r0, #6
 80a0da6:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a0da8:	f1ba 0f00 	cmp.w	sl, #0
 80a0dac:	d101      	bne.n	80a0db2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
 80a0dae:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a0db2:	b11f      	cbz	r7, 80a0dbc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
 80a0db4:	2e00      	cmp	r6, #0
 80a0db6:	d16f      	bne.n	80a0e98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
 80a0db8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a0dbc:	69e2      	ldr	r2, [r4, #28]
 80a0dbe:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a0dc0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0dc2:	69e1      	ldr	r1, [r4, #28]
 80a0dc4:	1c58      	adds	r0, r3, #1
 80a0dc6:	1212      	asrs	r2, r2, #8
 80a0dc8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0dca:	69e1      	ldr	r1, [r4, #28]
 80a0dcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0dce:	1c9a      	adds	r2, r3, #2
 80a0dd0:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0dd2:	3303      	adds	r3, #3
 80a0dd4:	4649      	mov	r1, r9
 80a0dd6:	4620      	mov	r0, r4
 80a0dd8:	69e2      	ldr	r2, [r4, #28]
 80a0dda:	f7ff ff72 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
 80a0dde:	4603      	mov	r3, r0
            if (willTopic) {
 80a0de0:	f1b8 0f00 	cmp.w	r8, #0
 80a0de4:	d00b      	beq.n	80a0dfe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
 80a0de6:	4641      	mov	r1, r8
 80a0de8:	69e2      	ldr	r2, [r4, #28]
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	f7ff ff69 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0df0:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a0df2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a0df4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f7ff ff63 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
 80a0dfc:	4603      	mov	r3, r0
            if(user != NULL) {
 80a0dfe:	b167      	cbz	r7, 80a0e1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
 80a0e00:	4639      	mov	r1, r7
 80a0e02:	4620      	mov	r0, r4
 80a0e04:	69e2      	ldr	r2, [r4, #28]
 80a0e06:	f7ff ff5c 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
 80a0e0a:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a0e0c:	b12e      	cbz	r6, 80a0e1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
 80a0e0e:	4631      	mov	r1, r6
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	69e2      	ldr	r2, [r4, #28]
 80a0e14:	f7ff ff55 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
 80a0e18:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0e1a:	3b05      	subs	r3, #5
 80a0e1c:	2110      	movs	r1, #16
 80a0e1e:	69e2      	ldr	r2, [r4, #28]
 80a0e20:	b29b      	uxth	r3, r3
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	f7ff ff10 	bl	80a0c48 <_ZN4MQTT5writeEhPht>
 80a0e28:	f000 fa7e 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0e2c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a0e30:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	f001 f8a7 	bl	80a1f88 <_ZN9TCPClient9availableEv>
 80a0e3a:	bb80      	cbnz	r0, 80a0e9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
 80a0e3c:	f000 fa74 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0e42:	1ac0      	subs	r0, r0, r3
 80a0e44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0e46:	4373      	muls	r3, r6
 80a0e48:	4298      	cmp	r0, r3
 80a0e4a:	d9f3      	bls.n	80a0e34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	f001 f8d5 	bl	80a1ffc <_ZN9TCPClient4stopEv>
 80a0e52:	e034      	b.n	80a0ebe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
 80a0e54:	a802      	add	r0, sp, #8
 80a0e56:	f000 fd99 	bl	80a198c <_ZN9IPAddressC1EPKh>
 80a0e5a:	462b      	mov	r3, r5
 80a0e5c:	4620      	mov	r0, r4
 80a0e5e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0e62:	a902      	add	r1, sp, #8
 80a0e64:	f001 f820 	bl	80a1ea8 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0e68:	e774      	b.n	80a0d54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0e6a:	4b1a      	ldr	r3, [pc, #104]	; (80a0ed4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a0e6c:	f10d 0c08 	add.w	ip, sp, #8
 80a0e70:	6818      	ldr	r0, [r3, #0]
 80a0e72:	6859      	ldr	r1, [r3, #4]
 80a0e74:	7a1b      	ldrb	r3, [r3, #8]
 80a0e76:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0e7a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0e7e:	ab02      	add	r3, sp, #8
 80a0e80:	cb03      	ldmia	r3!, {r0, r1}
 80a0e82:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0e86:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0e8a:	f89c 3000 	ldrb.w	r3, [ip]
 80a0e8e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0e90:	230e      	movs	r3, #14
 80a0e92:	e77c      	b.n	80a0d8e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a0e94:	2002      	movs	r0, #2
 80a0e96:	e787      	b.n	80a0da8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
 80a0e98:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a0e9c:	e78e      	b.n	80a0dbc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	a902      	add	r1, sp, #8
 80a0ea2:	f7ff fe71 	bl	80a0b88 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a0ea6:	2804      	cmp	r0, #4
 80a0ea8:	d1d0      	bne.n	80a0e4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
 80a0eaa:	69e3      	ldr	r3, [r4, #28]
 80a0eac:	78de      	ldrb	r6, [r3, #3]
 80a0eae:	2e00      	cmp	r6, #0
 80a0eb0:	d1cc      	bne.n	80a0e4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
 80a0eb2:	f000 fa39 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a0eb6:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a0eb8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0eba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a0ebe:	a801      	add	r0, sp, #4
 80a0ec0:	f7ff fdf7 	bl	80a0ab2 <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0ec4:	4628      	mov	r0, r5
 80a0ec6:	b008      	add	sp, #32
 80a0ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a0ecc:	2500      	movs	r5, #0
 80a0ece:	e7f9      	b.n	80a0ec4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
 80a0ed0:	080a36b2 	.word	0x080a36b2
 80a0ed4:	080a36b9 	.word	0x080a36b9

080a0ed8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a0ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0eda:	2301      	movs	r3, #1
 80a0edc:	2204      	movs	r2, #4
 80a0ede:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a0ee2:	2300      	movs	r3, #0
 80a0ee4:	461a      	mov	r2, r3
 80a0ee6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a0eea:	e9cd 3300 	strd	r3, r3, [sp]
 80a0eee:	f7ff ff11 	bl	80a0d14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0ef2:	b007      	add	sp, #28
 80a0ef4:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ef8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0efc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80a0f00:	4604      	mov	r4, r0
 80a0f02:	468b      	mov	fp, r1
 80a0f04:	4616      	mov	r6, r2
 80a0f06:	461f      	mov	r7, r3
 80a0f08:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80a0f0c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 80a0f10:	f7ff fef1 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a0f14:	4682      	mov	sl, r0
 80a0f16:	2800      	cmp	r0, #0
 80a0f18:	d051      	beq.n	80a0fbe <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 80a0f1a:	4621      	mov	r1, r4
 80a0f1c:	a801      	add	r0, sp, #4
 80a0f1e:	f7ff fdbd 	bl	80a0a9c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 80a0f22:	2100      	movs	r1, #0
 80a0f24:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0f28:	69e0      	ldr	r0, [r4, #28]
 80a0f2a:	f002 fa31 	bl	80a3390 <memset>
        length = writeString(topic, buffer, length);
 80a0f2e:	2305      	movs	r3, #5
 80a0f30:	4659      	mov	r1, fp
 80a0f32:	4620      	mov	r0, r4
 80a0f34:	69e2      	ldr	r2, [r4, #28]
 80a0f36:	f7ff fec4 	bl	80a0cc2 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a0f3a:	1e6b      	subs	r3, r5, #1
 80a0f3c:	2b01      	cmp	r3, #1
 80a0f3e:	d815      	bhi.n	80a0f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 80a0f40:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0f42:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 80a0f44:	3101      	adds	r1, #1
 80a0f46:	b289      	uxth	r1, r1
 80a0f48:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0f4a:	1209      	asrs	r1, r1, #8
 80a0f4c:	5419      	strb	r1, [r3, r0]
 80a0f4e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0f50:	69e3      	ldr	r3, [r4, #28]
 80a0f52:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0f54:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 80a0f56:	3002      	adds	r0, #2
 80a0f58:	b280      	uxth	r0, r0
 80a0f5a:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 80a0f5c:	f1b8 0f00 	cmp.w	r8, #0
 80a0f60:	d004      	beq.n	80a0f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 80a0f62:	8c23      	ldrh	r3, [r4, #32]
 80a0f64:	1c5a      	adds	r2, r3, #1
 80a0f66:	8422      	strh	r2, [r4, #32]
 80a0f68:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0f6c:	2100      	movs	r1, #0
 80a0f6e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0f70:	428f      	cmp	r7, r1
 80a0f72:	69e2      	ldr	r2, [r4, #28]
 80a0f74:	b29b      	uxth	r3, r3
 80a0f76:	d90a      	bls.n	80a0f8e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 80a0f78:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a0f7c:	459c      	cmp	ip, r3
 80a0f7e:	d906      	bls.n	80a0f8e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 80a0f80:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0f84:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a0f86:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0f8a:	b289      	uxth	r1, r1
 80a0f8c:	e7ef      	b.n	80a0f6e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 80a0f8e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a0f92:	2900      	cmp	r1, #0
 80a0f94:	bf0c      	ite	eq
 80a0f96:	2130      	moveq	r1, #48	; 0x30
 80a0f98:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a0f9a:	f1b9 0f00 	cmp.w	r9, #0
 80a0f9e:	d001      	beq.n	80a0fa4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 80a0fa0:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a0fa4:	2d02      	cmp	r5, #2
 80a0fa6:	d10e      	bne.n	80a0fc6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 80a0fa8:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a0fac:	3b05      	subs	r3, #5
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	b29b      	uxth	r3, r3
 80a0fb2:	f7ff fe49 	bl	80a0c48 <_ZN4MQTT5writeEhPht>
 80a0fb6:	4682      	mov	sl, r0
        MutexLocker lock(this);
 80a0fb8:	a801      	add	r0, sp, #4
 80a0fba:	f7ff fd7a 	bl	80a0ab2 <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0fbe:	4650      	mov	r0, sl
 80a0fc0:	b003      	add	sp, #12
 80a0fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 80a0fc6:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0fc8:	bf08      	it	eq
 80a0fca:	f041 0102 	orreq.w	r1, r1, #2
 80a0fce:	e7ed      	b.n	80a0fac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

080a0fd0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0fd2:	9c08      	ldr	r4, [sp, #32]
 80a0fd4:	9403      	str	r4, [sp, #12]
 80a0fd6:	2400      	movs	r4, #0
 80a0fd8:	9402      	str	r4, [sp, #8]
 80a0fda:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0fde:	9401      	str	r4, [sp, #4]
 80a0fe0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0fe4:	9400      	str	r4, [sp, #0]
 80a0fe6:	f7ff ff87 	bl	80a0ef8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0fea:	b004      	add	sp, #16
 80a0fec:	bd10      	pop	{r4, pc}

080a0fee <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a0fee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0ff0:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0ff2:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a0ff4:	4614      	mov	r4, r2
 80a0ff6:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0ff8:	f002 fa08 	bl	80a340c <strlen>
 80a0ffc:	2200      	movs	r2, #0
 80a0ffe:	4603      	mov	r3, r0
 80a1000:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1004:	9200      	str	r2, [sp, #0]
 80a1006:	4631      	mov	r1, r6
 80a1008:	4622      	mov	r2, r4
 80a100a:	4628      	mov	r0, r5
 80a100c:	f7ff ffe0 	bl	80a0fd0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a1010:	b004      	add	sp, #16
 80a1012:	bd70      	pop	{r4, r5, r6, pc}

080a1014 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a1014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1016:	4604      	mov	r4, r0
 80a1018:	460e      	mov	r6, r1
    if (isConnected()) {
 80a101a:	f7ff fe6c 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a101e:	4605      	mov	r5, r0
 80a1020:	b1c8      	cbz	r0, 80a1056 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 80a1022:	4621      	mov	r1, r4
 80a1024:	a801      	add	r0, sp, #4
 80a1026:	f7ff fd39 	bl	80a0a9c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a102a:	2262      	movs	r2, #98	; 0x62
 80a102c:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a102e:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a1030:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1032:	2202      	movs	r2, #2
 80a1034:	69e3      	ldr	r3, [r4, #28]
 80a1036:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1038:	69e3      	ldr	r3, [r4, #28]
 80a103a:	1232      	asrs	r2, r6, #8
 80a103c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a103e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1040:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a1042:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a1044:	69e1      	ldr	r1, [r4, #28]
 80a1046:	f000 fe64 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
 80a104a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a104c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a104e:	bf18      	it	ne
 80a1050:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a1052:	f7ff fd2e 	bl	80a0ab2 <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1056:	4628      	mov	r0, r5
 80a1058:	b002      	add	sp, #8
 80a105a:	bd70      	pop	{r4, r5, r6, pc}

080a105c <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a105c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a105e:	4604      	mov	r4, r0
 80a1060:	460e      	mov	r6, r1
    if (isConnected()) {
 80a1062:	f7ff fe48 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a1066:	4605      	mov	r5, r0
 80a1068:	b1c8      	cbz	r0, 80a109e <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 80a106a:	4621      	mov	r1, r4
 80a106c:	a801      	add	r0, sp, #4
 80a106e:	f7ff fd15 	bl	80a0a9c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1072:	2272      	movs	r2, #114	; 0x72
 80a1074:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1076:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1078:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a107a:	2202      	movs	r2, #2
 80a107c:	69e3      	ldr	r3, [r4, #28]
 80a107e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1080:	69e3      	ldr	r3, [r4, #28]
 80a1082:	1232      	asrs	r2, r6, #8
 80a1084:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a1086:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1088:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a108a:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a108c:	69e1      	ldr	r1, [r4, #28]
 80a108e:	f000 fe40 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
 80a1092:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a1094:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a1096:	bf18      	it	ne
 80a1098:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a109a:	f7ff fd0a 	bl	80a0ab2 <_ZN4MQTT11MutexLockerD1Ev>
}
 80a109e:	4628      	mov	r0, r5
 80a10a0:	b002      	add	sp, #8
 80a10a2:	bd70      	pop	{r4, r5, r6, pc}

080a10a4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a10a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a10a8:	b087      	sub	sp, #28
 80a10aa:	af00      	add	r7, sp, #0
 80a10ac:	4604      	mov	r4, r0
    if (isConnected()) {
 80a10ae:	f7ff fe22 	bl	80a0cf6 <_ZN4MQTT11isConnectedEv>
 80a10b2:	4681      	mov	r9, r0
 80a10b4:	b1f8      	cbz	r0, 80a10f6 <_ZN4MQTT4loopEv+0x52>
        MutexLocker lock(this);
 80a10b6:	4621      	mov	r1, r4
 80a10b8:	f107 0014 	add.w	r0, r7, #20
 80a10bc:	f7ff fcee 	bl	80a0a9c <_ZN4MQTT11MutexLockerC1EPS_>
 80a10c0:	f000 f932 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a10c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a10ca:	4606      	mov	r6, r0
 80a10cc:	4353      	muls	r3, r2
 80a10ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a10d0:	1a82      	subs	r2, r0, r2
 80a10d2:	429a      	cmp	r2, r3
 80a10d4:	d803      	bhi.n	80a10de <_ZN4MQTT4loopEv+0x3a>
 80a10d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a10d8:	1a82      	subs	r2, r0, r2
 80a10da:	4293      	cmp	r3, r2
 80a10dc:	d21f      	bcs.n	80a111e <_ZN4MQTT4loopEv+0x7a>
            if (pingOutstanding) {
 80a10de:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a10e2:	b16b      	cbz	r3, 80a1100 <_ZN4MQTT4loopEv+0x5c>
                _client.stop();
 80a10e4:	4620      	mov	r0, r4
 80a10e6:	f000 ff89 	bl	80a1ffc <_ZN9TCPClient4stopEv>
                return false;
 80a10ea:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 80a10ee:	f107 0014 	add.w	r0, r7, #20
 80a10f2:	f7ff fcde 	bl	80a0ab2 <_ZN4MQTT11MutexLockerD1Ev>
}
 80a10f6:	4648      	mov	r0, r9
 80a10f8:	371c      	adds	r7, #28
 80a10fa:	46bd      	mov	sp, r7
 80a10fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a1100:	21c0      	movs	r1, #192	; 0xc0
 80a1102:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a1104:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a1106:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1108:	69e2      	ldr	r2, [r4, #28]
 80a110a:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a110c:	69e1      	ldr	r1, [r4, #28]
 80a110e:	2202      	movs	r2, #2
 80a1110:	f000 fdff 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a1114:	2301      	movs	r3, #1
                lastInActivity = t;
 80a1116:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a111a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a111e:	4620      	mov	r0, r4
 80a1120:	f000 ff32 	bl	80a1f88 <_ZN9TCPClient9availableEv>
 80a1124:	2800      	cmp	r0, #0
 80a1126:	d0e2      	beq.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
 80a1128:	4620      	mov	r0, r4
 80a112a:	f107 0113 	add.w	r1, r7, #19
 80a112e:	f7ff fd2b 	bl	80a0b88 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a1132:	4683      	mov	fp, r0
 80a1134:	2800      	cmp	r0, #0
 80a1136:	d0da      	beq.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
 80a1138:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a113a:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a113c:	7819      	ldrb	r1, [r3, #0]
 80a113e:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a1142:	2a30      	cmp	r2, #48	; 0x30
 80a1144:	d17d      	bne.n	80a1242 <_ZN4MQTT4loopEv+0x19e>
                    if (callback) {
 80a1146:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a114a:	f1ba 0f00 	cmp.w	sl, #0
 80a114e:	d0ce      	beq.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1150:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 80a1154:	f8c7 d004 	str.w	sp, [r7, #4]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1158:	eb03 020c 	add.w	r2, r3, ip
 80a115c:	7855      	ldrb	r5, [r2, #1]
 80a115e:	7891      	ldrb	r1, [r2, #2]
 80a1160:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a1164:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a1166:	4669      	mov	r1, sp
 80a1168:	f105 0208 	add.w	r2, r5, #8
 80a116c:	08d2      	lsrs	r2, r2, #3
 80a116e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a1172:	4695      	mov	sp, r2
 80a1174:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a1176:	f10c 0203 	add.w	r2, ip, #3
 80a117a:	60fa      	str	r2, [r7, #12]
 80a117c:	eb03 0e02 	add.w	lr, r3, r2
 80a1180:	eb0d 0205 	add.w	r2, sp, r5
 80a1184:	f8c7 d008 	str.w	sp, [r7, #8]
 80a1188:	603a      	str	r2, [r7, #0]
 80a118a:	683a      	ldr	r2, [r7, #0]
 80a118c:	68b9      	ldr	r1, [r7, #8]
 80a118e:	428a      	cmp	r2, r1
 80a1190:	d006      	beq.n	80a11a0 <_ZN4MQTT4loopEv+0xfc>
                            topic[i] = buffer[llen+3+i];
 80a1192:	460a      	mov	r2, r1
 80a1194:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a1198:	f802 8b01 	strb.w	r8, [r2], #1
 80a119c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a119e:	e7f4      	b.n	80a118a <_ZN4MQTT4loopEv+0xe6>
                        topic[tl] = 0;
 80a11a0:	2200      	movs	r2, #0
 80a11a2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a11a4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a11a8:	68f9      	ldr	r1, [r7, #12]
 80a11aa:	f008 0806 	and.w	r8, r8, #6
 80a11ae:	ebab 020c 	sub.w	r2, fp, ip
 80a11b2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a11b4:	f1b8 0f02 	cmp.w	r8, #2
 80a11b8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a11bc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a11be:	d124      	bne.n	80a120a <_ZN4MQTT4loopEv+0x166>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a11c0:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a11c4:	4419      	add	r1, r3
 80a11c6:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a11ca:	f10c 0105 	add.w	r1, ip, #5
 80a11ce:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a11d0:	3a02      	subs	r2, #2
 80a11d2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a11d4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a11d8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a11da:	2240      	movs	r2, #64	; 0x40
 80a11dc:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a11de:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a11e2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a11e4:	69e3      	ldr	r3, [r4, #28]
 80a11e6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a11ea:	69e3      	ldr	r3, [r4, #28]
 80a11ec:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a11f0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a11f2:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a11f4:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a11f6:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a11fa:	4620      	mov	r0, r4
 80a11fc:	69e1      	ldr	r1, [r4, #28]
 80a11fe:	f000 fd88 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a1202:	6266      	str	r6, [r4, #36]	; 0x24
 80a1204:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80a1208:	e771      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a120a:	f1b8 0f04 	cmp.w	r8, #4
 80a120e:	d115      	bne.n	80a123c <_ZN4MQTT4loopEv+0x198>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1210:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a1214:	4419      	add	r1, r3
 80a1216:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 80a121a:	f10c 0105 	add.w	r1, ip, #5
 80a121e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a1220:	3a02      	subs	r2, #2
 80a1222:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1224:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a1228:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a122a:	2250      	movs	r2, #80	; 0x50
 80a122c:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a122e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1232:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 80a1234:	2202      	movs	r2, #2
 80a1236:	69e3      	ldr	r3, [r4, #28]
 80a1238:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 80a123a:	e7d6      	b.n	80a11ea <_ZN4MQTT4loopEv+0x146>
                            callback(topic,payload,len-llen-3-tl);
 80a123c:	4419      	add	r1, r3
 80a123e:	47d0      	blx	sl
 80a1240:	e7e0      	b.n	80a1204 <_ZN4MQTT4loopEv+0x160>
                } else if (type == MQTTPUBREC) {
 80a1242:	2a50      	cmp	r2, #80	; 0x50
 80a1244:	d108      	bne.n	80a1258 <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a1246:	789a      	ldrb	r2, [r3, #2]
 80a1248:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a124a:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a124c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a1250:	b289      	uxth	r1, r1
 80a1252:	f7ff fedf 	bl	80a1014 <_ZN4MQTT14publishReleaseEt>
 80a1256:	e74a      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBACK) {
 80a1258:	2a40      	cmp	r2, #64	; 0x40
 80a125a:	d112      	bne.n	80a1282 <_ZN4MQTT4loopEv+0x1de>
                if (qoscallback) {
 80a125c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a125e:	2a00      	cmp	r2, #0
 80a1260:	f43f af45 	beq.w	80a10ee <_ZN4MQTT4loopEv+0x4a>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a1264:	f1bb 0f04 	cmp.w	fp, #4
 80a1268:	f47f af41 	bne.w	80a10ee <_ZN4MQTT4loopEv+0x4a>
 80a126c:	f011 0f06 	tst.w	r1, #6
 80a1270:	f47f af3d 	bne.w	80a10ee <_ZN4MQTT4loopEv+0x4a>
                        msgId = (buffer[2]<<8)+buffer[3];
 80a1274:	7899      	ldrb	r1, [r3, #2]
 80a1276:	78d8      	ldrb	r0, [r3, #3]
 80a1278:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 80a127c:	b280      	uxth	r0, r0
 80a127e:	4790      	blx	r2
 80a1280:	e735      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBREL) {
 80a1282:	2a60      	cmp	r2, #96	; 0x60
 80a1284:	d108      	bne.n	80a1298 <_ZN4MQTT4loopEv+0x1f4>
                msgId = (buffer[2] << 8) + buffer[3];
 80a1286:	789a      	ldrb	r2, [r3, #2]
 80a1288:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 80a128a:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 80a128c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 80a1290:	b289      	uxth	r1, r1
 80a1292:	f7ff fee3 	bl	80a105c <_ZN4MQTT15publishCompleteEt>
 80a1296:	e72a      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBCOMP) {
 80a1298:	2a70      	cmp	r2, #112	; 0x70
 80a129a:	d0df      	beq.n	80a125c <_ZN4MQTT4loopEv+0x1b8>
                } else if (type == MQTTSUBACK) {
 80a129c:	2a90      	cmp	r2, #144	; 0x90
 80a129e:	f43f af26 	beq.w	80a10ee <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGREQ) {
 80a12a2:	2ac0      	cmp	r2, #192	; 0xc0
 80a12a4:	d10a      	bne.n	80a12bc <_ZN4MQTT4loopEv+0x218>
                    buffer[0] = MQTTPINGRESP;
 80a12a6:	22d0      	movs	r2, #208	; 0xd0
 80a12a8:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a12aa:	2200      	movs	r2, #0
 80a12ac:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a12ae:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a12b0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a12b2:	69e1      	ldr	r1, [r4, #28]
 80a12b4:	2202      	movs	r2, #2
 80a12b6:	f000 fd2c 	bl	80a1d12 <_ZN9TCPClient5writeEPKhj>
 80a12ba:	e718      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
 80a12bc:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a12be:	bf04      	itt	eq
 80a12c0:	2300      	moveq	r3, #0
 80a12c2:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a12c6:	e712      	b.n	80a10ee <_ZN4MQTT4loopEv+0x4a>

080a12c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <os_mutex_create+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601d0 	.word	0x080601d0

080a12d8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <os_mutex_lock+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601d0 	.word	0x080601d0

080a12e8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <os_mutex_unlock+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080601d0 	.word	0x080601d0

080a12f8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <os_mutex_recursive_create+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601d0 	.word	0x080601d0

080a1308 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <os_mutex_recursive_destroy+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601d0 	.word	0x080601d0

080a1318 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <HAL_RNG_GetRandomNumber+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	685b      	ldr	r3, [r3, #4]
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	0806019c 	.word	0x0806019c

080a1328 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	695b      	ldr	r3, [r3, #20]
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	0806019c 	.word	0x0806019c

080a1338 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <hal_rtc_time_is_valid+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	0806019c 	.word	0x0806019c

080a1348 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <hal_rtc_get_time+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	0806019c 	.word	0x0806019c

080a1358 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <HAL_Pin_Mode+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	689b      	ldr	r3, [r3, #8]
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601b0 	.word	0x080601b0

080a1368 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <HAL_Get_Pin_Mode+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	68db      	ldr	r3, [r3, #12]
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601b0 	.word	0x080601b0

080a1378 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <HAL_GPIO_Write+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	691b      	ldr	r3, [r3, #16]
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601b0 	.word	0x080601b0

080a1388 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <hal_i2c_begin+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601ac 	.word	0x080601ac

080a1398 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <hal_i2c_begin_transmission+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601ac 	.word	0x080601ac

080a13a8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <hal_i2c_end_transmission+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601ac 	.word	0x080601ac

080a13b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <hal_i2c_write+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601ac 	.word	0x080601ac

080a13c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <hal_i2c_available+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601ac 	.word	0x080601ac

080a13d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b02      	ldr	r3, [pc, #8]	; (80a13e4 <hal_i2c_read+0xc>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a13e0:	9301      	str	r3, [sp, #4]
 80a13e2:	bd08      	pop	{r3, pc}
 80a13e4:	080601ac 	.word	0x080601ac

080a13e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a13e8:	b508      	push	{r3, lr}
 80a13ea:	4b02      	ldr	r3, [pc, #8]	; (80a13f4 <hal_i2c_peek+0xc>)
 80a13ec:	681b      	ldr	r3, [r3, #0]
 80a13ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a13f0:	9301      	str	r3, [sp, #4]
 80a13f2:	bd08      	pop	{r3, pc}
 80a13f4:	080601ac 	.word	0x080601ac

080a13f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a13f8:	b508      	push	{r3, lr}
 80a13fa:	4b02      	ldr	r3, [pc, #8]	; (80a1404 <hal_i2c_flush+0xc>)
 80a13fc:	681b      	ldr	r3, [r3, #0]
 80a13fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1400:	9301      	str	r3, [sp, #4]
 80a1402:	bd08      	pop	{r3, pc}
 80a1404:	080601ac 	.word	0x080601ac

080a1408 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1408:	b508      	push	{r3, lr}
 80a140a:	4b02      	ldr	r3, [pc, #8]	; (80a1414 <hal_i2c_is_enabled+0xc>)
 80a140c:	681b      	ldr	r3, [r3, #0]
 80a140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1410:	9301      	str	r3, [sp, #4]
 80a1412:	bd08      	pop	{r3, pc}
 80a1414:	080601ac 	.word	0x080601ac

080a1418 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1418:	b508      	push	{r3, lr}
 80a141a:	4b03      	ldr	r3, [pc, #12]	; (80a1428 <hal_i2c_init+0x10>)
 80a141c:	681b      	ldr	r3, [r3, #0]
 80a141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1422:	9301      	str	r3, [sp, #4]
 80a1424:	bd08      	pop	{r3, pc}
 80a1426:	0000      	.short	0x0000
 80a1428:	080601ac 	.word	0x080601ac

080a142c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a142c:	b508      	push	{r3, lr}
 80a142e:	4b03      	ldr	r3, [pc, #12]	; (80a143c <hal_i2c_request_ex+0x10>)
 80a1430:	681b      	ldr	r3, [r3, #0]
 80a1432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1436:	9301      	str	r3, [sp, #4]
 80a1438:	bd08      	pop	{r3, pc}
 80a143a:	0000      	.short	0x0000
 80a143c:	080601ac 	.word	0x080601ac

080a1440 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <socket_active_status+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	681b      	ldr	r3, [r3, #0]
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601bc 	.word	0x080601bc

080a1450 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <socket_handle_valid+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	685b      	ldr	r3, [r3, #4]
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601bc 	.word	0x080601bc

080a1460 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <socket_create+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	689b      	ldr	r3, [r3, #8]
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601bc 	.word	0x080601bc

080a1470 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <socket_connect+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	68db      	ldr	r3, [r3, #12]
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601bc 	.word	0x080601bc

080a1480 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <socket_receive+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	691b      	ldr	r3, [r3, #16]
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601bc 	.word	0x080601bc

080a1490 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <socket_close+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	6a1b      	ldr	r3, [r3, #32]
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601bc 	.word	0x080601bc

080a14a0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <socket_handle_invalid+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601bc 	.word	0x080601bc

080a14b0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b02      	ldr	r3, [pc, #8]	; (80a14bc <socket_send_ex+0xc>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a14b8:	9301      	str	r3, [sp, #4]
 80a14ba:	bd08      	pop	{r3, pc}
 80a14bc:	080601bc 	.word	0x080601bc

080a14c0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <hal_spi_init+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	69db      	ldr	r3, [r3, #28]
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601b4 	.word	0x080601b4

080a14d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <hal_spi_is_enabled+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	6a1b      	ldr	r3, [r3, #32]
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601b4 	.word	0x080601b4

080a14e0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <hal_usart_init+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	699b      	ldr	r3, [r3, #24]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601c4 	.word	0x080601c4

080a14f0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <hal_usart_write+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601c4 	.word	0x080601c4

080a1500 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <hal_usart_available+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601c4 	.word	0x080601c4

080a1510 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <hal_usart_read+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601c4 	.word	0x080601c4

080a1520 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <hal_usart_peek+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601c4 	.word	0x080601c4

080a1530 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <hal_usart_flush+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601c4 	.word	0x080601c4

080a1540 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <hal_usart_is_enabled+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601c4 	.word	0x080601c4

080a1550 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <hal_usart_available_data_for_write+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601c4 	.word	0x080601c4

080a1560 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <HAL_USB_USART_Init+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	681b      	ldr	r3, [r3, #0]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601d8 	.word	0x080601d8

080a1570 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <HAL_USB_USART_Begin+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	685b      	ldr	r3, [r3, #4]
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601d8 	.word	0x080601d8

080a1580 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <HAL_USB_USART_Available_Data+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	691b      	ldr	r3, [r3, #16]
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080601d8 	.word	0x080601d8

080a1590 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	695b      	ldr	r3, [r3, #20]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601d8 	.word	0x080601d8

080a15a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <HAL_USB_USART_Receive_Data+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	699b      	ldr	r3, [r3, #24]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601d8 	.word	0x080601d8

080a15b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <HAL_USB_USART_Send_Data+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	69db      	ldr	r3, [r3, #28]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601d8 	.word	0x080601d8

080a15c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <HAL_USB_USART_Flush_Data+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	6a1b      	ldr	r3, [r3, #32]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601d8 	.word	0x080601d8

080a15d0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <HAL_USB_USART_Is_Enabled+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601d8 	.word	0x080601d8

080a15e0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <HAL_NET_SetNetWatchDog+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601c0 	.word	0x080601c0

080a15f0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <inet_gethostbyname+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601c0 	.word	0x080601c0

080a1600 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <log_message+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080201a8 	.word	0x080201a8

080a1610 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <system_mode+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	681b      	ldr	r3, [r3, #0]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601a4 	.word	0x080601a4

080a1620 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <set_system_mode+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	685b      	ldr	r3, [r3, #4]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601a4 	.word	0x080601a4

080a1630 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <system_delay_ms+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	695b      	ldr	r3, [r3, #20]
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601a4 	.word	0x080601a4

080a1640 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <system_thread_get_state+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601a4 	.word	0x080601a4

080a1650 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b03      	ldr	r3, [pc, #12]	; (80a1660 <system_ctrl_set_app_request_handler+0x10>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a165a:	9301      	str	r3, [sp, #4]
 80a165c:	bd08      	pop	{r3, pc}
 80a165e:	0000      	.short	0x0000
 80a1660:	080601a4 	.word	0x080601a4

080a1664 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b03      	ldr	r3, [pc, #12]	; (80a1674 <system_ctrl_set_result+0x10>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a166e:	9301      	str	r3, [sp, #4]
 80a1670:	bd08      	pop	{r3, pc}
 80a1672:	0000      	.short	0x0000
 80a1674:	080601a4 	.word	0x080601a4

080a1678 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <spark_process+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	689b      	ldr	r3, [r3, #8]
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601cc 	.word	0x080601cc

080a1688 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <spark_cloud_flag_connected+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	695b      	ldr	r3, [r3, #20]
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601cc 	.word	0x080601cc

080a1698 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <spark_sync_time_pending+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601cc 	.word	0x080601cc

080a16a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601cc 	.word	0x080601cc

080a16b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <network_connect+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	685b      	ldr	r3, [r3, #4]
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601c8 	.word	0x080601c8

080a16c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <network_connecting+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	689b      	ldr	r3, [r3, #8]
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601c8 	.word	0x080601c8

080a16d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <network_disconnect+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	68db      	ldr	r3, [r3, #12]
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601c8 	.word	0x080601c8

080a16e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <network_ready+0xc>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	691b      	ldr	r3, [r3, #16]
 80a16f0:	9301      	str	r3, [sp, #4]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	080601c8 	.word	0x080601c8

080a16f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a16f8:	b508      	push	{r3, lr}
 80a16fa:	4b02      	ldr	r3, [pc, #8]	; (80a1704 <network_on+0xc>)
 80a16fc:	681b      	ldr	r3, [r3, #0]
 80a16fe:	695b      	ldr	r3, [r3, #20]
 80a1700:	9301      	str	r3, [sp, #4]
 80a1702:	bd08      	pop	{r3, pc}
 80a1704:	080601c8 	.word	0x080601c8

080a1708 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1708:	b508      	push	{r3, lr}
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <network_off+0xc>)
 80a170c:	681b      	ldr	r3, [r3, #0]
 80a170e:	699b      	ldr	r3, [r3, #24]
 80a1710:	9301      	str	r3, [sp, #4]
 80a1712:	bd08      	pop	{r3, pc}
 80a1714:	080601c8 	.word	0x080601c8

080a1718 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1718:	b508      	push	{r3, lr}
 80a171a:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <network_listen+0xc>)
 80a171c:	681b      	ldr	r3, [r3, #0]
 80a171e:	69db      	ldr	r3, [r3, #28]
 80a1720:	9301      	str	r3, [sp, #4]
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	080601c8 	.word	0x080601c8

080a1728 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <network_listening+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	6a1b      	ldr	r3, [r3, #32]
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601c8 	.word	0x080601c8

080a1738 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1738:	b508      	push	{r3, lr}
 80a173a:	4b02      	ldr	r3, [pc, #8]	; (80a1744 <network_set_listen_timeout+0xc>)
 80a173c:	681b      	ldr	r3, [r3, #0]
 80a173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1740:	9301      	str	r3, [sp, #4]
 80a1742:	bd08      	pop	{r3, pc}
 80a1744:	080601c8 	.word	0x080601c8

080a1748 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1748:	b508      	push	{r3, lr}
 80a174a:	4b02      	ldr	r3, [pc, #8]	; (80a1754 <network_get_listen_timeout+0xc>)
 80a174c:	681b      	ldr	r3, [r3, #0]
 80a174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1750:	9301      	str	r3, [sp, #4]
 80a1752:	bd08      	pop	{r3, pc}
 80a1754:	080601c8 	.word	0x080601c8

080a1758 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1758:	b508      	push	{r3, lr}
 80a175a:	4b02      	ldr	r3, [pc, #8]	; (80a1764 <network_is_on+0xc>)
 80a175c:	681b      	ldr	r3, [r3, #0]
 80a175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1760:	9301      	str	r3, [sp, #4]
 80a1762:	bd08      	pop	{r3, pc}
 80a1764:	080601c8 	.word	0x080601c8

080a1768 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1768:	b508      	push	{r3, lr}
 80a176a:	4b02      	ldr	r3, [pc, #8]	; (80a1774 <network_is_off+0xc>)
 80a176c:	681b      	ldr	r3, [r3, #0]
 80a176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1770:	9301      	str	r3, [sp, #4]
 80a1772:	bd08      	pop	{r3, pc}
 80a1774:	080601c8 	.word	0x080601c8

080a1778 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1778:	b508      	push	{r3, lr}
 80a177a:	4b02      	ldr	r3, [pc, #8]	; (80a1784 <malloc+0xc>)
 80a177c:	681b      	ldr	r3, [r3, #0]
 80a177e:	681b      	ldr	r3, [r3, #0]
 80a1780:	9301      	str	r3, [sp, #4]
 80a1782:	bd08      	pop	{r3, pc}
 80a1784:	080601a0 	.word	0x080601a0

080a1788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1788:	b508      	push	{r3, lr}
 80a178a:	4b02      	ldr	r3, [pc, #8]	; (80a1794 <free+0xc>)
 80a178c:	681b      	ldr	r3, [r3, #0]
 80a178e:	685b      	ldr	r3, [r3, #4]
 80a1790:	9301      	str	r3, [sp, #4]
 80a1792:	bd08      	pop	{r3, pc}
 80a1794:	080601a0 	.word	0x080601a0

080a1798 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1798:	b508      	push	{r3, lr}
 80a179a:	4b02      	ldr	r3, [pc, #8]	; (80a17a4 <realloc+0xc>)
 80a179c:	681b      	ldr	r3, [r3, #0]
 80a179e:	689b      	ldr	r3, [r3, #8]
 80a17a0:	9301      	str	r3, [sp, #4]
 80a17a2:	bd08      	pop	{r3, pc}
 80a17a4:	080601a0 	.word	0x080601a0

080a17a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a17a8:	b508      	push	{r3, lr}
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <newlib_impure_ptr_callback+0xc>)
 80a17ac:	681b      	ldr	r3, [r3, #0]
 80a17ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a17b0:	9301      	str	r3, [sp, #4]
 80a17b2:	bd08      	pop	{r3, pc}
 80a17b4:	080601a0 	.word	0x080601a0

080a17b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a17b8:	2100      	movs	r1, #0
 80a17ba:	f7ff bf39 	b.w	80a1630 <system_delay_ms>

080a17be <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a17be:	4770      	bx	lr

080a17c0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a17c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17c2:	4606      	mov	r6, r0
 80a17c4:	4615      	mov	r5, r2
 80a17c6:	460c      	mov	r4, r1
 80a17c8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a17ca:	42bc      	cmp	r4, r7
 80a17cc:	d006      	beq.n	80a17dc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a17ce:	6833      	ldr	r3, [r6, #0]
 80a17d0:	4630      	mov	r0, r6
 80a17d2:	689b      	ldr	r3, [r3, #8]
 80a17d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a17d8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a17da:	e7f6      	b.n	80a17ca <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a17dc:	4628      	mov	r0, r5
 80a17de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17e0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a17e0:	2200      	movs	r2, #0
 80a17e2:	7c00      	ldrb	r0, [r0, #16]
 80a17e4:	f7ff bde8 	b.w	80a13b8 <hal_i2c_write>

080a17e8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a17e8:	2100      	movs	r1, #0
 80a17ea:	7c00      	ldrb	r0, [r0, #16]
 80a17ec:	f7ff bdec 	b.w	80a13c8 <hal_i2c_available>

080a17f0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a17f0:	2100      	movs	r1, #0
 80a17f2:	7c00      	ldrb	r0, [r0, #16]
 80a17f4:	f7ff bdf0 	b.w	80a13d8 <hal_i2c_read>

080a17f8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a17f8:	2100      	movs	r1, #0
 80a17fa:	7c00      	ldrb	r0, [r0, #16]
 80a17fc:	f7ff bdf4 	b.w	80a13e8 <hal_i2c_peek>

080a1800 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1800:	2100      	movs	r1, #0
 80a1802:	7c00      	ldrb	r0, [r0, #16]
 80a1804:	f7ff bdf8 	b.w	80a13f8 <hal_i2c_flush>

080a1808 <_ZN7TwoWireD0Ev>:
 80a1808:	b510      	push	{r4, lr}
 80a180a:	4604      	mov	r4, r0
 80a180c:	2114      	movs	r1, #20
 80a180e:	f001 f891 	bl	80a2934 <_ZdlPvj>
 80a1812:	4620      	mov	r0, r4
 80a1814:	bd10      	pop	{r4, pc}
	...

080a1818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1818:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a181e:	4604      	mov	r4, r0
 80a1820:	4608      	mov	r0, r1
 80a1822:	2100      	movs	r1, #0
 80a1824:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1828:	4b03      	ldr	r3, [pc, #12]	; (80a1838 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a182a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a182c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a182e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1830:	f7ff fdf2 	bl	80a1418 <hal_i2c_init>
}
 80a1834:	4620      	mov	r0, r4
 80a1836:	bd10      	pop	{r4, pc}
 80a1838:	080a36cc 	.word	0x080a36cc

080a183c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a183c:	2300      	movs	r3, #0
 80a183e:	7c00      	ldrb	r0, [r0, #16]
 80a1840:	461a      	mov	r2, r3
 80a1842:	4619      	mov	r1, r3
 80a1844:	f7ff bda0 	b.w	80a1388 <hal_i2c_begin>

080a1848 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a184a:	2200      	movs	r2, #0
 80a184c:	2314      	movs	r3, #20
 80a184e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1852:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a1856:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1858:	7c00      	ldrb	r0, [r0, #16]
 80a185a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a185e:	684b      	ldr	r3, [r1, #4]
 80a1860:	9303      	str	r3, [sp, #12]
 80a1862:	68cb      	ldr	r3, [r1, #12]
 80a1864:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a1866:	7a0b      	ldrb	r3, [r1, #8]
 80a1868:	a901      	add	r1, sp, #4
 80a186a:	9305      	str	r3, [sp, #20]
 80a186c:	f7ff fdde 	bl	80a142c <hal_i2c_request_ex>
}
 80a1870:	b007      	add	sp, #28
 80a1872:	f85d fb04 	ldr.w	pc, [sp], #4

080a1876 <_ZN7TwoWire11requestFromEhjh>:
{
 80a1876:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1878:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a187a:	f88d 1000 	strb.w	r1, [sp]
 80a187e:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1882:	bf18      	it	ne
 80a1884:	2301      	movne	r3, #1
 80a1886:	9103      	str	r1, [sp, #12]
 80a1888:	4669      	mov	r1, sp
    size_ = size;
 80a188a:	9201      	str	r2, [sp, #4]
 80a188c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1890:	f7ff ffda 	bl	80a1848 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1894:	b005      	add	sp, #20
 80a1896:	f85d fb04 	ldr.w	pc, [sp], #4

080a189a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a189a:	2200      	movs	r2, #0
 80a189c:	7c00      	ldrb	r0, [r0, #16]
 80a189e:	f7ff bd7b 	b.w	80a1398 <hal_i2c_begin_transmission>

080a18a2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a18a2:	2200      	movs	r2, #0
 80a18a4:	7c00      	ldrb	r0, [r0, #16]
 80a18a6:	f7ff bd7f 	b.w	80a13a8 <hal_i2c_end_transmission>

080a18aa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a18aa:	2101      	movs	r1, #1
 80a18ac:	f7ff bff9 	b.w	80a18a2 <_ZN7TwoWire15endTransmissionEh>

080a18b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a18b0:	4770      	bx	lr

080a18b2 <_ZN9IPAddressD0Ev>:
 80a18b2:	b510      	push	{r4, lr}
 80a18b4:	4604      	mov	r4, r0
 80a18b6:	2118      	movs	r1, #24
 80a18b8:	f001 f83c 	bl	80a2934 <_ZdlPvj>
 80a18bc:	4620      	mov	r0, r4
 80a18be:	bd10      	pop	{r4, pc}

080a18c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a18c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18c2:	460e      	mov	r6, r1
 80a18c4:	2400      	movs	r4, #0
 80a18c6:	f100 0708 	add.w	r7, r0, #8
 80a18ca:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a18cc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a18d0:	220a      	movs	r2, #10
 80a18d2:	4630      	mov	r0, r6
 80a18d4:	f000 f927 	bl	80a1b26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a18d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a18da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a18dc:	d101      	bne.n	80a18e2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a18de:	4620      	mov	r0, r4
 80a18e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a18e2:	2c00      	cmp	r4, #0
 80a18e4:	d0f2      	beq.n	80a18cc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a18e6:	212e      	movs	r1, #46	; 0x2e
 80a18e8:	4630      	mov	r0, r6
 80a18ea:	f000 f901 	bl	80a1af0 <_ZN5Print5printEc>
 80a18ee:	4404      	add	r4, r0
 80a18f0:	e7ec      	b.n	80a18cc <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a18f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a18f4:	b510      	push	{r4, lr}
 80a18f6:	4604      	mov	r4, r0
 80a18f8:	4b04      	ldr	r3, [pc, #16]	; (80a190c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a18fa:	2211      	movs	r2, #17
 80a18fc:	2100      	movs	r1, #0
 80a18fe:	f840 3b04 	str.w	r3, [r0], #4
 80a1902:	f001 fd45 	bl	80a3390 <memset>
}
 80a1906:	4620      	mov	r0, r4
 80a1908:	bd10      	pop	{r4, pc}
 80a190a:	bf00      	nop
 80a190c:	080a36f4 	.word	0x080a36f4

080a1910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1910:	4603      	mov	r3, r0
 80a1912:	4a07      	ldr	r2, [pc, #28]	; (80a1930 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1914:	b510      	push	{r4, lr}
 80a1916:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a191a:	f101 0210 	add.w	r2, r1, #16
 80a191e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1922:	4291      	cmp	r1, r2
 80a1924:	f843 4b04 	str.w	r4, [r3], #4
 80a1928:	d1f9      	bne.n	80a191e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a192a:	780a      	ldrb	r2, [r1, #0]
 80a192c:	701a      	strb	r2, [r3, #0]
}
 80a192e:	bd10      	pop	{r4, pc}
 80a1930:	080a36f4 	.word	0x080a36f4

080a1934 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1934:	4a02      	ldr	r2, [pc, #8]	; (80a1940 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1936:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a193a:	2204      	movs	r2, #4
 80a193c:	7502      	strb	r2, [r0, #20]
}
 80a193e:	4770      	bx	lr
 80a1940:	080a36f4 	.word	0x080a36f4

080a1944 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1944:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1946:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a194a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a194e:	2304      	movs	r3, #4
 80a1950:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1954:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1958:	6044      	str	r4, [r0, #4]
 80a195a:	7503      	strb	r3, [r0, #20]
}
 80a195c:	bd10      	pop	{r4, pc}
	...

080a1960 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1962:	4d04      	ldr	r5, [pc, #16]	; (80a1974 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1964:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1966:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a196a:	9500      	str	r5, [sp, #0]
 80a196c:	f7ff ffea 	bl	80a1944 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1970:	b003      	add	sp, #12
 80a1972:	bd30      	pop	{r4, r5, pc}
 80a1974:	080a36f4 	.word	0x080a36f4

080a1978 <_ZN9IPAddressaSEPKh>:
{
 80a1978:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a197a:	78cb      	ldrb	r3, [r1, #3]
 80a197c:	9300      	str	r3, [sp, #0]
 80a197e:	788b      	ldrb	r3, [r1, #2]
 80a1980:	784a      	ldrb	r2, [r1, #1]
 80a1982:	7809      	ldrb	r1, [r1, #0]
 80a1984:	f7ff ffde 	bl	80a1944 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1988:	b002      	add	sp, #8
 80a198a:	bd10      	pop	{r4, pc}

080a198c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a198c:	b510      	push	{r4, lr}
 80a198e:	4604      	mov	r4, r0
 80a1990:	4b02      	ldr	r3, [pc, #8]	; (80a199c <_ZN9IPAddressC1EPKh+0x10>)
 80a1992:	6003      	str	r3, [r0, #0]
    *this = address;
 80a1994:	f7ff fff0 	bl	80a1978 <_ZN9IPAddressaSEPKh>
}
 80a1998:	4620      	mov	r0, r4
 80a199a:	bd10      	pop	{r4, pc}
 80a199c:	080a36f4 	.word	0x080a36f4

080a19a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19a0:	4b01      	ldr	r3, [pc, #4]	; (80a19a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19a2:	4a02      	ldr	r2, [pc, #8]	; (80a19ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a19a6:	4770      	bx	lr
 80a19a8:	20000194 	.word	0x20000194
 80a19ac:	080a3700 	.word	0x080a3700

080a19b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a19b0:	2300      	movs	r3, #0
 80a19b2:	6840      	ldr	r0, [r0, #4]
 80a19b4:	461a      	mov	r2, r3
 80a19b6:	f7ff be7f 	b.w	80a16b8 <network_connect>

080a19ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a19ba:	2200      	movs	r2, #0
 80a19bc:	2102      	movs	r1, #2
 80a19be:	6840      	ldr	r0, [r0, #4]
 80a19c0:	f7ff be8a 	b.w	80a16d8 <network_disconnect>

080a19c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a19c4:	2200      	movs	r2, #0
 80a19c6:	6840      	ldr	r0, [r0, #4]
 80a19c8:	4611      	mov	r1, r2
 80a19ca:	f7ff be7d 	b.w	80a16c8 <network_connecting>

080a19ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a19ce:	2200      	movs	r2, #0
 80a19d0:	6840      	ldr	r0, [r0, #4]
 80a19d2:	4611      	mov	r1, r2
 80a19d4:	f7ff be88 	b.w	80a16e8 <network_ready>

080a19d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a19d8:	2300      	movs	r3, #0
 80a19da:	6840      	ldr	r0, [r0, #4]
 80a19dc:	461a      	mov	r2, r3
 80a19de:	4619      	mov	r1, r3
 80a19e0:	f7ff be8a 	b.w	80a16f8 <network_on>

080a19e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a19e4:	2300      	movs	r3, #0
 80a19e6:	6840      	ldr	r0, [r0, #4]
 80a19e8:	461a      	mov	r2, r3
 80a19ea:	4619      	mov	r1, r3
 80a19ec:	f7ff be8c 	b.w	80a1708 <network_off>

080a19f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a19f0:	2100      	movs	r1, #0
 80a19f2:	6840      	ldr	r0, [r0, #4]
 80a19f4:	f7ff beb0 	b.w	80a1758 <network_is_on>

080a19f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a19f8:	2100      	movs	r1, #0
 80a19fa:	6840      	ldr	r0, [r0, #4]
 80a19fc:	f7ff beb4 	b.w	80a1768 <network_is_off>

080a1a00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1a00:	2200      	movs	r2, #0
 80a1a02:	6840      	ldr	r0, [r0, #4]
 80a1a04:	f081 0101 	eor.w	r1, r1, #1
 80a1a08:	f7ff be86 	b.w	80a1718 <network_listen>

080a1a0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a0c:	2200      	movs	r2, #0
 80a1a0e:	6840      	ldr	r0, [r0, #4]
 80a1a10:	f7ff be92 	b.w	80a1738 <network_set_listen_timeout>

080a1a14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a14:	2200      	movs	r2, #0
 80a1a16:	6840      	ldr	r0, [r0, #4]
 80a1a18:	4611      	mov	r1, r2
 80a1a1a:	f7ff be95 	b.w	80a1748 <network_get_listen_timeout>

080a1a1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a1e:	2200      	movs	r2, #0
 80a1a20:	6840      	ldr	r0, [r0, #4]
 80a1a22:	4611      	mov	r1, r2
 80a1a24:	f7ff be80 	b.w	80a1728 <network_listening>

080a1a28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a28:	b570      	push	{r4, r5, r6, lr}
 80a1a2a:	4615      	mov	r5, r2
 80a1a2c:	b08e      	sub	sp, #56	; 0x38
 80a1a2e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1a30:	a808      	add	r0, sp, #32
 80a1a32:	f7ff ff5f 	bl	80a18f4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1a36:	2211      	movs	r2, #17
 80a1a38:	2100      	movs	r1, #0
 80a1a3a:	a803      	add	r0, sp, #12
 80a1a3c:	f001 fca8 	bl	80a3390 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1a40:	2600      	movs	r6, #0
 80a1a42:	4628      	mov	r0, r5
 80a1a44:	f001 fce2 	bl	80a340c <strlen>
 80a1a48:	4b0a      	ldr	r3, [pc, #40]	; (80a1a74 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1a4a:	9600      	str	r6, [sp, #0]
 80a1a4c:	b281      	uxth	r1, r0
 80a1a4e:	685b      	ldr	r3, [r3, #4]
 80a1a50:	4628      	mov	r0, r5
 80a1a52:	aa03      	add	r2, sp, #12
 80a1a54:	f7ff fdcc 	bl	80a15f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a58:	b130      	cbz	r0, 80a1a68 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1a5a:	4631      	mov	r1, r6
 80a1a5c:	4620      	mov	r0, r4
 80a1a5e:	f7ff ff69 	bl	80a1934 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	b00e      	add	sp, #56	; 0x38
 80a1a66:	bd70      	pop	{r4, r5, r6, pc}
 80a1a68:	4620      	mov	r0, r4
 80a1a6a:	a903      	add	r1, sp, #12
 80a1a6c:	f7ff ff50 	bl	80a1910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1a70:	e7f7      	b.n	80a1a62 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1a72:	bf00      	nop
 80a1a74:	20000618 	.word	0x20000618

080a1a78 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1a78:	4a03      	ldr	r2, [pc, #12]	; (80a1a88 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1a7a:	4b04      	ldr	r3, [pc, #16]	; (80a1a8c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1a7c:	2804      	cmp	r0, #4
 80a1a7e:	bf14      	ite	ne
 80a1a80:	4610      	movne	r0, r2
 80a1a82:	4618      	moveq	r0, r3
 80a1a84:	4770      	bx	lr
 80a1a86:	bf00      	nop
 80a1a88:	20000198 	.word	0x20000198
 80a1a8c:	20000618 	.word	0x20000618

080a1a90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a90:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1a92:	4a03      	ldr	r2, [pc, #12]	; (80a1aa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1a94:	601a      	str	r2, [r3, #0]
 80a1a96:	2200      	movs	r2, #0
 80a1a98:	605a      	str	r2, [r3, #4]

} // spark
 80a1a9a:	4770      	bx	lr
 80a1a9c:	20000198 	.word	0x20000198
 80a1aa0:	080a370c 	.word	0x080a370c

080a1aa4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1aa6:	4606      	mov	r6, r0
 80a1aa8:	460d      	mov	r5, r1
  size_t n = 0;
 80a1aaa:	2400      	movs	r4, #0
 80a1aac:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1aae:	42bd      	cmp	r5, r7
 80a1ab0:	d00c      	beq.n	80a1acc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1ab2:	6833      	ldr	r3, [r6, #0]
 80a1ab4:	4630      	mov	r0, r6
 80a1ab6:	689b      	ldr	r3, [r3, #8]
 80a1ab8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1abc:	4798      	blx	r3
     if (chunk>=0)
 80a1abe:	1e03      	subs	r3, r0, #0
 80a1ac0:	db01      	blt.n	80a1ac6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1ac2:	441c      	add	r4, r3
  while (size--) {
 80a1ac4:	e7f3      	b.n	80a1aae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1ac6:	2c00      	cmp	r4, #0
 80a1ac8:	bf08      	it	eq
 80a1aca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ad0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1ad0:	b570      	push	{r4, r5, r6, lr}
 80a1ad2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1ad4:	460c      	mov	r4, r1
    }
 80a1ad6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1ad8:	b149      	cbz	r1, 80a1aee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1ada:	f001 fc97 	bl	80a340c <strlen>
 80a1ade:	682b      	ldr	r3, [r5, #0]
 80a1ae0:	4602      	mov	r2, r0
 80a1ae2:	4621      	mov	r1, r4
 80a1ae4:	4628      	mov	r0, r5
    }
 80a1ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1aea:	68db      	ldr	r3, [r3, #12]
 80a1aec:	4718      	bx	r3
    }
 80a1aee:	bd70      	pop	{r4, r5, r6, pc}

080a1af0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1af0:	6803      	ldr	r3, [r0, #0]
 80a1af2:	689b      	ldr	r3, [r3, #8]
 80a1af4:	4718      	bx	r3

080a1af6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1af6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1af8:	210d      	movs	r1, #13
{
 80a1afa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1afc:	f7ff fff8 	bl	80a1af0 <_ZN5Print5printEc>
  n += print('\n');
 80a1b00:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1b02:	4604      	mov	r4, r0
  n += print('\n');
 80a1b04:	4628      	mov	r0, r5
 80a1b06:	f7ff fff3 	bl	80a1af0 <_ZN5Print5printEc>
  return n;
}
 80a1b0a:	4420      	add	r0, r4
 80a1b0c:	bd38      	pop	{r3, r4, r5, pc}

080a1b0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1b0e:	b538      	push	{r3, r4, r5, lr}
 80a1b10:	4605      	mov	r5, r0
  return write(str);
 80a1b12:	f7ff ffdd 	bl	80a1ad0 <_ZN5Print5writeEPKc>
 80a1b16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1b18:	4628      	mov	r0, r5
 80a1b1a:	f7ff ffec 	bl	80a1af6 <_ZN5Print7printlnEv>
  return n;
}
 80a1b1e:	4420      	add	r0, r4
 80a1b20:	bd38      	pop	{r3, r4, r5, pc}

080a1b22 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a1b22:	f7ff bff4 	b.w	80a1b0e <_ZN5Print7printlnEPKc>

080a1b26 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1b26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1b28:	2a01      	cmp	r2, #1
 80a1b2a:	bf98      	it	ls
 80a1b2c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1b2e:	b530      	push	{r4, r5, lr}
 80a1b30:	b08b      	sub	sp, #44	; 0x2c
 80a1b32:	460c      	mov	r4, r1
  *str = '\0';
 80a1b34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1b38:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1b3a:	4625      	mov	r5, r4
 80a1b3c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1b40:	fb04 5312 	mls	r3, r4, r2, r5
 80a1b44:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b46:	2b09      	cmp	r3, #9
 80a1b48:	bf94      	ite	ls
 80a1b4a:	3330      	addls	r3, #48	; 0x30
 80a1b4c:	3337      	addhi	r3, #55	; 0x37
 80a1b4e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1b50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b52:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1b56:	d9f0      	bls.n	80a1b3a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1b58:	f7ff ffba 	bl	80a1ad0 <_ZN5Print5writeEPKc>
}
 80a1b5c:	b00b      	add	sp, #44	; 0x2c
 80a1b5e:	bd30      	pop	{r4, r5, pc}

080a1b60 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b60:	2200      	movs	r2, #0
 80a1b62:	4b01      	ldr	r3, [pc, #4]	; (80a1b68 <_GLOBAL__sub_I_RGB+0x8>)
 80a1b64:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1b66:	4770      	bx	lr
 80a1b68:	200001a0 	.word	0x200001a0

080a1b6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1b6c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1b6e:	2600      	movs	r6, #0
 80a1b70:	4604      	mov	r4, r0
 80a1b72:	460d      	mov	r5, r1
 80a1b74:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1b78:	f7ff fbbe 	bl	80a12f8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1b7c:	4628      	mov	r0, r5
    _spi = spi;
 80a1b7e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1b80:	f7ff fc9e 	bl	80a14c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1b84:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1b86:	6066      	str	r6, [r4, #4]
}
 80a1b88:	bd70      	pop	{r4, r5, r6, pc}

080a1b8a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b8a:	b510      	push	{r4, lr}
 80a1b8c:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b8e:	6800      	ldr	r0, [r0, #0]
 80a1b90:	f7ff fdfa 	bl	80a1788 <free>
}
 80a1b94:	4620      	mov	r0, r4
 80a1b96:	bd10      	pop	{r4, pc}

080a1b98 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b98:	b510      	push	{r4, lr}
 80a1b9a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b9c:	6800      	ldr	r0, [r0, #0]
 80a1b9e:	b108      	cbz	r0, 80a1ba4 <_ZN6String10invalidateEv+0xc>
 80a1ba0:	f7ff fdf2 	bl	80a1788 <free>
	buffer = NULL;
 80a1ba4:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1ba6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1baa:	6023      	str	r3, [r4, #0]
}
 80a1bac:	bd10      	pop	{r4, pc}

080a1bae <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1bae:	b538      	push	{r3, r4, r5, lr}
 80a1bb0:	4604      	mov	r4, r0
 80a1bb2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1bb4:	6800      	ldr	r0, [r0, #0]
 80a1bb6:	3101      	adds	r1, #1
 80a1bb8:	f7ff fdee 	bl	80a1798 <realloc>
	if (newbuffer) {
 80a1bbc:	b110      	cbz	r0, 80a1bc4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1bbe:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1bc2:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1bc4:	bd38      	pop	{r3, r4, r5, pc}

080a1bc6 <_ZN6String7reserveEj>:
{
 80a1bc6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1bc8:	6803      	ldr	r3, [r0, #0]
{
 80a1bca:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1bcc:	b123      	cbz	r3, 80a1bd8 <_ZN6String7reserveEj+0x12>
 80a1bce:	6843      	ldr	r3, [r0, #4]
 80a1bd0:	428b      	cmp	r3, r1
 80a1bd2:	d301      	bcc.n	80a1bd8 <_ZN6String7reserveEj+0x12>
 80a1bd4:	2001      	movs	r0, #1
}
 80a1bd6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1bd8:	4620      	mov	r0, r4
 80a1bda:	f7ff ffe8 	bl	80a1bae <_ZN6String12changeBufferEj>
 80a1bde:	2800      	cmp	r0, #0
 80a1be0:	d0f9      	beq.n	80a1bd6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1be2:	68a3      	ldr	r3, [r4, #8]
 80a1be4:	2b00      	cmp	r3, #0
 80a1be6:	d1f5      	bne.n	80a1bd4 <_ZN6String7reserveEj+0xe>
 80a1be8:	6822      	ldr	r2, [r4, #0]
 80a1bea:	7013      	strb	r3, [r2, #0]
 80a1bec:	e7f2      	b.n	80a1bd4 <_ZN6String7reserveEj+0xe>

080a1bee <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bee:	b570      	push	{r4, r5, r6, lr}
 80a1bf0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1bf2:	4611      	mov	r1, r2
{
 80a1bf4:	4604      	mov	r4, r0
 80a1bf6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1bf8:	f7ff ffe5 	bl	80a1bc6 <_ZN6String7reserveEj>
 80a1bfc:	b920      	cbnz	r0, 80a1c08 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1bfe:	4620      	mov	r0, r4
 80a1c00:	f7ff ffca 	bl	80a1b98 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1c04:	4620      	mov	r0, r4
 80a1c06:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1c08:	462a      	mov	r2, r5
 80a1c0a:	4631      	mov	r1, r6
 80a1c0c:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1c0e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1c10:	f001 fbb0 	bl	80a3374 <memcpy>
	buffer[len] = 0;
 80a1c14:	2100      	movs	r1, #0
 80a1c16:	6822      	ldr	r2, [r4, #0]
 80a1c18:	68a3      	ldr	r3, [r4, #8]
 80a1c1a:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1c1c:	e7f2      	b.n	80a1c04 <_ZN6String4copyEPKcj+0x16>

080a1c1e <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1c1e:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1c20:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1c22:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c24:	460d      	mov	r5, r1
	capacity = 0;
 80a1c26:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1c2a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c2c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1c2e:	b139      	cbz	r1, 80a1c40 <_ZN6StringC1EPKc+0x22>
 80a1c30:	4608      	mov	r0, r1
 80a1c32:	f001 fbeb 	bl	80a340c <strlen>
 80a1c36:	4629      	mov	r1, r5
 80a1c38:	4602      	mov	r2, r0
 80a1c3a:	4620      	mov	r0, r4
 80a1c3c:	f7ff ffd7 	bl	80a1bee <_ZN6String4copyEPKcj>
}
 80a1c40:	4620      	mov	r0, r4
 80a1c42:	bd38      	pop	{r3, r4, r5, pc}

080a1c44 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1c44:	b538      	push	{r3, r4, r5, lr}
 80a1c46:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c48:	460c      	mov	r4, r1
 80a1c4a:	b149      	cbz	r1, 80a1c60 <_ZN6StringaSEPKc+0x1c>
 80a1c4c:	4608      	mov	r0, r1
 80a1c4e:	f001 fbdd 	bl	80a340c <strlen>
 80a1c52:	4621      	mov	r1, r4
 80a1c54:	4602      	mov	r2, r0
 80a1c56:	4628      	mov	r0, r5
 80a1c58:	f7ff ffc9 	bl	80a1bee <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1c5c:	4628      	mov	r0, r5
 80a1c5e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1c60:	f7ff ff9a 	bl	80a1b98 <_ZN6String10invalidateEv>
 80a1c64:	e7fa      	b.n	80a1c5c <_ZN6StringaSEPKc+0x18>

080a1c66 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 80a1c66:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1c68:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 80a1c6a:	4604      	mov	r4, r0
 80a1c6c:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1c6e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1c72:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1c74:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 80a1c76:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 80a1c78:	a901      	add	r1, sp, #4
 80a1c7a:	f000 fca7 	bl	80a25cc <ltoa>
	*this = buf;
 80a1c7e:	4620      	mov	r0, r4
 80a1c80:	a901      	add	r1, sp, #4
 80a1c82:	f7ff ffdf 	bl	80a1c44 <_ZN6StringaSEPKc>
}
 80a1c86:	4620      	mov	r0, r4
 80a1c88:	b00a      	add	sp, #40	; 0x28
 80a1c8a:	bd10      	pop	{r4, pc}

080a1c8c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1c8c:	b570      	push	{r4, r5, r6, lr}
 80a1c8e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1c90:	460e      	mov	r6, r1
 80a1c92:	b909      	cbnz	r1, 80a1c98 <_ZN6String6concatEPKcj+0xc>
 80a1c94:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1c96:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1c98:	b16a      	cbz	r2, 80a1cb6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1c9a:	6884      	ldr	r4, [r0, #8]
 80a1c9c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1c9e:	4621      	mov	r1, r4
 80a1ca0:	f7ff ff91 	bl	80a1bc6 <_ZN6String7reserveEj>
 80a1ca4:	2800      	cmp	r0, #0
 80a1ca6:	d0f5      	beq.n	80a1c94 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1ca8:	6828      	ldr	r0, [r5, #0]
 80a1caa:	68ab      	ldr	r3, [r5, #8]
 80a1cac:	4631      	mov	r1, r6
 80a1cae:	4418      	add	r0, r3
 80a1cb0:	f001 fba4 	bl	80a33fc <strcpy>
	len = newlen;
 80a1cb4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1cb6:	2001      	movs	r0, #1
 80a1cb8:	e7ed      	b.n	80a1c96 <_ZN6String6concatEPKcj+0xa>

080a1cba <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1cba:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1cbc:	688a      	ldr	r2, [r1, #8]
 80a1cbe:	6809      	ldr	r1, [r1, #0]
{
 80a1cc0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1cc2:	f7ff ffe3 	bl	80a1c8c <_ZN6String6concatEPKcj>
 80a1cc6:	b910      	cbnz	r0, 80a1cce <_ZplRK15StringSumHelperRK6String+0x14>
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	f7ff ff65 	bl	80a1b98 <_ZN6String10invalidateEv>
	return a;
}
 80a1cce:	4620      	mov	r0, r4
 80a1cd0:	bd10      	pop	{r4, pc}
	...

080a1cd4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1cd4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1cd6:	2000      	movs	r0, #0
 80a1cd8:	4b04      	ldr	r3, [pc, #16]	; (80a1cec <_GLOBAL__sub_I_System+0x18>)
 80a1cda:	601a      	str	r2, [r3, #0]
 80a1cdc:	4b04      	ldr	r3, [pc, #16]	; (80a1cf0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1cde:	4a05      	ldr	r2, [pc, #20]	; (80a1cf4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1ce0:	6018      	str	r0, [r3, #0]
 80a1ce2:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1ce4:	7198      	strb	r0, [r3, #6]
 80a1ce6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1ce8:	f7ff bc9a 	b.w	80a1620 <set_system_mode>
 80a1cec:	200001bc 	.word	0x200001bc
 80a1cf0:	200001b0 	.word	0x200001b0
 80a1cf4:	ffff0000 	.word	0xffff0000

080a1cf8 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1cf8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1cfa:	6803      	ldr	r3, [r0, #0]
{
 80a1cfc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1d00:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1d02:	2201      	movs	r2, #1
 80a1d04:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1d08:	f10d 0107 	add.w	r1, sp, #7
 80a1d0c:	47a0      	blx	r4
}
 80a1d0e:	b002      	add	sp, #8
 80a1d10:	bd10      	pop	{r4, pc}

080a1d12 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1d12:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1d14:	6803      	ldr	r3, [r0, #0]
 80a1d16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1d18:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1d1c:	46a4      	mov	ip, r4
}
 80a1d1e:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1d20:	4760      	bx	ip

080a1d22 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1d22:	b513      	push	{r0, r1, r4, lr}
 80a1d24:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a1d26:	6802      	ldr	r2, [r0, #0]
{
 80a1d28:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a1d2c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a1d2e:	f10d 0107 	add.w	r1, sp, #7
 80a1d32:	2201      	movs	r2, #1
 80a1d34:	47a0      	blx	r4
}
 80a1d36:	b002      	add	sp, #8
 80a1d38:	bd10      	pop	{r4, pc}

080a1d3a <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a1d3a:	4770      	bx	lr

080a1d3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1d3c:	4770      	bx	lr
	...

080a1d40 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      friend class __shared_count<_Lp>; // To be able to call _M_ptr().

      // No longer used, but code compiled against old libstdc++ headers
      // might still call it from __shared_ptr ctor to get the pointer out.
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1d40:	b510      	push	{r4, lr}
 80a1d42:	4604      	mov	r4, r0
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 80a1d44:	4b06      	ldr	r3, [pc, #24]	; (80a1d60 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1d46:	4608      	mov	r0, r1
	    ||
 80a1d48:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a1d4a:	f104 040c 	add.w	r4, r4, #12
 80a1d4e:	d004      	beq.n	80a1d5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a1d50:	f000 fdf4 	bl	80a293c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a1d54:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
 80a1d56:	bf08      	it	eq
 80a1d58:	2400      	moveq	r4, #0
      }
 80a1d5a:	4620      	mov	r0, r4
 80a1d5c:	bd10      	pop	{r4, pc}
 80a1d5e:	bf00      	nop
 80a1d60:	080a3778 	.word	0x080a3778

080a1d64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1d64:	b510      	push	{r4, lr}
 80a1d66:	4604      	mov	r4, r0
 80a1d68:	21ac      	movs	r1, #172	; 0xac
 80a1d6a:	f000 fde3 	bl	80a2934 <_ZdlPvj>
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd10      	pop	{r4, pc}

080a1d72 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a1d72:	f7fe b994 	b.w	80a009e <_ZdlPv>
	...

080a1d78 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a1d78:	b538      	push	{r3, r4, r5, lr}
 80a1d7a:	4b0b      	ldr	r3, [pc, #44]	; (80a1da8 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1d7c:	6984      	ldr	r4, [r0, #24]
 80a1d7e:	4605      	mov	r5, r0
 80a1d80:	6003      	str	r3, [r0, #0]
 80a1d82:	b17c      	cbz	r4, 80a1da4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1d84:	6863      	ldr	r3, [r4, #4]
 80a1d86:	3b01      	subs	r3, #1
 80a1d88:	6063      	str	r3, [r4, #4]
 80a1d8a:	b95b      	cbnz	r3, 80a1da4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a1d8c:	6823      	ldr	r3, [r4, #0]
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	689b      	ldr	r3, [r3, #8]
 80a1d92:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1d94:	68a3      	ldr	r3, [r4, #8]
 80a1d96:	3b01      	subs	r3, #1
 80a1d98:	60a3      	str	r3, [r4, #8]
 80a1d9a:	b91b      	cbnz	r3, 80a1da4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1d9c:	6823      	ldr	r3, [r4, #0]
 80a1d9e:	4620      	mov	r0, r4
 80a1da0:	68db      	ldr	r3, [r3, #12]
 80a1da2:	4798      	blx	r3
 80a1da4:	4628      	mov	r0, r5
 80a1da6:	bd38      	pop	{r3, r4, r5, pc}
 80a1da8:	080a3788 	.word	0x080a3788

080a1dac <_ZN9TCPClientD0Ev>:
 80a1dac:	b510      	push	{r4, lr}
 80a1dae:	4604      	mov	r4, r0
 80a1db0:	f7ff ffe2 	bl	80a1d78 <_ZN9TCPClientD1Ev>
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	211c      	movs	r1, #28
 80a1db8:	f000 fdbc 	bl	80a2934 <_ZdlPvj>
 80a1dbc:	4620      	mov	r0, r4
 80a1dbe:	bd10      	pop	{r4, pc}

080a1dc0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1dc0:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a1dc2:	4604      	mov	r4, r0
 80a1dc4:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1dc6:	694d      	ldr	r5, [r1, #20]
 80a1dc8:	4b04      	ldr	r3, [pc, #16]	; (80a1ddc <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1dca:	358c      	adds	r5, #140	; 0x8c
 80a1dcc:	f844 3b04 	str.w	r3, [r4], #4
 80a1dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1dd4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1dd6:	4630      	mov	r0, r6
 80a1dd8:	7023      	strb	r3, [r4, #0]
 80a1dda:	bd70      	pop	{r4, r5, r6, pc}
 80a1ddc:	080a36f4 	.word	0x080a36f4

080a1de0 <_ZN9TCPClient4peekEv>:
{
 80a1de0:	b510      	push	{r4, lr}
 80a1de2:	6943      	ldr	r3, [r0, #20]
 80a1de4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1de6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1dea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1dee:	429a      	cmp	r2, r3
 80a1df0:	d005      	beq.n	80a1dfe <_ZN9TCPClient4peekEv+0x1e>
 80a1df2:	6963      	ldr	r3, [r4, #20]
 80a1df4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1df8:	4413      	add	r3, r2
 80a1dfa:	7918      	ldrb	r0, [r3, #4]
}
 80a1dfc:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1dfe:	6803      	ldr	r3, [r0, #0]
 80a1e00:	691b      	ldr	r3, [r3, #16]
 80a1e02:	4798      	blx	r3
 80a1e04:	2800      	cmp	r0, #0
 80a1e06:	d1f4      	bne.n	80a1df2 <_ZN9TCPClient4peekEv+0x12>
 80a1e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1e0c:	e7f6      	b.n	80a1dfc <_ZN9TCPClient4peekEv+0x1c>

080a1e0e <_ZN9TCPClient4readEv>:
{
 80a1e0e:	b510      	push	{r4, lr}
 80a1e10:	6943      	ldr	r3, [r0, #20]
 80a1e12:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1e14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1e18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1e1c:	429a      	cmp	r2, r3
 80a1e1e:	d008      	beq.n	80a1e32 <_ZN9TCPClient4readEv+0x24>
 80a1e20:	6963      	ldr	r3, [r4, #20]
 80a1e22:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1e26:	1c51      	adds	r1, r2, #1
 80a1e28:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a1e2c:	4413      	add	r3, r2
 80a1e2e:	7918      	ldrb	r0, [r3, #4]
}
 80a1e30:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1e32:	6803      	ldr	r3, [r0, #0]
 80a1e34:	691b      	ldr	r3, [r3, #16]
 80a1e36:	4798      	blx	r3
 80a1e38:	2800      	cmp	r0, #0
 80a1e3a:	d1f1      	bne.n	80a1e20 <_ZN9TCPClient4readEv+0x12>
 80a1e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1e40:	e7f6      	b.n	80a1e30 <_ZN9TCPClient4readEv+0x22>

080a1e42 <_ZN9TCPClient4readEPhj>:
{
 80a1e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e44:	6943      	ldr	r3, [r0, #20]
 80a1e46:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a1e48:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1e4c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a1e50:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a1e52:	429a      	cmp	r2, r3
{
 80a1e54:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a1e56:	d016      	beq.n	80a1e86 <_ZN9TCPClient4readEPhj+0x44>
 80a1e58:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1e5a:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a1e5c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1e60:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a1e64:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1e66:	42bc      	cmp	r4, r7
 80a1e68:	bf28      	it	cs
 80a1e6a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1e6c:	3304      	adds	r3, #4
 80a1e6e:	4622      	mov	r2, r4
 80a1e70:	4419      	add	r1, r3
 80a1e72:	f001 fa7f 	bl	80a3374 <memcpy>
 80a1e76:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1e78:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1e7c:	4423      	add	r3, r4
 80a1e7e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a1e86:	6803      	ldr	r3, [r0, #0]
 80a1e88:	691b      	ldr	r3, [r3, #16]
 80a1e8a:	4798      	blx	r3
 80a1e8c:	2800      	cmp	r0, #0
 80a1e8e:	d1e3      	bne.n	80a1e58 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a1e90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1e94:	e7f5      	b.n	80a1e82 <_ZN9TCPClient4readEPhj+0x40>

080a1e96 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a1e96:	2300      	movs	r3, #0
 80a1e98:	6942      	ldr	r2, [r0, #20]
 80a1e9a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1e9e:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1ea0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a1ea4:	4770      	bx	lr
	...

080a1ea8 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a1ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1eac:	461f      	mov	r7, r3
    stop();
 80a1eae:	6803      	ldr	r3, [r0, #0]
{
 80a1eb0:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a1eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1eb4:	4605      	mov	r5, r0
 80a1eb6:	460c      	mov	r4, r1
 80a1eb8:	4616      	mov	r6, r2
    stop();
 80a1eba:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a1ebc:	4638      	mov	r0, r7
 80a1ebe:	f7ff fddb 	bl	80a1a78 <_ZN5spark12NetworkClass4fromEm>
 80a1ec2:	6803      	ldr	r3, [r0, #0]
 80a1ec4:	68db      	ldr	r3, [r3, #12]
 80a1ec6:	4798      	blx	r3
 80a1ec8:	2800      	cmp	r0, #0
 80a1eca:	d054      	beq.n	80a1f76 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1ecc:	4633      	mov	r3, r6
 80a1ece:	2206      	movs	r2, #6
 80a1ed0:	2101      	movs	r1, #1
 80a1ed2:	2002      	movs	r0, #2
 80a1ed4:	9700      	str	r7, [sp, #0]
 80a1ed6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a1eda:	f7ff fac1 	bl	80a1460 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1ede:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1ee0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1ee4:	f04f 0800 	mov.w	r8, #0
 80a1ee8:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a1eec:	696b      	ldr	r3, [r5, #20]
 80a1eee:	2001      	movs	r0, #1
 80a1ef0:	681b      	ldr	r3, [r3, #0]
 80a1ef2:	4923      	ldr	r1, [pc, #140]	; (80a1f80 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1ef4:	9301      	str	r3, [sp, #4]
 80a1ef6:	4b23      	ldr	r3, [pc, #140]	; (80a1f84 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1ef8:	aa02      	add	r2, sp, #8
 80a1efa:	9300      	str	r3, [sp, #0]
 80a1efc:	4643      	mov	r3, r8
 80a1efe:	f7ff fb7f 	bl	80a1600 <log_message>
          if (socket_handle_valid(d_->sock))
 80a1f02:	696b      	ldr	r3, [r5, #20]
 80a1f04:	6818      	ldr	r0, [r3, #0]
 80a1f06:	f7ff faa3 	bl	80a1450 <socket_handle_valid>
 80a1f0a:	2800      	cmp	r0, #0
 80a1f0c:	d033      	beq.n	80a1f76 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a1f0e:	4628      	mov	r0, r5
 80a1f10:	f7ff ffc1 	bl	80a1e96 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a1f14:	2302      	movs	r3, #2
 80a1f16:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1f1a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1f1c:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1f1e:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1f22:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1f24:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a1f28:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1f2c:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1f2e:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a1f32:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1f36:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1f3a:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1f3e:	f7ff fb4f 	bl	80a15e0 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1f42:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1f44:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1f46:	2210      	movs	r2, #16
 80a1f48:	6818      	ldr	r0, [r3, #0]
 80a1f4a:	a902      	add	r1, sp, #8
 80a1f4c:	f7ff fa90 	bl	80a1470 <socket_connect>
 80a1f50:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a1f52:	4630      	mov	r0, r6
 80a1f54:	f7ff fb44 	bl	80a15e0 <HAL_NET_SetNetWatchDog>
 80a1f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1f5a:	696e      	ldr	r6, [r5, #20]
 80a1f5c:	368c      	adds	r6, #140	; 0x8c
 80a1f5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1f60:	6823      	ldr	r3, [r4, #0]
 80a1f62:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a1f64:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a1f66:	f1b9 0f00 	cmp.w	r9, #0
 80a1f6a:	d007      	beq.n	80a1f7c <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a1f6c:	682b      	ldr	r3, [r5, #0]
 80a1f6e:	4628      	mov	r0, r5
 80a1f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1f72:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1f74:	4640      	mov	r0, r8
}
 80a1f76:	b00b      	add	sp, #44	; 0x2c
 80a1f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1f7c:	2001      	movs	r0, #1
        return connected;
 80a1f7e:	e7fa      	b.n	80a1f76 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a1f80:	080a3740 	.word	0x080a3740
 80a1f84:	080a3747 	.word	0x080a3747

080a1f88 <_ZN9TCPClient9availableEv>:
{
 80a1f88:	b538      	push	{r3, r4, r5, lr}
 80a1f8a:	6942      	ldr	r2, [r0, #20]
 80a1f8c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a1f8e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1f92:	b12b      	cbz	r3, 80a1fa0 <_ZN9TCPClient9availableEv+0x18>
 80a1f94:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1f98:	429a      	cmp	r2, r3
 80a1f9a:	d101      	bne.n	80a1fa0 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a1f9c:	f7ff ff7b 	bl	80a1e96 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1fa0:	6920      	ldr	r0, [r4, #16]
 80a1fa2:	f7ff fd69 	bl	80a1a78 <_ZN5spark12NetworkClass4fromEm>
 80a1fa6:	6803      	ldr	r3, [r0, #0]
 80a1fa8:	68db      	ldr	r3, [r3, #12]
 80a1faa:	4798      	blx	r3
 80a1fac:	b1f8      	cbz	r0, 80a1fee <_ZN9TCPClient9availableEv+0x66>
 80a1fae:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a1fb0:	6818      	ldr	r0, [r3, #0]
 80a1fb2:	f7ff fa4d 	bl	80a1450 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1fb6:	b1d0      	cbz	r0, 80a1fee <_ZN9TCPClient9availableEv+0x66>
 80a1fb8:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a1fba:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1fbe:	297f      	cmp	r1, #127	; 0x7f
 80a1fc0:	d815      	bhi.n	80a1fee <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1fc2:	1d05      	adds	r5, r0, #4
 80a1fc4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1fc8:	2300      	movs	r3, #0
 80a1fca:	6800      	ldr	r0, [r0, #0]
 80a1fcc:	4429      	add	r1, r5
 80a1fce:	f7ff fa57 	bl	80a1480 <socket_receive>
            if (ret > 0)
 80a1fd2:	2800      	cmp	r0, #0
 80a1fd4:	dd0b      	ble.n	80a1fee <_ZN9TCPClient9availableEv+0x66>
 80a1fd6:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a1fd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1fdc:	b90a      	cbnz	r2, 80a1fe2 <_ZN9TCPClient9availableEv+0x5a>
 80a1fde:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1fe2:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a1fe4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1fe8:	4410      	add	r0, r2
 80a1fea:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a1fee:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a1ff0:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a1ff4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a1ff8:	1ac0      	subs	r0, r0, r3
 80a1ffa:	bd38      	pop	{r3, r4, r5, pc}

080a1ffc <_ZN9TCPClient4stopEv>:
{
 80a1ffc:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a1ffe:	6943      	ldr	r3, [r0, #20]
{
 80a2000:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a2002:	6818      	ldr	r0, [r3, #0]
 80a2004:	f7ff fa24 	bl	80a1450 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a2008:	b118      	cbz	r0, 80a2012 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a200a:	6963      	ldr	r3, [r4, #20]
 80a200c:	6818      	ldr	r0, [r3, #0]
 80a200e:	f7ff fa3f 	bl	80a1490 <socket_close>
 80a2012:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2014:	f7ff fa44 	bl	80a14a0 <socket_handle_invalid>
 80a2018:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a201a:	6960      	ldr	r0, [r4, #20]
 80a201c:	2211      	movs	r2, #17
 80a201e:	2100      	movs	r1, #0
 80a2020:	308c      	adds	r0, #140	; 0x8c
 80a2022:	f001 f9b5 	bl	80a3390 <memset>
  flush_buffer();
 80a2026:	4620      	mov	r0, r4
}
 80a2028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a202c:	f7ff bf33 	b.w	80a1e96 <_ZN9TCPClient12flush_bufferEv>

080a2030 <_ZN9TCPClient6statusEv>:
{
 80a2030:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2032:	6943      	ldr	r3, [r0, #20]
{
 80a2034:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a2036:	6818      	ldr	r0, [r3, #0]
 80a2038:	f7ff fa0a 	bl	80a1450 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a203c:	b908      	cbnz	r0, 80a2042 <_ZN9TCPClient6statusEv+0x12>
 80a203e:	2000      	movs	r0, #0
}
 80a2040:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2042:	6920      	ldr	r0, [r4, #16]
 80a2044:	f7ff fd18 	bl	80a1a78 <_ZN5spark12NetworkClass4fromEm>
 80a2048:	6803      	ldr	r3, [r0, #0]
 80a204a:	68db      	ldr	r3, [r3, #12]
 80a204c:	4798      	blx	r3
 80a204e:	2800      	cmp	r0, #0
 80a2050:	d0f5      	beq.n	80a203e <_ZN9TCPClient6statusEv+0xe>
 80a2052:	6963      	ldr	r3, [r4, #20]
 80a2054:	6818      	ldr	r0, [r3, #0]
 80a2056:	f7ff f9f3 	bl	80a1440 <socket_active_status>
 80a205a:	fab0 f080 	clz	r0, r0
 80a205e:	0940      	lsrs	r0, r0, #5
 80a2060:	e7ee      	b.n	80a2040 <_ZN9TCPClient6statusEv+0x10>

080a2062 <_ZN9TCPClientcvbEv>:
{
 80a2062:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2064:	f7ff ffe4 	bl	80a2030 <_ZN9TCPClient6statusEv>
}
 80a2068:	3800      	subs	r0, #0
 80a206a:	bf18      	it	ne
 80a206c:	2001      	movne	r0, #1
 80a206e:	bd08      	pop	{r3, pc}

080a2070 <_ZN9TCPClient5writeEPKhjm>:
{
 80a2070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a2074:	2700      	movs	r7, #0
 80a2076:	6047      	str	r7, [r0, #4]
 80a2078:	4604      	mov	r4, r0
 80a207a:	460d      	mov	r5, r1
 80a207c:	4616      	mov	r6, r2
 80a207e:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2080:	f7ff ffd6 	bl	80a2030 <_ZN9TCPClient6statusEv>
 80a2084:	b170      	cbz	r0, 80a20a4 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a2086:	e9cd 8700 	strd	r8, r7, [sp]
 80a208a:	6960      	ldr	r0, [r4, #20]
 80a208c:	463b      	mov	r3, r7
 80a208e:	4632      	mov	r2, r6
 80a2090:	4629      	mov	r1, r5
 80a2092:	6800      	ldr	r0, [r0, #0]
 80a2094:	f7ff fa0c 	bl	80a14b0 <socket_send_ex>
    if (ret < 0) {
 80a2098:	2800      	cmp	r0, #0
 80a209a:	da00      	bge.n	80a209e <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a209c:	6060      	str	r0, [r4, #4]
}
 80a209e:	b002      	add	sp, #8
 80a20a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a20a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a20a8:	e7f8      	b.n	80a209c <_ZN9TCPClient5writeEPKhjm+0x2c>

080a20aa <_ZN9TCPClient9connectedEv>:
{
 80a20aa:	b570      	push	{r4, r5, r6, lr}
 80a20ac:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a20ae:	f7ff ffbf 	bl	80a2030 <_ZN9TCPClient6statusEv>
 80a20b2:	b9e8      	cbnz	r0, 80a20f0 <_ZN9TCPClient9connectedEv+0x46>
 80a20b4:	696b      	ldr	r3, [r5, #20]
 80a20b6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a20ba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a20be:	4291      	cmp	r1, r2
 80a20c0:	d116      	bne.n	80a20f0 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a20c2:	6818      	ldr	r0, [r3, #0]
 80a20c4:	f7ff f9c4 	bl	80a1450 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a20c8:	b908      	cbnz	r0, 80a20ce <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a20ca:	2000      	movs	r0, #0
}
 80a20cc:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a20ce:	696b      	ldr	r3, [r5, #20]
 80a20d0:	6818      	ldr	r0, [r3, #0]
 80a20d2:	f7ff f9b5 	bl	80a1440 <socket_active_status>
 80a20d6:	2801      	cmp	r0, #1
 80a20d8:	4604      	mov	r4, r0
 80a20da:	d1f6      	bne.n	80a20ca <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a20dc:	682b      	ldr	r3, [r5, #0]
 80a20de:	4628      	mov	r0, r5
 80a20e0:	691b      	ldr	r3, [r3, #16]
 80a20e2:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a20e4:	b930      	cbnz	r0, 80a20f4 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a20e6:	682b      	ldr	r3, [r5, #0]
 80a20e8:	4628      	mov	r0, r5
 80a20ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a20ec:	4798      	blx	r3
 80a20ee:	e7ec      	b.n	80a20ca <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a20f0:	2001      	movs	r0, #1
 80a20f2:	e7eb      	b.n	80a20cc <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a20f4:	4620      	mov	r0, r4
 80a20f6:	e7e9      	b.n	80a20cc <_ZN9TCPClient9connectedEv+0x22>

080a20f8 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a20f8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a20fa:	b510      	push	{r4, lr}
 80a20fc:	4604      	mov	r4, r0
          total(0) {
 80a20fe:	6001      	str	r1, [r0, #0]
 80a2100:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a2104:	3088      	adds	r0, #136	; 0x88
 80a2106:	f7ff fbf5 	bl	80a18f4 <_ZN9IPAddressC1Ev>
}
 80a210a:	4620      	mov	r0, r4
 80a210c:	bd10      	pop	{r4, pc}
	...

080a2110 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a2110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2116:	2300      	movs	r3, #0
 80a2118:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a211c:	4a0d      	ldr	r2, [pc, #52]	; (80a2154 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a211e:	6103      	str	r3, [r0, #16]
 80a2120:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a2122:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a2124:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2126:	20ac      	movs	r0, #172	; 0xac
 80a2128:	460e      	mov	r6, r1
 80a212a:	f7fd ffb4 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a212e:	1e05      	subs	r5, r0, #0
 80a2130:	f105 070c 	add.w	r7, r5, #12
 80a2134:	d008      	beq.n	80a2148 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a2136:	2301      	movs	r3, #1
 80a2138:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a213c:	4b06      	ldr	r3, [pc, #24]	; (80a2158 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a213e:	4631      	mov	r1, r6
 80a2140:	4638      	mov	r0, r7
 80a2142:	602b      	str	r3, [r5, #0]
 80a2144:	f7ff ffd8 	bl	80a20f8 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a2148:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a214a:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a214e:	f7ff fea2 	bl	80a1e96 <_ZN9TCPClient12flush_bufferEv>
}
 80a2152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2154:	080a3788 	.word	0x080a3788
 80a2158:	080a3764 	.word	0x080a3764

080a215c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a215c:	b510      	push	{r4, lr}
 80a215e:	4604      	mov	r4, r0
 80a2160:	f7ff f99e 	bl	80a14a0 <socket_handle_invalid>
 80a2164:	4601      	mov	r1, r0
 80a2166:	4620      	mov	r0, r4
 80a2168:	f7ff ffd2 	bl	80a2110 <_ZN9TCPClientC1Em>
}
 80a216c:	4620      	mov	r0, r4
 80a216e:	bd10      	pop	{r4, pc}

080a2170 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a2170:	b510      	push	{r4, lr}
 80a2172:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a2174:	6800      	ldr	r0, [r0, #0]
 80a2176:	f7ff f96b 	bl	80a1450 <socket_handle_valid>
 80a217a:	b110      	cbz	r0, 80a2182 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a217c:	6820      	ldr	r0, [r4, #0]
 80a217e:	f7ff f987 	bl	80a1490 <socket_close>
    }
}
 80a2182:	4620      	mov	r0, r4
 80a2184:	bd10      	pop	{r4, pc}

080a2186 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a2186:	300c      	adds	r0, #12
 80a2188:	f7ff bff2 	b.w	80a2170 <_ZN9TCPClient4DataD1Ev>

080a218c <_ZN9TCPClient7connectEPKctm>:
{
 80a218c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2190:	461f      	mov	r7, r3
    stop();
 80a2192:	6803      	ldr	r3, [r0, #0]
{
 80a2194:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a2198:	4606      	mov	r6, r0
 80a219a:	460d      	mov	r5, r1
 80a219c:	4690      	mov	r8, r2
    stop();
 80a219e:	4798      	blx	r3
    if (Network.ready())
 80a21a0:	4813      	ldr	r0, [pc, #76]	; (80a21f0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a21a2:	f7ff fc14 	bl	80a19ce <_ZN5spark12NetworkClass5readyEv>
 80a21a6:	b1f0      	cbz	r0, 80a21e6 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a21a8:	a802      	add	r0, sp, #8
 80a21aa:	f7ff fba3 	bl	80a18f4 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a21ae:	4628      	mov	r0, r5
 80a21b0:	f001 f92c 	bl	80a340c <strlen>
 80a21b4:	2400      	movs	r4, #0
 80a21b6:	b281      	uxth	r1, r0
 80a21b8:	463b      	mov	r3, r7
 80a21ba:	4628      	mov	r0, r5
 80a21bc:	9400      	str	r4, [sp, #0]
 80a21be:	aa03      	add	r2, sp, #12
 80a21c0:	f7ff fa16 	bl	80a15f0 <inet_gethostbyname>
 80a21c4:	b990      	cbnz	r0, 80a21ec <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a21c6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a21c8:	ad09      	add	r5, sp, #36	; 0x24
 80a21ca:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a21ce:	4b09      	ldr	r3, [pc, #36]	; (80a21f4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a21d0:	ac03      	add	r4, sp, #12
 80a21d2:	9308      	str	r3, [sp, #32]
 80a21d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a21d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a21d8:	6823      	ldr	r3, [r4, #0]
 80a21da:	4642      	mov	r2, r8
 80a21dc:	702b      	strb	r3, [r5, #0]
 80a21de:	4630      	mov	r0, r6
 80a21e0:	463b      	mov	r3, r7
 80a21e2:	a908      	add	r1, sp, #32
 80a21e4:	47c8      	blx	r9
}
 80a21e6:	b00f      	add	sp, #60	; 0x3c
 80a21e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a21ec:	4620      	mov	r0, r4
 80a21ee:	e7fa      	b.n	80a21e6 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a21f0:	20000198 	.word	0x20000198
 80a21f4:	080a36f4 	.word	0x080a36f4

080a21f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a21f8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a21fa:	2000      	movs	r0, #0
 80a21fc:	f7ff fa4c 	bl	80a1698 <spark_sync_time_pending>
 80a2200:	b128      	cbz	r0, 80a220e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2202:	f7ff fa41 	bl	80a1688 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2206:	f080 0001 	eor.w	r0, r0, #1
 80a220a:	b2c0      	uxtb	r0, r0
    }
 80a220c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a220e:	2001      	movs	r0, #1
 80a2210:	e7fc      	b.n	80a220c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a2212 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2212:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2214:	2000      	movs	r0, #0
 80a2216:	f7ff f88f 	bl	80a1338 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a221a:	4604      	mov	r4, r0
 80a221c:	b9a0      	cbnz	r0, 80a2248 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a221e:	f7ff f9f7 	bl	80a1610 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2222:	2801      	cmp	r0, #1
 80a2224:	d110      	bne.n	80a2248 <_ZN9TimeClass7isValidEv+0x36>
 80a2226:	4620      	mov	r0, r4
 80a2228:	f7ff fa0a 	bl	80a1640 <system_thread_get_state>
 80a222c:	b960      	cbnz	r0, 80a2248 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a222e:	f7ff ffe3 	bl	80a21f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2232:	b910      	cbnz	r0, 80a223a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2234:	f7ff fa20 	bl	80a1678 <spark_process>
        while (_while() && !_condition()) {
 80a2238:	e7f9      	b.n	80a222e <_ZN9TimeClass7isValidEv+0x1c>
 80a223a:	f7ff ffdd 	bl	80a21f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2242:	2000      	movs	r0, #0
 80a2244:	f7ff b878 	b.w	80a1338 <hal_rtc_time_is_valid>
}
 80a2248:	4620      	mov	r0, r4
 80a224a:	bd10      	pop	{r4, pc}

080a224c <_ZN9TimeClass3nowEv>:
{
 80a224c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a224e:	f7ff ffe0 	bl	80a2212 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2252:	2210      	movs	r2, #16
 80a2254:	2100      	movs	r1, #0
 80a2256:	4668      	mov	r0, sp
 80a2258:	f001 f89a 	bl	80a3390 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a225c:	2100      	movs	r1, #0
 80a225e:	4668      	mov	r0, sp
 80a2260:	f7ff f872 	bl	80a1348 <hal_rtc_get_time>
}
 80a2264:	9800      	ldr	r0, [sp, #0]
 80a2266:	b005      	add	sp, #20
 80a2268:	f85d fb04 	ldr.w	pc, [sp], #4

080a226c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a226c:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a226e:	681a      	ldr	r2, [r3, #0]
 80a2270:	4b02      	ldr	r3, [pc, #8]	; (80a227c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2272:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2274:	4770      	bx	lr
 80a2276:	bf00      	nop
 80a2278:	20000028 	.word	0x20000028
 80a227c:	200001c0 	.word	0x200001c0

080a2280 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2280:	4770      	bx	lr

080a2282 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2282:	7441      	strb	r1, [r0, #17]
}
 80a2284:	4770      	bx	lr

080a2286 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2286:	4770      	bx	lr

080a2288 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a2288:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a228a:	7c00      	ldrb	r0, [r0, #16]
 80a228c:	f7ff f960 	bl	80a1550 <hal_usart_available_data_for_write>
}
 80a2290:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2294:	bd08      	pop	{r3, pc}

080a2296 <_ZN11USARTSerial9availableEv>:
{
 80a2296:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2298:	7c00      	ldrb	r0, [r0, #16]
 80a229a:	f7ff f931 	bl	80a1500 <hal_usart_available>
}
 80a229e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a22a2:	bd08      	pop	{r3, pc}

080a22a4 <_ZN11USARTSerial4peekEv>:
{
 80a22a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a22a6:	7c00      	ldrb	r0, [r0, #16]
 80a22a8:	f7ff f93a 	bl	80a1520 <hal_usart_peek>
}
 80a22ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a22b0:	bd08      	pop	{r3, pc}

080a22b2 <_ZN11USARTSerial4readEv>:
{
 80a22b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a22b4:	7c00      	ldrb	r0, [r0, #16]
 80a22b6:	f7ff f92b 	bl	80a1510 <hal_usart_read>
}
 80a22ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a22be:	bd08      	pop	{r3, pc}

080a22c0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a22c0:	7c00      	ldrb	r0, [r0, #16]
 80a22c2:	f7ff b935 	b.w	80a1530 <hal_usart_flush>

080a22c6 <_ZN11USARTSerial5writeEh>:
{
 80a22c6:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22c8:	7c46      	ldrb	r6, [r0, #17]
{
 80a22ca:	4604      	mov	r4, r0
 80a22cc:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22ce:	b12e      	cbz	r6, 80a22dc <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a22d0:	4629      	mov	r1, r5
 80a22d2:	7c20      	ldrb	r0, [r4, #16]
}
 80a22d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a22d8:	f7ff b90a 	b.w	80a14f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22dc:	7c00      	ldrb	r0, [r0, #16]
 80a22de:	f7ff f937 	bl	80a1550 <hal_usart_available_data_for_write>
 80a22e2:	2800      	cmp	r0, #0
 80a22e4:	dcf4      	bgt.n	80a22d0 <_ZN11USARTSerial5writeEh+0xa>
}
 80a22e6:	4630      	mov	r0, r6
 80a22e8:	bd70      	pop	{r4, r5, r6, pc}

080a22ea <_ZN11USARTSerialD0Ev>:
 80a22ea:	b510      	push	{r4, lr}
 80a22ec:	4604      	mov	r4, r0
 80a22ee:	2114      	movs	r1, #20
 80a22f0:	f000 fb20 	bl	80a2934 <_ZdlPvj>
 80a22f4:	4620      	mov	r0, r4
 80a22f6:	bd10      	pop	{r4, pc}

080a22f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a22f8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a22fc:	b510      	push	{r4, lr}
 80a22fe:	4604      	mov	r4, r0
 80a2300:	4608      	mov	r0, r1
 80a2302:	4611      	mov	r1, r2
 80a2304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2308:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a230c:	4a04      	ldr	r2, [pc, #16]	; (80a2320 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a230e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2310:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2312:	2201      	movs	r2, #1
 80a2314:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2316:	461a      	mov	r2, r3
 80a2318:	f7ff f8e2 	bl	80a14e0 <hal_usart_init>
}
 80a231c:	4620      	mov	r0, r4
 80a231e:	bd10      	pop	{r4, pc}
 80a2320:	080a37f0 	.word	0x080a37f0

080a2324 <_Z22__fetch_global_Serial1v>:
{
 80a2324:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2326:	4d0c      	ldr	r5, [pc, #48]	; (80a2358 <_Z22__fetch_global_Serial1v+0x34>)
 80a2328:	7829      	ldrb	r1, [r5, #0]
 80a232a:	f3bf 8f5b 	dmb	ish
 80a232e:	f011 0401 	ands.w	r4, r1, #1
 80a2332:	d10f      	bne.n	80a2354 <_Z22__fetch_global_Serial1v+0x30>
 80a2334:	4628      	mov	r0, r5
 80a2336:	f7fd feb6 	bl	80a00a6 <__cxa_guard_acquire>
 80a233a:	b158      	cbz	r0, 80a2354 <_Z22__fetch_global_Serial1v+0x30>
 80a233c:	4621      	mov	r1, r4
 80a233e:	4b07      	ldr	r3, [pc, #28]	; (80a235c <_Z22__fetch_global_Serial1v+0x38>)
 80a2340:	4a07      	ldr	r2, [pc, #28]	; (80a2360 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2342:	4808      	ldr	r0, [pc, #32]	; (80a2364 <_Z22__fetch_global_Serial1v+0x40>)
 80a2344:	f7ff ffd8 	bl	80a22f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2348:	4628      	mov	r0, r5
 80a234a:	f7fd feb1 	bl	80a00b0 <__cxa_guard_release>
 80a234e:	4806      	ldr	r0, [pc, #24]	; (80a2368 <_Z22__fetch_global_Serial1v+0x44>)
 80a2350:	f000 fff6 	bl	80a3340 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2354:	4803      	ldr	r0, [pc, #12]	; (80a2364 <_Z22__fetch_global_Serial1v+0x40>)
 80a2356:	bd38      	pop	{r3, r4, r5, pc}
 80a2358:	200001c4 	.word	0x200001c4
 80a235c:	2000024c 	.word	0x2000024c
 80a2360:	200001c8 	.word	0x200001c8
 80a2364:	200002d0 	.word	0x200002d0
 80a2368:	080a2287 	.word	0x080a2287

080a236c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a236c:	7441      	strb	r1, [r0, #17]
}
 80a236e:	4770      	bx	lr

080a2370 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2370:	4770      	bx	lr

080a2372 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2372:	4770      	bx	lr

080a2374 <_ZN9USBSerial4readEv>:
{
 80a2374:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2376:	2100      	movs	r1, #0
 80a2378:	7c00      	ldrb	r0, [r0, #16]
 80a237a:	f7ff f911 	bl	80a15a0 <HAL_USB_USART_Receive_Data>
}
 80a237e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2382:	bd08      	pop	{r3, pc}

080a2384 <_ZN9USBSerial4peekEv>:
{
 80a2384:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2386:	2101      	movs	r1, #1
 80a2388:	7c00      	ldrb	r0, [r0, #16]
 80a238a:	f7ff f909 	bl	80a15a0 <HAL_USB_USART_Receive_Data>
}
 80a238e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2392:	bd08      	pop	{r3, pc}

080a2394 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2394:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2396:	7c00      	ldrb	r0, [r0, #16]
 80a2398:	f7ff f8fa 	bl	80a1590 <HAL_USB_USART_Available_Data_For_Write>
}
 80a239c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23a0:	bd08      	pop	{r3, pc}

080a23a2 <_ZN9USBSerial9availableEv>:
{
 80a23a2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a23a4:	7c00      	ldrb	r0, [r0, #16]
 80a23a6:	f7ff f8eb 	bl	80a1580 <HAL_USB_USART_Available_Data>
}
 80a23aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23ae:	bd08      	pop	{r3, pc}

080a23b0 <_ZN9USBSerial5writeEh>:
{
 80a23b0:	b538      	push	{r3, r4, r5, lr}
 80a23b2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23b4:	7c00      	ldrb	r0, [r0, #16]
{
 80a23b6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23b8:	f7ff f8ea 	bl	80a1590 <HAL_USB_USART_Available_Data_For_Write>
 80a23bc:	2800      	cmp	r0, #0
 80a23be:	dc01      	bgt.n	80a23c4 <_ZN9USBSerial5writeEh+0x14>
 80a23c0:	7c60      	ldrb	r0, [r4, #17]
 80a23c2:	b128      	cbz	r0, 80a23d0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a23c4:	4629      	mov	r1, r5
 80a23c6:	7c20      	ldrb	r0, [r4, #16]
 80a23c8:	f7ff f8f2 	bl	80a15b0 <HAL_USB_USART_Send_Data>
 80a23cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a23d0:	bd38      	pop	{r3, r4, r5, pc}

080a23d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a23d2:	7c00      	ldrb	r0, [r0, #16]
 80a23d4:	f7ff b8f4 	b.w	80a15c0 <HAL_USB_USART_Flush_Data>

080a23d8 <_ZN9USBSerialD0Ev>:
 80a23d8:	b510      	push	{r4, lr}
 80a23da:	4604      	mov	r4, r0
 80a23dc:	2114      	movs	r1, #20
 80a23de:	f000 faa9 	bl	80a2934 <_ZdlPvj>
 80a23e2:	4620      	mov	r0, r4
 80a23e4:	bd10      	pop	{r4, pc}

080a23e6 <__tcf_1>:
 80a23e6:	4770      	bx	lr

080a23e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a23e8:	b510      	push	{r4, lr}
 80a23ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23ee:	4604      	mov	r4, r0
 80a23f0:	4608      	mov	r0, r1
 80a23f2:	2100      	movs	r1, #0
 80a23f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a23f8:	4b04      	ldr	r3, [pc, #16]	; (80a240c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a23fa:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a23fc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a23fe:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2400:	4611      	mov	r1, r2
  _blocking = true;
 80a2402:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2404:	f7ff f8ac 	bl	80a1560 <HAL_USB_USART_Init>
}
 80a2408:	4620      	mov	r0, r4
 80a240a:	bd10      	pop	{r4, pc}
 80a240c:	080a3820 	.word	0x080a3820

080a2410 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2410:	2200      	movs	r2, #0
 80a2412:	7c00      	ldrb	r0, [r0, #16]
 80a2414:	f7ff b8ac 	b.w	80a1570 <HAL_USB_USART_Begin>

080a2418 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2418:	7c00      	ldrb	r0, [r0, #16]
 80a241a:	f7ff b8d9 	b.w	80a15d0 <HAL_USB_USART_Is_Enabled>

080a241e <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a241e:	f7ff bffb 	b.w	80a2418 <_ZN9USBSerial9isEnabledEv>
	...

080a2424 <_Z19acquireSerialBufferv>:
{
 80a2424:	b510      	push	{r4, lr}
 80a2426:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2428:	2214      	movs	r2, #20
 80a242a:	2100      	movs	r1, #0
 80a242c:	f000 ffb0 	bl	80a3390 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2430:	4b05      	ldr	r3, [pc, #20]	; (80a2448 <_Z19acquireSerialBufferv+0x24>)
}
 80a2432:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2434:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2436:	4b05      	ldr	r3, [pc, #20]	; (80a244c <_Z19acquireSerialBufferv+0x28>)
 80a2438:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a243a:	f240 1301 	movw	r3, #257	; 0x101
 80a243e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2440:	2381      	movs	r3, #129	; 0x81
 80a2442:	8223      	strh	r3, [r4, #16]
}
 80a2444:	bd10      	pop	{r4, pc}
 80a2446:	bf00      	nop
 80a2448:	20000314 	.word	0x20000314
 80a244c:	20000415 	.word	0x20000415

080a2450 <_Z16_fetch_usbserialv>:
{
 80a2450:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2452:	4d0e      	ldr	r5, [pc, #56]	; (80a248c <_Z16_fetch_usbserialv+0x3c>)
{
 80a2454:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2456:	a801      	add	r0, sp, #4
 80a2458:	f7ff ffe4 	bl	80a2424 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a245c:	7829      	ldrb	r1, [r5, #0]
 80a245e:	f3bf 8f5b 	dmb	ish
 80a2462:	f011 0401 	ands.w	r4, r1, #1
 80a2466:	d10e      	bne.n	80a2486 <_Z16_fetch_usbserialv+0x36>
 80a2468:	4628      	mov	r0, r5
 80a246a:	f7fd fe1c 	bl	80a00a6 <__cxa_guard_acquire>
 80a246e:	b150      	cbz	r0, 80a2486 <_Z16_fetch_usbserialv+0x36>
 80a2470:	4621      	mov	r1, r4
 80a2472:	aa01      	add	r2, sp, #4
 80a2474:	4806      	ldr	r0, [pc, #24]	; (80a2490 <_Z16_fetch_usbserialv+0x40>)
 80a2476:	f7ff ffb7 	bl	80a23e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a247a:	4628      	mov	r0, r5
 80a247c:	f7fd fe18 	bl	80a00b0 <__cxa_guard_release>
 80a2480:	4804      	ldr	r0, [pc, #16]	; (80a2494 <_Z16_fetch_usbserialv+0x44>)
 80a2482:	f000 ff5d 	bl	80a3340 <atexit>
	return _usbserial;
}
 80a2486:	4802      	ldr	r0, [pc, #8]	; (80a2490 <_Z16_fetch_usbserialv+0x40>)
 80a2488:	b007      	add	sp, #28
 80a248a:	bd30      	pop	{r4, r5, pc}
 80a248c:	200002e4 	.word	0x200002e4
 80a2490:	200002ec 	.word	0x200002ec
 80a2494:	080a2371 	.word	0x080a2371

080a2498 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2498:	b510      	push	{r4, lr}
 80a249a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a249c:	2214      	movs	r2, #20
 80a249e:	2100      	movs	r1, #0
 80a24a0:	f000 ff76 	bl	80a3390 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a24a4:	4b05      	ldr	r3, [pc, #20]	; (80a24bc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a24a6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a24a8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a24aa:	4b05      	ldr	r3, [pc, #20]	; (80a24c0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a24ac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a24ae:	f240 1301 	movw	r3, #257	; 0x101
 80a24b2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a24b4:	2381      	movs	r3, #129	; 0x81
 80a24b6:	8223      	strh	r3, [r4, #16]
}
 80a24b8:	bd10      	pop	{r4, pc}
 80a24ba:	bf00      	nop
 80a24bc:	20000496 	.word	0x20000496
 80a24c0:	20000597 	.word	0x20000597

080a24c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a24c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24c6:	4c0e      	ldr	r4, [pc, #56]	; (80a2500 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a24c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a24ca:	a801      	add	r0, sp, #4
 80a24cc:	f7ff ffe4 	bl	80a2498 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24d0:	7823      	ldrb	r3, [r4, #0]
 80a24d2:	f3bf 8f5b 	dmb	ish
 80a24d6:	07db      	lsls	r3, r3, #31
 80a24d8:	d40e      	bmi.n	80a24f8 <_Z17_fetch_usbserial1v+0x34>
 80a24da:	4620      	mov	r0, r4
 80a24dc:	f7fd fde3 	bl	80a00a6 <__cxa_guard_acquire>
 80a24e0:	b150      	cbz	r0, 80a24f8 <_Z17_fetch_usbserial1v+0x34>
 80a24e2:	2101      	movs	r1, #1
 80a24e4:	aa01      	add	r2, sp, #4
 80a24e6:	4807      	ldr	r0, [pc, #28]	; (80a2504 <_Z17_fetch_usbserial1v+0x40>)
 80a24e8:	f7ff ff7e 	bl	80a23e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24ec:	4620      	mov	r0, r4
 80a24ee:	f7fd fddf 	bl	80a00b0 <__cxa_guard_release>
 80a24f2:	4805      	ldr	r0, [pc, #20]	; (80a2508 <_Z17_fetch_usbserial1v+0x44>)
 80a24f4:	f000 ff24 	bl	80a3340 <atexit>
  return _usbserial1;
}
 80a24f8:	4802      	ldr	r0, [pc, #8]	; (80a2504 <_Z17_fetch_usbserial1v+0x40>)
 80a24fa:	b006      	add	sp, #24
 80a24fc:	bd10      	pop	{r4, pc}
 80a24fe:	bf00      	nop
 80a2500:	200002e8 	.word	0x200002e8
 80a2504:	20000300 	.word	0x20000300
 80a2508:	080a23e7 	.word	0x080a23e7

080a250c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a250c:	2200      	movs	r2, #0
 80a250e:	6840      	ldr	r0, [r0, #4]
 80a2510:	4611      	mov	r1, r2
 80a2512:	f7ff b8e9 	b.w	80a16e8 <network_ready>

080a2516 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2516:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2518:	4615      	mov	r5, r2
 80a251a:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a251c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a251e:	460e      	mov	r6, r1
 80a2520:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2522:	2100      	movs	r1, #0
 80a2524:	a803      	add	r0, sp, #12
 80a2526:	f000 ff33 	bl	80a3390 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a252a:	4628      	mov	r0, r5
 80a252c:	f000 ff6e 	bl	80a340c <strlen>
 80a2530:	2700      	movs	r7, #0
 80a2532:	b281      	uxth	r1, r0
 80a2534:	6873      	ldr	r3, [r6, #4]
 80a2536:	4628      	mov	r0, r5
 80a2538:	9700      	str	r7, [sp, #0]
 80a253a:	aa03      	add	r2, sp, #12
 80a253c:	f7ff f858 	bl	80a15f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2540:	b130      	cbz	r0, 80a2550 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2542:	4639      	mov	r1, r7
 80a2544:	4620      	mov	r0, r4
 80a2546:	f7ff f9f5 	bl	80a1934 <_ZN9IPAddressC1Em>
    }
 80a254a:	4620      	mov	r0, r4
 80a254c:	b009      	add	sp, #36	; 0x24
 80a254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2550:	4620      	mov	r0, r4
 80a2552:	a903      	add	r1, sp, #12
 80a2554:	f7ff f9dc 	bl	80a1910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2558:	e7f7      	b.n	80a254a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a255a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a255a:	2200      	movs	r2, #0
 80a255c:	6840      	ldr	r0, [r0, #4]
 80a255e:	4611      	mov	r1, r2
 80a2560:	f7ff b8e2 	b.w	80a1728 <network_listening>

080a2564 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2564:	2200      	movs	r2, #0
 80a2566:	6840      	ldr	r0, [r0, #4]
 80a2568:	4611      	mov	r1, r2
 80a256a:	f7ff b8ed 	b.w	80a1748 <network_get_listen_timeout>

080a256e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a256e:	2200      	movs	r2, #0
 80a2570:	6840      	ldr	r0, [r0, #4]
 80a2572:	f7ff b8e1 	b.w	80a1738 <network_set_listen_timeout>

080a2576 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2576:	2200      	movs	r2, #0
 80a2578:	6840      	ldr	r0, [r0, #4]
 80a257a:	f081 0101 	eor.w	r1, r1, #1
 80a257e:	f7ff b8cb 	b.w	80a1718 <network_listen>

080a2582 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2582:	2300      	movs	r3, #0
 80a2584:	6840      	ldr	r0, [r0, #4]
 80a2586:	461a      	mov	r2, r3
 80a2588:	4619      	mov	r1, r3
 80a258a:	f7ff b8bd 	b.w	80a1708 <network_off>

080a258e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a258e:	2300      	movs	r3, #0
 80a2590:	6840      	ldr	r0, [r0, #4]
 80a2592:	461a      	mov	r2, r3
 80a2594:	4619      	mov	r1, r3
 80a2596:	f7ff b8af 	b.w	80a16f8 <network_on>

080a259a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a259a:	2200      	movs	r2, #0
 80a259c:	6840      	ldr	r0, [r0, #4]
 80a259e:	4611      	mov	r1, r2
 80a25a0:	f7ff b892 	b.w	80a16c8 <network_connecting>

080a25a4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a25a4:	2200      	movs	r2, #0
 80a25a6:	2102      	movs	r1, #2
 80a25a8:	6840      	ldr	r0, [r0, #4]
 80a25aa:	f7ff b895 	b.w	80a16d8 <network_disconnect>

080a25ae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a25ae:	2300      	movs	r3, #0
 80a25b0:	6840      	ldr	r0, [r0, #4]
 80a25b2:	461a      	mov	r2, r3
 80a25b4:	f7ff b880 	b.w	80a16b8 <network_connect>

080a25b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a25b8:	2204      	movs	r2, #4
 80a25ba:	4b02      	ldr	r3, [pc, #8]	; (80a25c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a25bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a25be:	4a02      	ldr	r2, [pc, #8]	; (80a25c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a25c0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a25c2:	4770      	bx	lr
 80a25c4:	20000618 	.word	0x20000618
 80a25c8:	080a3850 	.word	0x080a3850

080a25cc <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a25cc:	1e93      	subs	r3, r2, #2
 80a25ce:	2b22      	cmp	r3, #34	; 0x22
 80a25d0:	f04f 0300 	mov.w	r3, #0
{
 80a25d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a25d8:	b08c      	sub	sp, #48	; 0x30
 80a25da:	460d      	mov	r5, r1
 80a25dc:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a25de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a25e2:	d926      	bls.n	80a2632 <ltoa+0x66>

      if (10 == base && N < 0L)
 80a25e4:	2800      	cmp	r0, #0
 80a25e6:	da29      	bge.n	80a263c <ltoa+0x70>
      {
            *head++ = '-';
 80a25e8:	462e      	mov	r6, r5
 80a25ea:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a25ec:	240a      	movs	r4, #10
            *head++ = '-';
 80a25ee:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a25f2:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a25f4:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a25f8:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a25fc:	4622      	mov	r2, r4
 80a25fe:	4601      	mov	r1, r0
 80a2600:	a801      	add	r0, sp, #4
 80a2602:	f000 fea3 	bl	80a334c <ldiv>
 80a2606:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2608:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a260a:	2b09      	cmp	r3, #9
 80a260c:	bfcc      	ite	gt
 80a260e:	2237      	movgt	r2, #55	; 0x37
 80a2610:	2230      	movle	r2, #48	; 0x30
 80a2612:	4413      	add	r3, r2
 80a2614:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a2618:	f108 0801 	add.w	r8, r8, #1
 80a261c:	2800      	cmp	r0, #0
 80a261e:	d1ed      	bne.n	80a25fc <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a2620:	4642      	mov	r2, r8
 80a2622:	4630      	mov	r0, r6
 80a2624:	1c79      	adds	r1, r7, #1
 80a2626:	f000 fea5 	bl	80a3374 <memcpy>
      return str;
}
 80a262a:	4628      	mov	r0, r5
 80a262c:	b00c      	add	sp, #48	; 0x30
 80a262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a2632:	2a0a      	cmp	r2, #10
 80a2634:	d0d6      	beq.n	80a25e4 <ltoa+0x18>
      if (uarg)
 80a2636:	b118      	cbz	r0, 80a2640 <ltoa+0x74>
 80a2638:	462e      	mov	r6, r5
 80a263a:	e7db      	b.n	80a25f4 <ltoa+0x28>
 80a263c:	240a      	movs	r4, #10
 80a263e:	e7fa      	b.n	80a2636 <ltoa+0x6a>
      else  *tail-- = '0';
 80a2640:	2330      	movs	r3, #48	; 0x30
 80a2642:	462e      	mov	r6, r5
      int i = 2;
 80a2644:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a2648:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a264c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a2650:	e7e6      	b.n	80a2620 <ltoa+0x54>
	...

080a2654 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2654:	4b01      	ldr	r3, [pc, #4]	; (80a265c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2656:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2658:	4770      	bx	lr
 80a265a:	bf00      	nop
 80a265c:	2000002c 	.word	0x2000002c

080a2660 <serialEventRun>:
{
 80a2660:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2662:	4b13      	ldr	r3, [pc, #76]	; (80a26b0 <serialEventRun+0x50>)
 80a2664:	b143      	cbz	r3, 80a2678 <serialEventRun+0x18>
 80a2666:	f7ff fef3 	bl	80a2450 <_Z16_fetch_usbserialv>
 80a266a:	6803      	ldr	r3, [r0, #0]
 80a266c:	691b      	ldr	r3, [r3, #16]
 80a266e:	4798      	blx	r3
 80a2670:	2800      	cmp	r0, #0
 80a2672:	dd01      	ble.n	80a2678 <serialEventRun+0x18>
        serialEvent();
 80a2674:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2678:	4b0e      	ldr	r3, [pc, #56]	; (80a26b4 <serialEventRun+0x54>)
 80a267a:	b143      	cbz	r3, 80a268e <serialEventRun+0x2e>
 80a267c:	f7ff fe52 	bl	80a2324 <_Z22__fetch_global_Serial1v>
 80a2680:	6803      	ldr	r3, [r0, #0]
 80a2682:	691b      	ldr	r3, [r3, #16]
 80a2684:	4798      	blx	r3
 80a2686:	2800      	cmp	r0, #0
 80a2688:	dd01      	ble.n	80a268e <serialEventRun+0x2e>
        serialEvent1();
 80a268a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a268e:	4b0a      	ldr	r3, [pc, #40]	; (80a26b8 <serialEventRun+0x58>)
 80a2690:	b10b      	cbz	r3, 80a2696 <serialEventRun+0x36>
 80a2692:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2696:	4b09      	ldr	r3, [pc, #36]	; (80a26bc <serialEventRun+0x5c>)
 80a2698:	b143      	cbz	r3, 80a26ac <serialEventRun+0x4c>
 80a269a:	f7ff ff13 	bl	80a24c4 <_Z17_fetch_usbserial1v>
 80a269e:	6803      	ldr	r3, [r0, #0]
 80a26a0:	691b      	ldr	r3, [r3, #16]
 80a26a2:	4798      	blx	r3
 80a26a4:	2800      	cmp	r0, #0
 80a26a6:	dd01      	ble.n	80a26ac <serialEventRun+0x4c>
        usbSerialEvent1();
 80a26a8:	f3af 8000 	nop.w
}
 80a26ac:	bd08      	pop	{r3, pc}
 80a26ae:	bf00      	nop
	...

080a26c0 <_post_loop>:
{
 80a26c0:	b508      	push	{r3, lr}
	serialEventRun();
 80a26c2:	f7ff ffcd 	bl	80a2660 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a26c6:	f7fe fe2f 	bl	80a1328 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a26ca:	4b01      	ldr	r3, [pc, #4]	; (80a26d0 <_post_loop+0x10>)
 80a26cc:	6018      	str	r0, [r3, #0]
}
 80a26ce:	bd08      	pop	{r3, pc}
 80a26d0:	20000638 	.word	0x20000638

080a26d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a26d4:	4805      	ldr	r0, [pc, #20]	; (80a26ec <_Z33system_initialize_user_backup_ramv+0x18>)
 80a26d6:	4a06      	ldr	r2, [pc, #24]	; (80a26f0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a26d8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a26da:	1a12      	subs	r2, r2, r0
 80a26dc:	4905      	ldr	r1, [pc, #20]	; (80a26f4 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a26de:	f000 fe49 	bl	80a3374 <memcpy>
    __backup_sram_signature = signature;
 80a26e2:	4b05      	ldr	r3, [pc, #20]	; (80a26f8 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a26e4:	4a05      	ldr	r2, [pc, #20]	; (80a26fc <_Z33system_initialize_user_backup_ramv+0x28>)
 80a26e6:	601a      	str	r2, [r3, #0]
}
 80a26e8:	bd08      	pop	{r3, pc}
 80a26ea:	bf00      	nop
 80a26ec:	40024000 	.word	0x40024000
 80a26f0:	40024004 	.word	0x40024004
 80a26f4:	080a39a0 	.word	0x080a39a0
 80a26f8:	40024000 	.word	0x40024000
 80a26fc:	9a271c1e 	.word	0x9a271c1e

080a2700 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2700:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2702:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2704:	461a      	mov	r2, r3
 80a2706:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a270a:	9300      	str	r3, [sp, #0]
 80a270c:	f7fe ffaa 	bl	80a1664 <system_ctrl_set_result>
}
 80a2710:	b003      	add	sp, #12
 80a2712:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2718 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2718:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a271a:	8843      	ldrh	r3, [r0, #2]
 80a271c:	2b0a      	cmp	r3, #10
 80a271e:	d008      	beq.n	80a2732 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2720:	2b50      	cmp	r3, #80	; 0x50
 80a2722:	d10b      	bne.n	80a273c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2724:	4b09      	ldr	r3, [pc, #36]	; (80a274c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2726:	681b      	ldr	r3, [r3, #0]
 80a2728:	b14b      	cbz	r3, 80a273e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a272a:	b003      	add	sp, #12
 80a272c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2730:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2732:	f7ff ffe5 	bl	80a2700 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2736:	b003      	add	sp, #12
 80a2738:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a273c:	2300      	movs	r3, #0
 80a273e:	461a      	mov	r2, r3
 80a2740:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2744:	9300      	str	r3, [sp, #0]
 80a2746:	f7fe ff8d 	bl	80a1664 <system_ctrl_set_result>
}
 80a274a:	e7f4      	b.n	80a2736 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a274c:	20000624 	.word	0x20000624

080a2750 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2750:	2100      	movs	r1, #0
{
 80a2752:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2754:	4811      	ldr	r0, [pc, #68]	; (80a279c <module_user_init_hook+0x4c>)
 80a2756:	f7ff f827 	bl	80a17a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a275a:	4b11      	ldr	r3, [pc, #68]	; (80a27a0 <module_user_init_hook+0x50>)
 80a275c:	681a      	ldr	r2, [r3, #0]
 80a275e:	4b11      	ldr	r3, [pc, #68]	; (80a27a4 <module_user_init_hook+0x54>)
 80a2760:	429a      	cmp	r2, r3
 80a2762:	bf0c      	ite	eq
 80a2764:	2201      	moveq	r2, #1
 80a2766:	2200      	movne	r2, #0
 80a2768:	4b0f      	ldr	r3, [pc, #60]	; (80a27a8 <module_user_init_hook+0x58>)
 80a276a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a276c:	d001      	beq.n	80a2772 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a276e:	f7ff ffb1 	bl	80a26d4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2772:	f7fe fdd1 	bl	80a1318 <HAL_RNG_GetRandomNumber>
 80a2776:	4604      	mov	r4, r0
    srand(seed);
 80a2778:	f000 fe12 	bl	80a33a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a277c:	4b0b      	ldr	r3, [pc, #44]	; (80a27ac <module_user_init_hook+0x5c>)
 80a277e:	b113      	cbz	r3, 80a2786 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2780:	4620      	mov	r0, r4
 80a2782:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2786:	2100      	movs	r1, #0
 80a2788:	4808      	ldr	r0, [pc, #32]	; (80a27ac <module_user_init_hook+0x5c>)
 80a278a:	f7fe ff8d 	bl	80a16a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2792:	2100      	movs	r1, #0
 80a2794:	4806      	ldr	r0, [pc, #24]	; (80a27b0 <module_user_init_hook+0x60>)
 80a2796:	f7fe bf5b 	b.w	80a1650 <system_ctrl_set_app_request_handler>
 80a279a:	bf00      	nop
 80a279c:	080a2655 	.word	0x080a2655
 80a27a0:	40024000 	.word	0x40024000
 80a27a4:	9a271c1e 	.word	0x9a271c1e
 80a27a8:	20000620 	.word	0x20000620
 80a27ac:	00000000 	.word	0x00000000
 80a27b0:	080a2719 	.word	0x080a2719

080a27b4 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a27b4:	4b02      	ldr	r3, [pc, #8]	; (80a27c0 <__tcf_0+0xc>)
 80a27b6:	6898      	ldr	r0, [r3, #8]
 80a27b8:	b108      	cbz	r0, 80a27be <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a27ba:	f7fe bda5 	b.w	80a1308 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a27be:	4770      	bx	lr
 80a27c0:	2000062c 	.word	0x2000062c

080a27c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a27c4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a27c6:	b570      	push	{r4, r5, r6, lr}
 80a27c8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a27ca:	d901      	bls.n	80a27d0 <pinAvailable+0xc>
    return false;
 80a27cc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a27ce:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a27d0:	f1a0 030d 	sub.w	r3, r0, #13
 80a27d4:	2b02      	cmp	r3, #2
 80a27d6:	d90b      	bls.n	80a27f0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a27d8:	2801      	cmp	r0, #1
 80a27da:	d824      	bhi.n	80a2826 <pinAvailable+0x62>
 80a27dc:	f000 f878 	bl	80a28d0 <_Z19__fetch_global_Wirev>
 80a27e0:	2100      	movs	r1, #0
 80a27e2:	7c00      	ldrb	r0, [r0, #16]
 80a27e4:	f7fe fe10 	bl	80a1408 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a27e8:	f080 0001 	eor.w	r0, r0, #1
 80a27ec:	b2c0      	uxtb	r0, r0
 80a27ee:	e7ee      	b.n	80a27ce <pinAvailable+0xa>
 80a27f0:	4e12      	ldr	r6, [pc, #72]	; (80a283c <pinAvailable+0x78>)
 80a27f2:	7831      	ldrb	r1, [r6, #0]
 80a27f4:	f3bf 8f5b 	dmb	ish
 80a27f8:	f011 0501 	ands.w	r5, r1, #1
 80a27fc:	d10d      	bne.n	80a281a <pinAvailable+0x56>
 80a27fe:	4630      	mov	r0, r6
 80a2800:	f7fd fc51 	bl	80a00a6 <__cxa_guard_acquire>
 80a2804:	b148      	cbz	r0, 80a281a <pinAvailable+0x56>
 80a2806:	4629      	mov	r1, r5
 80a2808:	480d      	ldr	r0, [pc, #52]	; (80a2840 <pinAvailable+0x7c>)
 80a280a:	f7ff f9af 	bl	80a1b6c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a280e:	4630      	mov	r0, r6
 80a2810:	f7fd fc4e 	bl	80a00b0 <__cxa_guard_release>
 80a2814:	480b      	ldr	r0, [pc, #44]	; (80a2844 <pinAvailable+0x80>)
 80a2816:	f000 fd93 	bl	80a3340 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a281a:	4b09      	ldr	r3, [pc, #36]	; (80a2840 <pinAvailable+0x7c>)
 80a281c:	7818      	ldrb	r0, [r3, #0]
 80a281e:	f7fe fe57 	bl	80a14d0 <hal_spi_is_enabled>
 80a2822:	2800      	cmp	r0, #0
 80a2824:	d1d2      	bne.n	80a27cc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2826:	3c12      	subs	r4, #18
 80a2828:	2c01      	cmp	r4, #1
 80a282a:	d805      	bhi.n	80a2838 <pinAvailable+0x74>
 80a282c:	f7ff fd7a 	bl	80a2324 <_Z22__fetch_global_Serial1v>
 80a2830:	7c00      	ldrb	r0, [r0, #16]
 80a2832:	f7fe fe85 	bl	80a1540 <hal_usart_is_enabled>
 80a2836:	e7d7      	b.n	80a27e8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2838:	2001      	movs	r0, #1
 80a283a:	e7c8      	b.n	80a27ce <pinAvailable+0xa>
 80a283c:	20000628 	.word	0x20000628
 80a2840:	2000062c 	.word	0x2000062c
 80a2844:	080a27b5 	.word	0x080a27b5

080a2848 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2848:	2817      	cmp	r0, #23
{
 80a284a:	b538      	push	{r3, r4, r5, lr}
 80a284c:	4604      	mov	r4, r0
 80a284e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2850:	d80a      	bhi.n	80a2868 <pinMode+0x20>
 80a2852:	29ff      	cmp	r1, #255	; 0xff
 80a2854:	d008      	beq.n	80a2868 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2856:	f7ff ffb5 	bl	80a27c4 <pinAvailable>
 80a285a:	b128      	cbz	r0, 80a2868 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a285c:	4629      	mov	r1, r5
 80a285e:	4620      	mov	r0, r4
}
 80a2860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2864:	f7fe bd78 	b.w	80a1358 <HAL_Pin_Mode>
}
 80a2868:	bd38      	pop	{r3, r4, r5, pc}

080a286a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a286a:	b538      	push	{r3, r4, r5, lr}
 80a286c:	4604      	mov	r4, r0
 80a286e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2870:	f7fe fd7a 	bl	80a1368 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2874:	28ff      	cmp	r0, #255	; 0xff
 80a2876:	d010      	beq.n	80a289a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2878:	2806      	cmp	r0, #6
 80a287a:	d804      	bhi.n	80a2886 <digitalWrite+0x1c>
 80a287c:	234d      	movs	r3, #77	; 0x4d
 80a287e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2882:	07c3      	lsls	r3, r0, #31
 80a2884:	d409      	bmi.n	80a289a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2886:	4620      	mov	r0, r4
 80a2888:	f7ff ff9c 	bl	80a27c4 <pinAvailable>
 80a288c:	b128      	cbz	r0, 80a289a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a288e:	4629      	mov	r1, r5
 80a2890:	4620      	mov	r0, r4
}
 80a2892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2896:	f7fe bd6f 	b.w	80a1378 <HAL_GPIO_Write>
}
 80a289a:	bd38      	pop	{r3, r4, r5, pc}

080a289c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a289c:	4770      	bx	lr
	...

080a28a0 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a28a0:	2300      	movs	r3, #0
{
 80a28a2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a28a4:	2520      	movs	r5, #32
 80a28a6:	8043      	strh	r3, [r0, #2]
 80a28a8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28aa:	4e08      	ldr	r6, [pc, #32]	; (80a28cc <_Z17acquireWireBufferv+0x2c>)
{
 80a28ac:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a28ae:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28b0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a28b2:	6085      	str	r5, [r0, #8]
 80a28b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28b6:	4628      	mov	r0, r5
 80a28b8:	f000 f83e 	bl	80a2938 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28bc:	4631      	mov	r1, r6
	};
 80a28be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a28c0:	4628      	mov	r0, r5
 80a28c2:	f000 f839 	bl	80a2938 <_ZnajRKSt9nothrow_t>
	};
 80a28c6:	60e0      	str	r0, [r4, #12]
}
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	bd70      	pop	{r4, r5, r6, pc}
 80a28cc:	080a3884 	.word	0x080a3884

080a28d0 <_Z19__fetch_global_Wirev>:
{
 80a28d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a28d2:	4d0e      	ldr	r5, [pc, #56]	; (80a290c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a28d4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a28d6:	7829      	ldrb	r1, [r5, #0]
 80a28d8:	f3bf 8f5b 	dmb	ish
 80a28dc:	f011 0401 	ands.w	r4, r1, #1
 80a28e0:	d111      	bne.n	80a2906 <_Z19__fetch_global_Wirev+0x36>
 80a28e2:	4628      	mov	r0, r5
 80a28e4:	f7fd fbdf 	bl	80a00a6 <__cxa_guard_acquire>
 80a28e8:	b168      	cbz	r0, 80a2906 <_Z19__fetch_global_Wirev+0x36>
 80a28ea:	a801      	add	r0, sp, #4
 80a28ec:	f7ff ffd8 	bl	80a28a0 <_Z17acquireWireBufferv>
 80a28f0:	4621      	mov	r1, r4
 80a28f2:	aa01      	add	r2, sp, #4
 80a28f4:	4806      	ldr	r0, [pc, #24]	; (80a2910 <_Z19__fetch_global_Wirev+0x40>)
 80a28f6:	f7fe ff8f 	bl	80a1818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a28fa:	4628      	mov	r0, r5
 80a28fc:	f7fd fbd8 	bl	80a00b0 <__cxa_guard_release>
 80a2900:	4804      	ldr	r0, [pc, #16]	; (80a2914 <_Z19__fetch_global_Wirev+0x44>)
 80a2902:	f000 fd1d 	bl	80a3340 <atexit>
	return wire;
}
 80a2906:	4802      	ldr	r0, [pc, #8]	; (80a2910 <_Z19__fetch_global_Wirev+0x40>)
 80a2908:	b007      	add	sp, #28
 80a290a:	bd30      	pop	{r4, r5, pc}
 80a290c:	2000063c 	.word	0x2000063c
 80a2910:	20000640 	.word	0x20000640
 80a2914:	080a289d 	.word	0x080a289d

080a2918 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2918:	2300      	movs	r3, #0
 80a291a:	b507      	push	{r0, r1, r2, lr}
 80a291c:	461a      	mov	r2, r3
 80a291e:	4619      	mov	r1, r3
 80a2920:	9300      	str	r3, [sp, #0]
 80a2922:	4803      	ldr	r0, [pc, #12]	; (80a2930 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2924:	f7ff f81c 	bl	80a1960 <_ZN9IPAddressC1Ehhhh>
 80a2928:	b003      	add	sp, #12
 80a292a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a292e:	bf00      	nop
 80a2930:	20000654 	.word	0x20000654

080a2934 <_ZdlPvj>:
 80a2934:	f7fd bbb3 	b.w	80a009e <_ZdlPv>

080a2938 <_ZnajRKSt9nothrow_t>:
 80a2938:	f7fd bbaf 	b.w	80a009a <_Znaj>

080a293c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a293c:	4901      	ldr	r1, [pc, #4]	; (80a2944 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a293e:	f000 b8fb 	b.w	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a2942:	bf00      	nop
 80a2944:	080a38a0 	.word	0x080a38a0

080a2948 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a2948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a294a:	2400      	movs	r4, #0
 80a294c:	2310      	movs	r3, #16
 80a294e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a2952:	6803      	ldr	r3, [r0, #0]
 80a2954:	4615      	mov	r5, r2
 80a2956:	699e      	ldr	r6, [r3, #24]
 80a2958:	6812      	ldr	r2, [r2, #0]
 80a295a:	466b      	mov	r3, sp
 80a295c:	9400      	str	r4, [sp, #0]
 80a295e:	f88d 4004 	strb.w	r4, [sp, #4]
 80a2962:	47b0      	blx	r6
 80a2964:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a2968:	f003 0306 	and.w	r3, r3, #6
 80a296c:	2b06      	cmp	r3, #6
 80a296e:	bf09      	itett	eq
 80a2970:	2001      	moveq	r0, #1
 80a2972:	4620      	movne	r0, r4
 80a2974:	9b00      	ldreq	r3, [sp, #0]
 80a2976:	602b      	streq	r3, [r5, #0]
 80a2978:	b004      	add	sp, #16
 80a297a:	bd70      	pop	{r4, r5, r6, pc}

080a297c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a297c:	9800      	ldr	r0, [sp, #0]
 80a297e:	4290      	cmp	r0, r2
 80a2980:	bf14      	ite	ne
 80a2982:	2001      	movne	r0, #1
 80a2984:	2006      	moveq	r0, #6
 80a2986:	4770      	bx	lr

080a2988 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a2988:	b510      	push	{r4, lr}
 80a298a:	4604      	mov	r4, r0
 80a298c:	4b02      	ldr	r3, [pc, #8]	; (80a2998 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a298e:	6003      	str	r3, [r0, #0]
 80a2990:	f000 f8cf 	bl	80a2b32 <_ZNSt9type_infoD1Ev>
 80a2994:	4620      	mov	r0, r4
 80a2996:	bd10      	pop	{r4, pc}
 80a2998:	080a38e0 	.word	0x080a38e0

080a299c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a299c:	b510      	push	{r4, lr}
 80a299e:	4604      	mov	r4, r0
 80a29a0:	f7ff fff2 	bl	80a2988 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a29a4:	4620      	mov	r0, r4
 80a29a6:	2108      	movs	r1, #8
 80a29a8:	f7ff ffc4 	bl	80a2934 <_ZdlPvj>
 80a29ac:	4620      	mov	r0, r4
 80a29ae:	bd10      	pop	{r4, pc}

080a29b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a29b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a29b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a29b8:	461f      	mov	r7, r3
 80a29ba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a29be:	4598      	cmp	r8, r3
 80a29c0:	4606      	mov	r6, r0
 80a29c2:	4615      	mov	r5, r2
 80a29c4:	d107      	bne.n	80a29d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a29c6:	9907      	ldr	r1, [sp, #28]
 80a29c8:	f000 f8b6 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a29cc:	b118      	cbz	r0, 80a29d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a29ce:	7165      	strb	r5, [r4, #5]
 80a29d0:	2000      	movs	r0, #0
 80a29d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a29d6:	4639      	mov	r1, r7
 80a29d8:	4630      	mov	r0, r6
 80a29da:	f000 f8ad 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a29de:	2800      	cmp	r0, #0
 80a29e0:	d0f6      	beq.n	80a29d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a29e2:	2301      	movs	r3, #1
 80a29e4:	f8c4 8000 	str.w	r8, [r4]
 80a29e8:	7125      	strb	r5, [r4, #4]
 80a29ea:	71a3      	strb	r3, [r4, #6]
 80a29ec:	e7f0      	b.n	80a29d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a29ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a29ee:	b538      	push	{r3, r4, r5, lr}
 80a29f0:	4615      	mov	r5, r2
 80a29f2:	461c      	mov	r4, r3
 80a29f4:	f000 f8a0 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a29f8:	b120      	cbz	r0, 80a2a04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a29fa:	2308      	movs	r3, #8
 80a29fc:	60e3      	str	r3, [r4, #12]
 80a29fe:	2306      	movs	r3, #6
 80a2a00:	6025      	str	r5, [r4, #0]
 80a2a02:	7123      	strb	r3, [r4, #4]
 80a2a04:	bd38      	pop	{r3, r4, r5, pc}

080a2a06 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a2a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a0a:	4605      	mov	r5, r0
 80a2a0c:	460c      	mov	r4, r1
 80a2a0e:	4616      	mov	r6, r2
 80a2a10:	461f      	mov	r7, r3
 80a2a12:	f000 f891 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a2a16:	b948      	cbnz	r0, 80a2a2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a2a18:	2f03      	cmp	r7, #3
 80a2a1a:	d807      	bhi.n	80a2a2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a2a1c:	6823      	ldr	r3, [r4, #0]
 80a2a1e:	4632      	mov	r2, r6
 80a2a20:	4629      	mov	r1, r5
 80a2a22:	4620      	mov	r0, r4
 80a2a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a28:	695b      	ldr	r3, [r3, #20]
 80a2a2a:	4718      	bx	r3
 80a2a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2a30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a2a30:	b510      	push	{r4, lr}
 80a2a32:	4604      	mov	r4, r0
 80a2a34:	4b02      	ldr	r3, [pc, #8]	; (80a2a40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a2a36:	6003      	str	r3, [r0, #0]
 80a2a38:	f7ff ffa6 	bl	80a2988 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a2a3c:	4620      	mov	r0, r4
 80a2a3e:	bd10      	pop	{r4, pc}
 80a2a40:	080a3940 	.word	0x080a3940

080a2a44 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a2a44:	b510      	push	{r4, lr}
 80a2a46:	4604      	mov	r4, r0
 80a2a48:	f7ff fff2 	bl	80a2a30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a2a4c:	4620      	mov	r0, r4
 80a2a4e:	210c      	movs	r1, #12
 80a2a50:	f7ff ff70 	bl	80a2934 <_ZdlPvj>
 80a2a54:	4620      	mov	r0, r4
 80a2a56:	bd10      	pop	{r4, pc}

080a2a58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a2a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a5c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2a60:	4606      	mov	r6, r0
 80a2a62:	4590      	cmp	r8, r2
 80a2a64:	460f      	mov	r7, r1
 80a2a66:	4615      	mov	r5, r2
 80a2a68:	461c      	mov	r4, r3
 80a2a6a:	d00b      	beq.n	80a2a84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a2a6c:	68b0      	ldr	r0, [r6, #8]
 80a2a6e:	462a      	mov	r2, r5
 80a2a70:	6803      	ldr	r3, [r0, #0]
 80a2a72:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2a76:	6a1e      	ldr	r6, [r3, #32]
 80a2a78:	4639      	mov	r1, r7
 80a2a7a:	4623      	mov	r3, r4
 80a2a7c:	46b4      	mov	ip, r6
 80a2a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a82:	4760      	bx	ip
 80a2a84:	4619      	mov	r1, r3
 80a2a86:	f000 f857 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a2a8a:	2800      	cmp	r0, #0
 80a2a8c:	d0ee      	beq.n	80a2a6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a2a8e:	2006      	movs	r0, #6
 80a2a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2a94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a2a94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a98:	460d      	mov	r5, r1
 80a2a9a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a2a9e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a2aa2:	4619      	mov	r1, r3
 80a2aa4:	4681      	mov	r9, r0
 80a2aa6:	4617      	mov	r7, r2
 80a2aa8:	4698      	mov	r8, r3
 80a2aaa:	f000 f845 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a2aae:	b190      	cbz	r0, 80a2ad6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a2ab0:	2d00      	cmp	r5, #0
 80a2ab2:	6034      	str	r4, [r6, #0]
 80a2ab4:	7137      	strb	r7, [r6, #4]
 80a2ab6:	db09      	blt.n	80a2acc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a2ab8:	442c      	add	r4, r5
 80a2aba:	45a2      	cmp	sl, r4
 80a2abc:	bf0c      	ite	eq
 80a2abe:	2406      	moveq	r4, #6
 80a2ac0:	2401      	movne	r4, #1
 80a2ac2:	71b4      	strb	r4, [r6, #6]
 80a2ac4:	2000      	movs	r0, #0
 80a2ac6:	b001      	add	sp, #4
 80a2ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2acc:	3502      	adds	r5, #2
 80a2ace:	d1f9      	bne.n	80a2ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2ad0:	2301      	movs	r3, #1
 80a2ad2:	71b3      	strb	r3, [r6, #6]
 80a2ad4:	e7f6      	b.n	80a2ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2ad6:	4554      	cmp	r4, sl
 80a2ad8:	d106      	bne.n	80a2ae8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2ada:	4659      	mov	r1, fp
 80a2adc:	4648      	mov	r0, r9
 80a2ade:	f000 f82b 	bl	80a2b38 <_ZNKSt9type_infoeqERKS_>
 80a2ae2:	b108      	cbz	r0, 80a2ae8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2ae4:	7177      	strb	r7, [r6, #5]
 80a2ae6:	e7ed      	b.n	80a2ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2ae8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a2aec:	463a      	mov	r2, r7
 80a2aee:	6803      	ldr	r3, [r0, #0]
 80a2af0:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a2af4:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a2af8:	69dc      	ldr	r4, [r3, #28]
 80a2afa:	4629      	mov	r1, r5
 80a2afc:	4643      	mov	r3, r8
 80a2afe:	46a4      	mov	ip, r4
 80a2b00:	b001      	add	sp, #4
 80a2b02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2b06:	4760      	bx	ip

080a2b08 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a2b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b0c:	4607      	mov	r7, r0
 80a2b0e:	460c      	mov	r4, r1
 80a2b10:	4615      	mov	r5, r2
 80a2b12:	461e      	mov	r6, r3
 80a2b14:	f7ff ff6b 	bl	80a29ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a2b18:	b948      	cbnz	r0, 80a2b2e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a2b1a:	68b8      	ldr	r0, [r7, #8]
 80a2b1c:	462a      	mov	r2, r5
 80a2b1e:	6803      	ldr	r3, [r0, #0]
 80a2b20:	4621      	mov	r1, r4
 80a2b22:	699f      	ldr	r7, [r3, #24]
 80a2b24:	4633      	mov	r3, r6
 80a2b26:	46bc      	mov	ip, r7
 80a2b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b2c:	4760      	bx	ip
 80a2b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2b32 <_ZNSt9type_infoD1Ev>:
 80a2b32:	4770      	bx	lr

080a2b34 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a2b34:	2000      	movs	r0, #0
 80a2b36:	4770      	bx	lr

080a2b38 <_ZNKSt9type_infoeqERKS_>:
 80a2b38:	4281      	cmp	r1, r0
 80a2b3a:	b508      	push	{r3, lr}
 80a2b3c:	d00e      	beq.n	80a2b5c <_ZNKSt9type_infoeqERKS_+0x24>
 80a2b3e:	6840      	ldr	r0, [r0, #4]
 80a2b40:	7803      	ldrb	r3, [r0, #0]
 80a2b42:	2b2a      	cmp	r3, #42	; 0x2a
 80a2b44:	d00c      	beq.n	80a2b60 <_ZNKSt9type_infoeqERKS_+0x28>
 80a2b46:	6849      	ldr	r1, [r1, #4]
 80a2b48:	780b      	ldrb	r3, [r1, #0]
 80a2b4a:	2b2a      	cmp	r3, #42	; 0x2a
 80a2b4c:	bf08      	it	eq
 80a2b4e:	3101      	addeq	r1, #1
 80a2b50:	f000 fc4a 	bl	80a33e8 <strcmp>
 80a2b54:	fab0 f080 	clz	r0, r0
 80a2b58:	0940      	lsrs	r0, r0, #5
 80a2b5a:	bd08      	pop	{r3, pc}
 80a2b5c:	2001      	movs	r0, #1
 80a2b5e:	e7fc      	b.n	80a2b5a <_ZNKSt9type_infoeqERKS_+0x22>
 80a2b60:	2000      	movs	r0, #0
 80a2b62:	e7fa      	b.n	80a2b5a <_ZNKSt9type_infoeqERKS_+0x22>

080a2b64 <__aeabi_drsub>:
 80a2b64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2b68:	e002      	b.n	80a2b70 <__adddf3>
 80a2b6a:	bf00      	nop

080a2b6c <__aeabi_dsub>:
 80a2b6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2b70 <__adddf3>:
 80a2b70:	b530      	push	{r4, r5, lr}
 80a2b72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2b76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2b7a:	ea94 0f05 	teq	r4, r5
 80a2b7e:	bf08      	it	eq
 80a2b80:	ea90 0f02 	teqeq	r0, r2
 80a2b84:	bf1f      	itttt	ne
 80a2b86:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2b8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2b8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2b92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b96:	f000 80e2 	beq.w	80a2d5e <__adddf3+0x1ee>
 80a2b9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2b9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2ba2:	bfb8      	it	lt
 80a2ba4:	426d      	neglt	r5, r5
 80a2ba6:	dd0c      	ble.n	80a2bc2 <__adddf3+0x52>
 80a2ba8:	442c      	add	r4, r5
 80a2baa:	ea80 0202 	eor.w	r2, r0, r2
 80a2bae:	ea81 0303 	eor.w	r3, r1, r3
 80a2bb2:	ea82 0000 	eor.w	r0, r2, r0
 80a2bb6:	ea83 0101 	eor.w	r1, r3, r1
 80a2bba:	ea80 0202 	eor.w	r2, r0, r2
 80a2bbe:	ea81 0303 	eor.w	r3, r1, r3
 80a2bc2:	2d36      	cmp	r5, #54	; 0x36
 80a2bc4:	bf88      	it	hi
 80a2bc6:	bd30      	pophi	{r4, r5, pc}
 80a2bc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2bcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2bd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2bd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2bd8:	d002      	beq.n	80a2be0 <__adddf3+0x70>
 80a2bda:	4240      	negs	r0, r0
 80a2bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2be0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2be4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2be8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2bec:	d002      	beq.n	80a2bf4 <__adddf3+0x84>
 80a2bee:	4252      	negs	r2, r2
 80a2bf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2bf4:	ea94 0f05 	teq	r4, r5
 80a2bf8:	f000 80a7 	beq.w	80a2d4a <__adddf3+0x1da>
 80a2bfc:	f1a4 0401 	sub.w	r4, r4, #1
 80a2c00:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2c04:	db0d      	blt.n	80a2c22 <__adddf3+0xb2>
 80a2c06:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2c0a:	fa22 f205 	lsr.w	r2, r2, r5
 80a2c0e:	1880      	adds	r0, r0, r2
 80a2c10:	f141 0100 	adc.w	r1, r1, #0
 80a2c14:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2c18:	1880      	adds	r0, r0, r2
 80a2c1a:	fa43 f305 	asr.w	r3, r3, r5
 80a2c1e:	4159      	adcs	r1, r3
 80a2c20:	e00e      	b.n	80a2c40 <__adddf3+0xd0>
 80a2c22:	f1a5 0520 	sub.w	r5, r5, #32
 80a2c26:	f10e 0e20 	add.w	lr, lr, #32
 80a2c2a:	2a01      	cmp	r2, #1
 80a2c2c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2c30:	bf28      	it	cs
 80a2c32:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2c36:	fa43 f305 	asr.w	r3, r3, r5
 80a2c3a:	18c0      	adds	r0, r0, r3
 80a2c3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2c40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2c44:	d507      	bpl.n	80a2c56 <__adddf3+0xe6>
 80a2c46:	f04f 0e00 	mov.w	lr, #0
 80a2c4a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2c4e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2c52:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2c56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2c5a:	d31b      	bcc.n	80a2c94 <__adddf3+0x124>
 80a2c5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2c60:	d30c      	bcc.n	80a2c7c <__adddf3+0x10c>
 80a2c62:	0849      	lsrs	r1, r1, #1
 80a2c64:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2c68:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2c6c:	f104 0401 	add.w	r4, r4, #1
 80a2c70:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2c74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2c78:	f080 809a 	bcs.w	80a2db0 <__adddf3+0x240>
 80a2c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2c80:	bf08      	it	eq
 80a2c82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2c86:	f150 0000 	adcs.w	r0, r0, #0
 80a2c8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c8e:	ea41 0105 	orr.w	r1, r1, r5
 80a2c92:	bd30      	pop	{r4, r5, pc}
 80a2c94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2c98:	4140      	adcs	r0, r0
 80a2c9a:	eb41 0101 	adc.w	r1, r1, r1
 80a2c9e:	3c01      	subs	r4, #1
 80a2ca0:	bf28      	it	cs
 80a2ca2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2ca6:	d2e9      	bcs.n	80a2c7c <__adddf3+0x10c>
 80a2ca8:	f091 0f00 	teq	r1, #0
 80a2cac:	bf04      	itt	eq
 80a2cae:	4601      	moveq	r1, r0
 80a2cb0:	2000      	moveq	r0, #0
 80a2cb2:	fab1 f381 	clz	r3, r1
 80a2cb6:	bf08      	it	eq
 80a2cb8:	3320      	addeq	r3, #32
 80a2cba:	f1a3 030b 	sub.w	r3, r3, #11
 80a2cbe:	f1b3 0220 	subs.w	r2, r3, #32
 80a2cc2:	da0c      	bge.n	80a2cde <__adddf3+0x16e>
 80a2cc4:	320c      	adds	r2, #12
 80a2cc6:	dd08      	ble.n	80a2cda <__adddf3+0x16a>
 80a2cc8:	f102 0c14 	add.w	ip, r2, #20
 80a2ccc:	f1c2 020c 	rsb	r2, r2, #12
 80a2cd0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2cd4:	fa21 f102 	lsr.w	r1, r1, r2
 80a2cd8:	e00c      	b.n	80a2cf4 <__adddf3+0x184>
 80a2cda:	f102 0214 	add.w	r2, r2, #20
 80a2cde:	bfd8      	it	le
 80a2ce0:	f1c2 0c20 	rsble	ip, r2, #32
 80a2ce4:	fa01 f102 	lsl.w	r1, r1, r2
 80a2ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2cec:	bfdc      	itt	le
 80a2cee:	ea41 010c 	orrle.w	r1, r1, ip
 80a2cf2:	4090      	lslle	r0, r2
 80a2cf4:	1ae4      	subs	r4, r4, r3
 80a2cf6:	bfa2      	ittt	ge
 80a2cf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2cfc:	4329      	orrge	r1, r5
 80a2cfe:	bd30      	popge	{r4, r5, pc}
 80a2d00:	ea6f 0404 	mvn.w	r4, r4
 80a2d04:	3c1f      	subs	r4, #31
 80a2d06:	da1c      	bge.n	80a2d42 <__adddf3+0x1d2>
 80a2d08:	340c      	adds	r4, #12
 80a2d0a:	dc0e      	bgt.n	80a2d2a <__adddf3+0x1ba>
 80a2d0c:	f104 0414 	add.w	r4, r4, #20
 80a2d10:	f1c4 0220 	rsb	r2, r4, #32
 80a2d14:	fa20 f004 	lsr.w	r0, r0, r4
 80a2d18:	fa01 f302 	lsl.w	r3, r1, r2
 80a2d1c:	ea40 0003 	orr.w	r0, r0, r3
 80a2d20:	fa21 f304 	lsr.w	r3, r1, r4
 80a2d24:	ea45 0103 	orr.w	r1, r5, r3
 80a2d28:	bd30      	pop	{r4, r5, pc}
 80a2d2a:	f1c4 040c 	rsb	r4, r4, #12
 80a2d2e:	f1c4 0220 	rsb	r2, r4, #32
 80a2d32:	fa20 f002 	lsr.w	r0, r0, r2
 80a2d36:	fa01 f304 	lsl.w	r3, r1, r4
 80a2d3a:	ea40 0003 	orr.w	r0, r0, r3
 80a2d3e:	4629      	mov	r1, r5
 80a2d40:	bd30      	pop	{r4, r5, pc}
 80a2d42:	fa21 f004 	lsr.w	r0, r1, r4
 80a2d46:	4629      	mov	r1, r5
 80a2d48:	bd30      	pop	{r4, r5, pc}
 80a2d4a:	f094 0f00 	teq	r4, #0
 80a2d4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2d52:	bf06      	itte	eq
 80a2d54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2d58:	3401      	addeq	r4, #1
 80a2d5a:	3d01      	subne	r5, #1
 80a2d5c:	e74e      	b.n	80a2bfc <__adddf3+0x8c>
 80a2d5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2d62:	bf18      	it	ne
 80a2d64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2d68:	d029      	beq.n	80a2dbe <__adddf3+0x24e>
 80a2d6a:	ea94 0f05 	teq	r4, r5
 80a2d6e:	bf08      	it	eq
 80a2d70:	ea90 0f02 	teqeq	r0, r2
 80a2d74:	d005      	beq.n	80a2d82 <__adddf3+0x212>
 80a2d76:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2d7a:	bf04      	itt	eq
 80a2d7c:	4619      	moveq	r1, r3
 80a2d7e:	4610      	moveq	r0, r2
 80a2d80:	bd30      	pop	{r4, r5, pc}
 80a2d82:	ea91 0f03 	teq	r1, r3
 80a2d86:	bf1e      	ittt	ne
 80a2d88:	2100      	movne	r1, #0
 80a2d8a:	2000      	movne	r0, #0
 80a2d8c:	bd30      	popne	{r4, r5, pc}
 80a2d8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2d92:	d105      	bne.n	80a2da0 <__adddf3+0x230>
 80a2d94:	0040      	lsls	r0, r0, #1
 80a2d96:	4149      	adcs	r1, r1
 80a2d98:	bf28      	it	cs
 80a2d9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2d9e:	bd30      	pop	{r4, r5, pc}
 80a2da0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2da4:	bf3c      	itt	cc
 80a2da6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2daa:	bd30      	popcc	{r4, r5, pc}
 80a2dac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2db0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2db4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2db8:	f04f 0000 	mov.w	r0, #0
 80a2dbc:	bd30      	pop	{r4, r5, pc}
 80a2dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2dc2:	bf1a      	itte	ne
 80a2dc4:	4619      	movne	r1, r3
 80a2dc6:	4610      	movne	r0, r2
 80a2dc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2dcc:	bf1c      	itt	ne
 80a2dce:	460b      	movne	r3, r1
 80a2dd0:	4602      	movne	r2, r0
 80a2dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2dd6:	bf06      	itte	eq
 80a2dd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2ddc:	ea91 0f03 	teqeq	r1, r3
 80a2de0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2de4:	bd30      	pop	{r4, r5, pc}
 80a2de6:	bf00      	nop

080a2de8 <__aeabi_ui2d>:
 80a2de8:	f090 0f00 	teq	r0, #0
 80a2dec:	bf04      	itt	eq
 80a2dee:	2100      	moveq	r1, #0
 80a2df0:	4770      	bxeq	lr
 80a2df2:	b530      	push	{r4, r5, lr}
 80a2df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2dfc:	f04f 0500 	mov.w	r5, #0
 80a2e00:	f04f 0100 	mov.w	r1, #0
 80a2e04:	e750      	b.n	80a2ca8 <__adddf3+0x138>
 80a2e06:	bf00      	nop

080a2e08 <__aeabi_i2d>:
 80a2e08:	f090 0f00 	teq	r0, #0
 80a2e0c:	bf04      	itt	eq
 80a2e0e:	2100      	moveq	r1, #0
 80a2e10:	4770      	bxeq	lr
 80a2e12:	b530      	push	{r4, r5, lr}
 80a2e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2e1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2e20:	bf48      	it	mi
 80a2e22:	4240      	negmi	r0, r0
 80a2e24:	f04f 0100 	mov.w	r1, #0
 80a2e28:	e73e      	b.n	80a2ca8 <__adddf3+0x138>
 80a2e2a:	bf00      	nop

080a2e2c <__aeabi_f2d>:
 80a2e2c:	0042      	lsls	r2, r0, #1
 80a2e2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2e32:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2e36:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2e3a:	bf1f      	itttt	ne
 80a2e3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2e40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2e44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2e48:	4770      	bxne	lr
 80a2e4a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2e4e:	bf08      	it	eq
 80a2e50:	4770      	bxeq	lr
 80a2e52:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2e56:	bf04      	itt	eq
 80a2e58:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2e5c:	4770      	bxeq	lr
 80a2e5e:	b530      	push	{r4, r5, lr}
 80a2e60:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2e68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2e6c:	e71c      	b.n	80a2ca8 <__adddf3+0x138>
 80a2e6e:	bf00      	nop

080a2e70 <__aeabi_ul2d>:
 80a2e70:	ea50 0201 	orrs.w	r2, r0, r1
 80a2e74:	bf08      	it	eq
 80a2e76:	4770      	bxeq	lr
 80a2e78:	b530      	push	{r4, r5, lr}
 80a2e7a:	f04f 0500 	mov.w	r5, #0
 80a2e7e:	e00a      	b.n	80a2e96 <__aeabi_l2d+0x16>

080a2e80 <__aeabi_l2d>:
 80a2e80:	ea50 0201 	orrs.w	r2, r0, r1
 80a2e84:	bf08      	it	eq
 80a2e86:	4770      	bxeq	lr
 80a2e88:	b530      	push	{r4, r5, lr}
 80a2e8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2e8e:	d502      	bpl.n	80a2e96 <__aeabi_l2d+0x16>
 80a2e90:	4240      	negs	r0, r0
 80a2e92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2e96:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2e9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2e9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2ea2:	f43f aed8 	beq.w	80a2c56 <__adddf3+0xe6>
 80a2ea6:	f04f 0203 	mov.w	r2, #3
 80a2eaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2eae:	bf18      	it	ne
 80a2eb0:	3203      	addne	r2, #3
 80a2eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2eb6:	bf18      	it	ne
 80a2eb8:	3203      	addne	r2, #3
 80a2eba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2ebe:	f1c2 0320 	rsb	r3, r2, #32
 80a2ec2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2ec6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2eca:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2ece:	ea40 000e 	orr.w	r0, r0, lr
 80a2ed2:	fa21 f102 	lsr.w	r1, r1, r2
 80a2ed6:	4414      	add	r4, r2
 80a2ed8:	e6bd      	b.n	80a2c56 <__adddf3+0xe6>
 80a2eda:	bf00      	nop

080a2edc <__aeabi_dmul>:
 80a2edc:	b570      	push	{r4, r5, r6, lr}
 80a2ede:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ee2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2ee6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2eea:	bf1d      	ittte	ne
 80a2eec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ef0:	ea94 0f0c 	teqne	r4, ip
 80a2ef4:	ea95 0f0c 	teqne	r5, ip
 80a2ef8:	f000 f8de 	bleq	80a30b8 <__aeabi_dmul+0x1dc>
 80a2efc:	442c      	add	r4, r5
 80a2efe:	ea81 0603 	eor.w	r6, r1, r3
 80a2f02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2f06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2f0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2f0e:	bf18      	it	ne
 80a2f10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2f1c:	d038      	beq.n	80a2f90 <__aeabi_dmul+0xb4>
 80a2f1e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2f22:	f04f 0500 	mov.w	r5, #0
 80a2f26:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2f2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2f2e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2f32:	f04f 0600 	mov.w	r6, #0
 80a2f36:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2f3a:	f09c 0f00 	teq	ip, #0
 80a2f3e:	bf18      	it	ne
 80a2f40:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2f44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2f48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2f4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2f50:	d204      	bcs.n	80a2f5c <__aeabi_dmul+0x80>
 80a2f52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2f56:	416d      	adcs	r5, r5
 80a2f58:	eb46 0606 	adc.w	r6, r6, r6
 80a2f5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2f60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2f64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2f68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2f6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2f70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2f74:	bf88      	it	hi
 80a2f76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2f7a:	d81e      	bhi.n	80a2fba <__aeabi_dmul+0xde>
 80a2f7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2f80:	bf08      	it	eq
 80a2f82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2f86:	f150 0000 	adcs.w	r0, r0, #0
 80a2f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f8e:	bd70      	pop	{r4, r5, r6, pc}
 80a2f90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2f94:	ea46 0101 	orr.w	r1, r6, r1
 80a2f98:	ea40 0002 	orr.w	r0, r0, r2
 80a2f9c:	ea81 0103 	eor.w	r1, r1, r3
 80a2fa0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2fa4:	bfc2      	ittt	gt
 80a2fa6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2faa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2fae:	bd70      	popgt	{r4, r5, r6, pc}
 80a2fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2fb4:	f04f 0e00 	mov.w	lr, #0
 80a2fb8:	3c01      	subs	r4, #1
 80a2fba:	f300 80ab 	bgt.w	80a3114 <__aeabi_dmul+0x238>
 80a2fbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2fc2:	bfde      	ittt	le
 80a2fc4:	2000      	movle	r0, #0
 80a2fc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2fca:	bd70      	pople	{r4, r5, r6, pc}
 80a2fcc:	f1c4 0400 	rsb	r4, r4, #0
 80a2fd0:	3c20      	subs	r4, #32
 80a2fd2:	da35      	bge.n	80a3040 <__aeabi_dmul+0x164>
 80a2fd4:	340c      	adds	r4, #12
 80a2fd6:	dc1b      	bgt.n	80a3010 <__aeabi_dmul+0x134>
 80a2fd8:	f104 0414 	add.w	r4, r4, #20
 80a2fdc:	f1c4 0520 	rsb	r5, r4, #32
 80a2fe0:	fa00 f305 	lsl.w	r3, r0, r5
 80a2fe4:	fa20 f004 	lsr.w	r0, r0, r4
 80a2fe8:	fa01 f205 	lsl.w	r2, r1, r5
 80a2fec:	ea40 0002 	orr.w	r0, r0, r2
 80a2ff0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2ff4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2ff8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2ffc:	fa21 f604 	lsr.w	r6, r1, r4
 80a3000:	eb42 0106 	adc.w	r1, r2, r6
 80a3004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3008:	bf08      	it	eq
 80a300a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a300e:	bd70      	pop	{r4, r5, r6, pc}
 80a3010:	f1c4 040c 	rsb	r4, r4, #12
 80a3014:	f1c4 0520 	rsb	r5, r4, #32
 80a3018:	fa00 f304 	lsl.w	r3, r0, r4
 80a301c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3020:	fa01 f204 	lsl.w	r2, r1, r4
 80a3024:	ea40 0002 	orr.w	r0, r0, r2
 80a3028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a302c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3030:	f141 0100 	adc.w	r1, r1, #0
 80a3034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3038:	bf08      	it	eq
 80a303a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a303e:	bd70      	pop	{r4, r5, r6, pc}
 80a3040:	f1c4 0520 	rsb	r5, r4, #32
 80a3044:	fa00 f205 	lsl.w	r2, r0, r5
 80a3048:	ea4e 0e02 	orr.w	lr, lr, r2
 80a304c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3050:	fa01 f205 	lsl.w	r2, r1, r5
 80a3054:	ea43 0302 	orr.w	r3, r3, r2
 80a3058:	fa21 f004 	lsr.w	r0, r1, r4
 80a305c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3060:	fa21 f204 	lsr.w	r2, r1, r4
 80a3064:	ea20 0002 	bic.w	r0, r0, r2
 80a3068:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a306c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3070:	bf08      	it	eq
 80a3072:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3076:	bd70      	pop	{r4, r5, r6, pc}
 80a3078:	f094 0f00 	teq	r4, #0
 80a307c:	d10f      	bne.n	80a309e <__aeabi_dmul+0x1c2>
 80a307e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3082:	0040      	lsls	r0, r0, #1
 80a3084:	eb41 0101 	adc.w	r1, r1, r1
 80a3088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a308c:	bf08      	it	eq
 80a308e:	3c01      	subeq	r4, #1
 80a3090:	d0f7      	beq.n	80a3082 <__aeabi_dmul+0x1a6>
 80a3092:	ea41 0106 	orr.w	r1, r1, r6
 80a3096:	f095 0f00 	teq	r5, #0
 80a309a:	bf18      	it	ne
 80a309c:	4770      	bxne	lr
 80a309e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a30a2:	0052      	lsls	r2, r2, #1
 80a30a4:	eb43 0303 	adc.w	r3, r3, r3
 80a30a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a30ac:	bf08      	it	eq
 80a30ae:	3d01      	subeq	r5, #1
 80a30b0:	d0f7      	beq.n	80a30a2 <__aeabi_dmul+0x1c6>
 80a30b2:	ea43 0306 	orr.w	r3, r3, r6
 80a30b6:	4770      	bx	lr
 80a30b8:	ea94 0f0c 	teq	r4, ip
 80a30bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a30c0:	bf18      	it	ne
 80a30c2:	ea95 0f0c 	teqne	r5, ip
 80a30c6:	d00c      	beq.n	80a30e2 <__aeabi_dmul+0x206>
 80a30c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a30cc:	bf18      	it	ne
 80a30ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a30d2:	d1d1      	bne.n	80a3078 <__aeabi_dmul+0x19c>
 80a30d4:	ea81 0103 	eor.w	r1, r1, r3
 80a30d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a30dc:	f04f 0000 	mov.w	r0, #0
 80a30e0:	bd70      	pop	{r4, r5, r6, pc}
 80a30e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a30e6:	bf06      	itte	eq
 80a30e8:	4610      	moveq	r0, r2
 80a30ea:	4619      	moveq	r1, r3
 80a30ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a30f0:	d019      	beq.n	80a3126 <__aeabi_dmul+0x24a>
 80a30f2:	ea94 0f0c 	teq	r4, ip
 80a30f6:	d102      	bne.n	80a30fe <__aeabi_dmul+0x222>
 80a30f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a30fc:	d113      	bne.n	80a3126 <__aeabi_dmul+0x24a>
 80a30fe:	ea95 0f0c 	teq	r5, ip
 80a3102:	d105      	bne.n	80a3110 <__aeabi_dmul+0x234>
 80a3104:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3108:	bf1c      	itt	ne
 80a310a:	4610      	movne	r0, r2
 80a310c:	4619      	movne	r1, r3
 80a310e:	d10a      	bne.n	80a3126 <__aeabi_dmul+0x24a>
 80a3110:	ea81 0103 	eor.w	r1, r1, r3
 80a3114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3118:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a311c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3120:	f04f 0000 	mov.w	r0, #0
 80a3124:	bd70      	pop	{r4, r5, r6, pc}
 80a3126:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a312a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a312e:	bd70      	pop	{r4, r5, r6, pc}

080a3130 <__aeabi_ddiv>:
 80a3130:	b570      	push	{r4, r5, r6, lr}
 80a3132:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3136:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a313a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a313e:	bf1d      	ittte	ne
 80a3140:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3144:	ea94 0f0c 	teqne	r4, ip
 80a3148:	ea95 0f0c 	teqne	r5, ip
 80a314c:	f000 f8a7 	bleq	80a329e <__aeabi_ddiv+0x16e>
 80a3150:	eba4 0405 	sub.w	r4, r4, r5
 80a3154:	ea81 0e03 	eor.w	lr, r1, r3
 80a3158:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a315c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3160:	f000 8088 	beq.w	80a3274 <__aeabi_ddiv+0x144>
 80a3164:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3168:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a316c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3170:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3174:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3178:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a317c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3180:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3184:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3188:	429d      	cmp	r5, r3
 80a318a:	bf08      	it	eq
 80a318c:	4296      	cmpeq	r6, r2
 80a318e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3192:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3196:	d202      	bcs.n	80a319e <__aeabi_ddiv+0x6e>
 80a3198:	085b      	lsrs	r3, r3, #1
 80a319a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a319e:	1ab6      	subs	r6, r6, r2
 80a31a0:	eb65 0503 	sbc.w	r5, r5, r3
 80a31a4:	085b      	lsrs	r3, r3, #1
 80a31a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a31aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a31ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a31b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a31b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a31ba:	bf22      	ittt	cs
 80a31bc:	1ab6      	subcs	r6, r6, r2
 80a31be:	4675      	movcs	r5, lr
 80a31c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a31c4:	085b      	lsrs	r3, r3, #1
 80a31c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a31ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a31ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a31d2:	bf22      	ittt	cs
 80a31d4:	1ab6      	subcs	r6, r6, r2
 80a31d6:	4675      	movcs	r5, lr
 80a31d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a31dc:	085b      	lsrs	r3, r3, #1
 80a31de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a31e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a31e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a31ea:	bf22      	ittt	cs
 80a31ec:	1ab6      	subcs	r6, r6, r2
 80a31ee:	4675      	movcs	r5, lr
 80a31f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a31f4:	085b      	lsrs	r3, r3, #1
 80a31f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a31fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a31fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3202:	bf22      	ittt	cs
 80a3204:	1ab6      	subcs	r6, r6, r2
 80a3206:	4675      	movcs	r5, lr
 80a3208:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a320c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3210:	d018      	beq.n	80a3244 <__aeabi_ddiv+0x114>
 80a3212:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3216:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a321a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a321e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3222:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3226:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a322a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a322e:	d1c0      	bne.n	80a31b2 <__aeabi_ddiv+0x82>
 80a3230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3234:	d10b      	bne.n	80a324e <__aeabi_ddiv+0x11e>
 80a3236:	ea41 0100 	orr.w	r1, r1, r0
 80a323a:	f04f 0000 	mov.w	r0, #0
 80a323e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3242:	e7b6      	b.n	80a31b2 <__aeabi_ddiv+0x82>
 80a3244:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3248:	bf04      	itt	eq
 80a324a:	4301      	orreq	r1, r0
 80a324c:	2000      	moveq	r0, #0
 80a324e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3252:	bf88      	it	hi
 80a3254:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3258:	f63f aeaf 	bhi.w	80a2fba <__aeabi_dmul+0xde>
 80a325c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3260:	bf04      	itt	eq
 80a3262:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a326a:	f150 0000 	adcs.w	r0, r0, #0
 80a326e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3272:	bd70      	pop	{r4, r5, r6, pc}
 80a3274:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3278:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a327c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3280:	bfc2      	ittt	gt
 80a3282:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3286:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a328a:	bd70      	popgt	{r4, r5, r6, pc}
 80a328c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3290:	f04f 0e00 	mov.w	lr, #0
 80a3294:	3c01      	subs	r4, #1
 80a3296:	e690      	b.n	80a2fba <__aeabi_dmul+0xde>
 80a3298:	ea45 0e06 	orr.w	lr, r5, r6
 80a329c:	e68d      	b.n	80a2fba <__aeabi_dmul+0xde>
 80a329e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a32a2:	ea94 0f0c 	teq	r4, ip
 80a32a6:	bf08      	it	eq
 80a32a8:	ea95 0f0c 	teqeq	r5, ip
 80a32ac:	f43f af3b 	beq.w	80a3126 <__aeabi_dmul+0x24a>
 80a32b0:	ea94 0f0c 	teq	r4, ip
 80a32b4:	d10a      	bne.n	80a32cc <__aeabi_ddiv+0x19c>
 80a32b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a32ba:	f47f af34 	bne.w	80a3126 <__aeabi_dmul+0x24a>
 80a32be:	ea95 0f0c 	teq	r5, ip
 80a32c2:	f47f af25 	bne.w	80a3110 <__aeabi_dmul+0x234>
 80a32c6:	4610      	mov	r0, r2
 80a32c8:	4619      	mov	r1, r3
 80a32ca:	e72c      	b.n	80a3126 <__aeabi_dmul+0x24a>
 80a32cc:	ea95 0f0c 	teq	r5, ip
 80a32d0:	d106      	bne.n	80a32e0 <__aeabi_ddiv+0x1b0>
 80a32d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a32d6:	f43f aefd 	beq.w	80a30d4 <__aeabi_dmul+0x1f8>
 80a32da:	4610      	mov	r0, r2
 80a32dc:	4619      	mov	r1, r3
 80a32de:	e722      	b.n	80a3126 <__aeabi_dmul+0x24a>
 80a32e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a32e4:	bf18      	it	ne
 80a32e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a32ea:	f47f aec5 	bne.w	80a3078 <__aeabi_dmul+0x19c>
 80a32ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a32f2:	f47f af0d 	bne.w	80a3110 <__aeabi_dmul+0x234>
 80a32f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a32fa:	f47f aeeb 	bne.w	80a30d4 <__aeabi_dmul+0x1f8>
 80a32fe:	e712      	b.n	80a3126 <__aeabi_dmul+0x24a>

080a3300 <__aeabi_d2uiz>:
 80a3300:	004a      	lsls	r2, r1, #1
 80a3302:	d211      	bcs.n	80a3328 <__aeabi_d2uiz+0x28>
 80a3304:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3308:	d211      	bcs.n	80a332e <__aeabi_d2uiz+0x2e>
 80a330a:	d50d      	bpl.n	80a3328 <__aeabi_d2uiz+0x28>
 80a330c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3310:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3314:	d40e      	bmi.n	80a3334 <__aeabi_d2uiz+0x34>
 80a3316:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a331a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a331e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3322:	fa23 f002 	lsr.w	r0, r3, r2
 80a3326:	4770      	bx	lr
 80a3328:	f04f 0000 	mov.w	r0, #0
 80a332c:	4770      	bx	lr
 80a332e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3332:	d102      	bne.n	80a333a <__aeabi_d2uiz+0x3a>
 80a3334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3338:	4770      	bx	lr
 80a333a:	f04f 0000 	mov.w	r0, #0
 80a333e:	4770      	bx	lr

080a3340 <atexit>:
 80a3340:	2300      	movs	r3, #0
 80a3342:	4601      	mov	r1, r0
 80a3344:	461a      	mov	r2, r3
 80a3346:	4618      	mov	r0, r3
 80a3348:	f000 b868 	b.w	80a341c <__register_exitproc>

080a334c <ldiv>:
 80a334c:	b510      	push	{r4, lr}
 80a334e:	fb91 f4f2 	sdiv	r4, r1, r2
 80a3352:	2900      	cmp	r1, #0
 80a3354:	fb02 1314 	mls	r3, r2, r4, r1
 80a3358:	db06      	blt.n	80a3368 <ldiv+0x1c>
 80a335a:	2b00      	cmp	r3, #0
 80a335c:	da01      	bge.n	80a3362 <ldiv+0x16>
 80a335e:	3401      	adds	r4, #1
 80a3360:	1a9b      	subs	r3, r3, r2
 80a3362:	e9c0 4300 	strd	r4, r3, [r0]
 80a3366:	bd10      	pop	{r4, pc}
 80a3368:	2b00      	cmp	r3, #0
 80a336a:	bfc4      	itt	gt
 80a336c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a3370:	189b      	addgt	r3, r3, r2
 80a3372:	e7f6      	b.n	80a3362 <ldiv+0x16>

080a3374 <memcpy>:
 80a3374:	440a      	add	r2, r1
 80a3376:	4291      	cmp	r1, r2
 80a3378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a337c:	d100      	bne.n	80a3380 <memcpy+0xc>
 80a337e:	4770      	bx	lr
 80a3380:	b510      	push	{r4, lr}
 80a3382:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3386:	4291      	cmp	r1, r2
 80a3388:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a338c:	d1f9      	bne.n	80a3382 <memcpy+0xe>
 80a338e:	bd10      	pop	{r4, pc}

080a3390 <memset>:
 80a3390:	4603      	mov	r3, r0
 80a3392:	4402      	add	r2, r0
 80a3394:	4293      	cmp	r3, r2
 80a3396:	d100      	bne.n	80a339a <memset+0xa>
 80a3398:	4770      	bx	lr
 80a339a:	f803 1b01 	strb.w	r1, [r3], #1
 80a339e:	e7f9      	b.n	80a3394 <memset+0x4>

080a33a0 <srand>:
 80a33a0:	b538      	push	{r3, r4, r5, lr}
 80a33a2:	4b0d      	ldr	r3, [pc, #52]	; (80a33d8 <srand+0x38>)
 80a33a4:	4604      	mov	r4, r0
 80a33a6:	681d      	ldr	r5, [r3, #0]
 80a33a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a33aa:	b97b      	cbnz	r3, 80a33cc <srand+0x2c>
 80a33ac:	2018      	movs	r0, #24
 80a33ae:	f7fe f9e3 	bl	80a1778 <malloc>
 80a33b2:	4a0a      	ldr	r2, [pc, #40]	; (80a33dc <srand+0x3c>)
 80a33b4:	4b0a      	ldr	r3, [pc, #40]	; (80a33e0 <srand+0x40>)
 80a33b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a33b8:	e9c0 2300 	strd	r2, r3, [r0]
 80a33bc:	4b09      	ldr	r3, [pc, #36]	; (80a33e4 <srand+0x44>)
 80a33be:	2201      	movs	r2, #1
 80a33c0:	6083      	str	r3, [r0, #8]
 80a33c2:	230b      	movs	r3, #11
 80a33c4:	8183      	strh	r3, [r0, #12]
 80a33c6:	2300      	movs	r3, #0
 80a33c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a33cc:	2200      	movs	r2, #0
 80a33ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a33d0:	611c      	str	r4, [r3, #16]
 80a33d2:	615a      	str	r2, [r3, #20]
 80a33d4:	bd38      	pop	{r3, r4, r5, pc}
 80a33d6:	bf00      	nop
 80a33d8:	2000002c 	.word	0x2000002c
 80a33dc:	abcd330e 	.word	0xabcd330e
 80a33e0:	e66d1234 	.word	0xe66d1234
 80a33e4:	0005deec 	.word	0x0005deec

080a33e8 <strcmp>:
 80a33e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a33ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a33f0:	2a01      	cmp	r2, #1
 80a33f2:	bf28      	it	cs
 80a33f4:	429a      	cmpcs	r2, r3
 80a33f6:	d0f7      	beq.n	80a33e8 <strcmp>
 80a33f8:	1ad0      	subs	r0, r2, r3
 80a33fa:	4770      	bx	lr

080a33fc <strcpy>:
 80a33fc:	4603      	mov	r3, r0
 80a33fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3402:	f803 2b01 	strb.w	r2, [r3], #1
 80a3406:	2a00      	cmp	r2, #0
 80a3408:	d1f9      	bne.n	80a33fe <strcpy+0x2>
 80a340a:	4770      	bx	lr

080a340c <strlen>:
 80a340c:	4603      	mov	r3, r0
 80a340e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3412:	2a00      	cmp	r2, #0
 80a3414:	d1fb      	bne.n	80a340e <strlen+0x2>
 80a3416:	1a18      	subs	r0, r3, r0
 80a3418:	3801      	subs	r0, #1
 80a341a:	4770      	bx	lr

080a341c <__register_exitproc>:
 80a341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3420:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a34e0 <__register_exitproc+0xc4>
 80a3424:	4606      	mov	r6, r0
 80a3426:	f8d8 0000 	ldr.w	r0, [r8]
 80a342a:	461f      	mov	r7, r3
 80a342c:	460d      	mov	r5, r1
 80a342e:	4691      	mov	r9, r2
 80a3430:	f000 f858 	bl	80a34e4 <__retarget_lock_acquire_recursive>
 80a3434:	4b26      	ldr	r3, [pc, #152]	; (80a34d0 <__register_exitproc+0xb4>)
 80a3436:	681c      	ldr	r4, [r3, #0]
 80a3438:	b934      	cbnz	r4, 80a3448 <__register_exitproc+0x2c>
 80a343a:	4c26      	ldr	r4, [pc, #152]	; (80a34d4 <__register_exitproc+0xb8>)
 80a343c:	601c      	str	r4, [r3, #0]
 80a343e:	4b26      	ldr	r3, [pc, #152]	; (80a34d8 <__register_exitproc+0xbc>)
 80a3440:	b113      	cbz	r3, 80a3448 <__register_exitproc+0x2c>
 80a3442:	681b      	ldr	r3, [r3, #0]
 80a3444:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3448:	6863      	ldr	r3, [r4, #4]
 80a344a:	2b1f      	cmp	r3, #31
 80a344c:	dd07      	ble.n	80a345e <__register_exitproc+0x42>
 80a344e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3452:	f000 f849 	bl	80a34e8 <__retarget_lock_release_recursive>
 80a3456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a345e:	b35e      	cbz	r6, 80a34b8 <__register_exitproc+0x9c>
 80a3460:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3464:	b988      	cbnz	r0, 80a348a <__register_exitproc+0x6e>
 80a3466:	4b1d      	ldr	r3, [pc, #116]	; (80a34dc <__register_exitproc+0xc0>)
 80a3468:	b923      	cbnz	r3, 80a3474 <__register_exitproc+0x58>
 80a346a:	f8d8 0000 	ldr.w	r0, [r8]
 80a346e:	f000 f83a 	bl	80a34e6 <__retarget_lock_release>
 80a3472:	e7f0      	b.n	80a3456 <__register_exitproc+0x3a>
 80a3474:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3478:	f7fe f97e 	bl	80a1778 <malloc>
 80a347c:	2800      	cmp	r0, #0
 80a347e:	d0f4      	beq.n	80a346a <__register_exitproc+0x4e>
 80a3480:	2300      	movs	r3, #0
 80a3482:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3486:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a348a:	2201      	movs	r2, #1
 80a348c:	6863      	ldr	r3, [r4, #4]
 80a348e:	2e02      	cmp	r6, #2
 80a3490:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3494:	fa02 f203 	lsl.w	r2, r2, r3
 80a3498:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a349c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a34a0:	ea43 0302 	orr.w	r3, r3, r2
 80a34a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a34a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a34ac:	bf02      	ittt	eq
 80a34ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a34b2:	431a      	orreq	r2, r3
 80a34b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a34b8:	6863      	ldr	r3, [r4, #4]
 80a34ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a34be:	1c5a      	adds	r2, r3, #1
 80a34c0:	3302      	adds	r3, #2
 80a34c2:	6062      	str	r2, [r4, #4]
 80a34c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a34c8:	f000 f80e 	bl	80a34e8 <__retarget_lock_release_recursive>
 80a34cc:	2000      	movs	r0, #0
 80a34ce:	e7c4      	b.n	80a345a <__register_exitproc+0x3e>
 80a34d0:	200006f8 	.word	0x200006f8
 80a34d4:	2000066c 	.word	0x2000066c
 80a34d8:	00000000 	.word	0x00000000
 80a34dc:	080a1779 	.word	0x080a1779
 80a34e0:	20000090 	.word	0x20000090

080a34e4 <__retarget_lock_acquire_recursive>:
 80a34e4:	4770      	bx	lr

080a34e6 <__retarget_lock_release>:
 80a34e6:	4770      	bx	lr

080a34e8 <__retarget_lock_release_recursive>:
 80a34e8:	4770      	bx	lr

080a34ea <link_code_end>:
	...

080a34ec <dynalib_user>:
 80a34ec:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a34fc:	0000 0000 6146 6c69 6465 7420 206f 6f62     ....Failed to bo
 80a350c:	746f 6620 7269 7473 5620 364c 3831 5830     ot first VL6180X
 80a351c:	4600 6961 656c 2064 6f74 6220 6f6f 2074     .Failed to boot 
 80a352c:	6573 6f63 646e 5620 364c 3831 5830 4600     second VL6180X.F
 80a353c:	6961 656c 2064 6f74 6220 6f6f 2074 6874     ailed to boot th
 80a354c:	7269 2064 4c56 3136 3038 0058 6146 6c69     ird VL6180X.Fail
 80a355c:	6465 7420 206f 6f62 746f 6620 756f 7472     ed to boot fourt
 80a356c:	2068 4c56 3136 3038 0058 6146 6c69 6465     h VL6180X.Failed
 80a357c:	7420 206f 6f62 746f 6620 6669 6874 5620      to boot fifth V
 80a358c:	364c 3831 5830 4600 6961 656c 2064 6f74     L6180X.Failed to
 80a359c:	6220 6f6f 2074 6973 7478 2068 4c56 3136      boot sixth VL61
 80a35ac:	3038 0058 6146 6c69 6465 7420 206f 6f62     80X.Failed to bo
 80a35bc:	746f 7320 7665 6e65 6874 5620 364c 3831     ot seventh VL618
 80a35cc:	5830 4600 6961 656c 2064 6f74 6220 6f6f     0X.Failed to boo
 80a35dc:	2074 6965 7467 2068 4c56 3136 3038 0058     t eigth VL6180X.
 80a35ec:	6146 6c69 6465 7420 206f 6f62 746f 6e20     Failed to boot n
 80a35fc:	6e69 6874 5620 364c 3831 5830 4600 6961     inth VL6180X.Fai
 80a360c:	656c 2064 6f74 6220 6f6f 2074 6574 746e     led to boot tent
 80a361c:	2068 4c56 3136 3038 0058 6f43 6e6e 6365     h VL6180X.Connec
 80a362c:	6974 676e 2e2e 002e 7277 7369 2d74 6177     ting....wrist-wa
 80a363c:	6374 0068 6853 7475 6f64 6e77 7020 6e69     tch.Shutdown pin
 80a364c:	2073 6e69 7469 6465 2e2e 002e 6c41 206c     s inited....All 
 80a365c:	6e69 7220 7365 7465 6d20 646f 2e65 2e2e     in reset mode...
 80a366c:	7028 6e69 2073 7261 2065 6f6c 2977 5300     (pins are low).S
 80a367c:	6174 7472 6e69 2e67 2e2e 7700 6972 7473     tarting....wrist
 80a368c:	642f 7461 2f61 6573 736e 726f 0073 716d     /data/sensors.mq
 80a369c:	7474 652e 6c63 7069 6573 7270 6a6f 6365     tt.eclipseprojec
 80a36ac:	7374 692e 006f 0400 514d 5454 0004 4d06     ts.io...MQTT...M
 80a36bc:	4951 6473 0370 0000                         QIsdp...

080a36c4 <_ZTV7TwoWire>:
	...
 80a36cc:	17bf 080a 1809 080a 17e1 080a 17c1 080a     ................
 80a36dc:	17e9 080a 17f1 080a 17f9 080a 1801 080a     ................

080a36ec <_ZTV9IPAddress>:
	...
 80a36f4:	18c1 080a 18b1 080a 18b3 080a 7061 0070     ............app.

080a3704 <_ZTVN5spark12NetworkClassE>:
	...
 80a370c:	19b1 080a 19bb 080a 19c5 080a 19cf 080a     ................
 80a371c:	19d9 080a 19e5 080a 19f1 080a 19f9 080a     ................
 80a372c:	1a01 080a 1a0d 080a 1a15 080a 1a1f 080a     ................
 80a373c:	1a29 080a 6977 6972 676e 5400 5043 6c43     )...wiring.TCPCl
 80a374c:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a375c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3764:	1d3d 080a 1d65 080a 2187 080a 1d73 080a     =...e....!..s...
 80a3774:	1d41 080a                                   A...

080a3778 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a3780 <_ZTV9TCPClient>:
	...
 80a3788:	1d79 080a 1dad 080a 1cf9 080a 1d13 080a     y...............
 80a3798:	1f89 080a 1e0f 080a 1de1 080a 1d3b 080a     ............;...
 80a37a8:	1ea9 080a 218d 080a 1e43 080a 1ffd 080a     .....!..C.......
 80a37b8:	20ab 080a 2063 080a 1d23 080a 2071 080a     . ..c ..#...q ..
 80a37c8:	1dc1 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a37d8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a37e8 <_ZTV11USARTSerial>:
	...
 80a37f0:	2281 080a 22eb 080a 22c7 080a 1aa5 080a     ."..."..."......
 80a3800:	2297 080a 22b3 080a 22a5 080a 22c1 080a     ."..."..."..."..
 80a3810:	2283 080a 2289 080a                         ."..."..

080a3818 <_ZTV9USBSerial>:
	...
 80a3820:	2373 080a 23d9 080a 23b1 080a 1aa5 080a     s#...#...#......
 80a3830:	23a3 080a 2375 080a 2385 080a 23d3 080a     .#..u#...#...#..
 80a3840:	2395 080a 236d 080a                         .#..m#..

080a3848 <_ZTVN5spark9WiFiClassE>:
	...
 80a3850:	25af 080a 25a5 080a 259b 080a 250d 080a     .%...%...%...%..
 80a3860:	258f 080a 2583 080a 19f1 080a 19f9 080a     .%...%..........
 80a3870:	2577 080a 256f 080a 2565 080a 255b 080a     w%..o%..e%..[%..
 80a3880:	2517 080a                                   .%..

080a3884 <_ZSt7nothrow>:
	...

080a3885 <_ZTSSt19_Sp_make_shared_tag>:
 80a3885:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a3895:	6572 5f64 6174 0067 0000                     red_tag....

080a38a0 <_ZTISt19_Sp_make_shared_tag>:
 80a38a0:	38e0 080a 3885 080a                         .8...8..

080a38a8 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a38a8:	3940 080a 38b4 080a 3964 080a               @9...8..d9..

080a38b4 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a38b4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a38c4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a38d4:	0045 0000                                   E...

080a38d8 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a38d8:	0000 0000 38a8 080a 2989 080a 299d 080a     .....8...)...)..
 80a38e8:	2b35 080a 2b35 080a 2a07 080a 2949 080a     5+..5+...*..I)..
 80a38f8:	29ef 080a 29b1 080a 297d 080a               .)...)..})..

080a3904 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a3904:	3940 080a 3910 080a 38a8 080a               @9...9...8..

080a3910 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a3910:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a3920:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a3930:	666e 456f 0000 0000                         nfoE....

080a3938 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a3938:	0000 0000 3904 080a 2a31 080a 2a45 080a     .....9..1*..E*..
 80a3948:	2b35 080a 2b35 080a 2a07 080a 2949 080a     5+..5+...*..I)..
 80a3958:	2b09 080a 2a95 080a 2a59 080a               .+...*..Y*..

080a3964 <_ZTISt9type_info>:
 80a3964:	38e0 080a 396c 080a                         .8..l9..

080a396c <_ZTSSt9type_info>:
 80a396c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a3979 <link_const_variable_data_end>:
 80a3979:	00          	.byte	0x00
	...

080a397c <link_constructors_location>:
 80a397c:	080a09fd 	.word	0x080a09fd
 80a3980:	080a19a1 	.word	0x080a19a1
 80a3984:	080a1a91 	.word	0x080a1a91
 80a3988:	080a1b61 	.word	0x080a1b61
 80a398c:	080a1cd5 	.word	0x080a1cd5
 80a3990:	080a226d 	.word	0x080a226d
 80a3994:	080a25b9 	.word	0x080a25b9
 80a3998:	080a2919 	.word	0x080a2919

080a399c <link_constructors_end>:
 80a399c:	00000000 	.word	0x00000000
